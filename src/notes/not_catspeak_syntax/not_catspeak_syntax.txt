Catspeak is a simple imperative language with a vaguely similar syntax to GML.
As an example, consider the following program written in GML to calculate the
factorial of a number `n`:
```
// GML CODE
function factorial(n) {
    var m = 1;
    if (n > 1) {
        m = n * factorial(n - 1);
    }
    return m;
}

factorial(5); // output: 120
```
NOTE: This example is intentionally verbose in order to showcase: variables,
      function declarations, identifiers, "if" statements, function calls,
      assignment statements, return statements, and comments.

Below is the same program written in Catspeak:
```
-- CATSPEAK CODE
factorial = fun(n) {
    let m = 1
    if (n > 1) {
        m = n * factorial(n - 1)
    }
    return m
}

factorial(5) -- output: 120
```
There are some immediately obvious differences here, such as the `m` variable
being declared using `let` instead of `var`, `fun` instead of `function`, and
comments using `--` instead of `//`. All of these differences (and more) are
described in the [Lexical Grammar] section.

# Lexical Grammar

Catspeak source code is a sequence of ASCII characters. This unfortunately
means that Unicode support is not guaranteed to work, but results in a faster
compiler.

This sequence of characters first needs to be transformed into larger groups
of characters called "tokens". The following sections will cover what each
of these tokens are composed of.

## Whitespace

For the most part, Catspeak is whitespace insensitive. There are exceptions
to this for [Identifiers] and [Automatic Semicolon Insertion], but otherwise
Catspeak ignores the following characters:

 - Character tabulation '\t' (code point U+0009)
 - Line feed            '\n' (code point U+000A)
 - Line tabulation      '\v' (code point U+000B)
 - Form feed            '\f' (code point U+000C)
 - Carriage return      '\r' (code point U+000D)
 - Space                     (code point U+0020)
 - Next Line                 (code point U+0085)

## Comments

The only way to add a comment in Catspeak is to use the special `--` symbol.
This will ignore all of the characters after it until a new line is reached.
For example:
```
-- this is a Catspeak comment!
```

NOTE: Unlike GML, Catspeak does not support multi-line comments.
      Use multiple comments instead.

NOTE: Because Catspeak allows for custom operators, you **must only** use
      `--` and not something like `---` or `--//`; otherwise it will be
      considered a custom operator identifier. For more information, see the
      [Operator Identifiers] section.

## Identifiers

TODO

### Raw Identifiers

TODO

### Operator Identifiers

TODO

## Keywords

TODO

## Literals

TODO

## Automatic Semicolon Insertion

TODO

# Statements

TODO

## Let Statement

TODO

## Expression Statement

TODO

# Expressions

TODO

## Terminal Expression

TODO

## Operator Expression

TODO [Operators]

## Grouped Expression

TODO

## Array Expression

TODO

## Struct Expression

TODO

## Call Expression

TODO

## Accessor Expression

TODO

## Block Expression

TODO

## If Expression

TODO

## Loop Expression

TODO

## Continue Expression

TODO

## Break Expression

TODO

## Return Expression

TODO