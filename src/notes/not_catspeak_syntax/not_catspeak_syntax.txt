Catspeak is a simple imperative language with a vaguely similar syntax to GML.
As an example, consider the following program written in GML to calculate the
factorial of a number `n`:
```
// GML CODE
function factorial(n) {
    var m = 1;
    if (n > 1) {
        m = n * factorial(n - 1);
    }
    return m;
}

factorial(5); // output: 120
```
NOTE: This example is intentionally verbose in order to showcase: variables,
      function declarations, identifiers, "if" statements, function calls,
      assignment statements, return statements, and comments.

Below is the same program written in Catspeak:
```
-- CATSPEAK CODE
factorial = fun(n) {
    let m = 1
    if (n > 1) {
        m = n * factorial(n - 1)
    }
    return m
}

factorial(5) -- output: 120
```
There are some immediately obvious differences here, such as the `m` variable
being declared using `let` instead of `var`, `fun` instead of `function`, and
comments using `--` instead of `//`. All of these differences (and more) are
described in the [Lexical Grammar] section.

# Lexical Grammar

Catspeak source code is a sequence of ASCII characters. This unfortunately
means that Unicode support is not guaranteed to work, but results in a faster
compiler.

This sequence of characters first needs to be transformed into larger groups
of characters called "tokens". The following sections will cover what each
of these tokens are composed of.

## Whitespace

For the most part, Catspeak is whitespace insensitive. There are exceptions
to this for [Identifiers] and [Automatic Semicolon Insertion], but otherwise
Catspeak ignores the following characters:

 - Character tabulation '\t' (code point U+0009)
 - Line feed            '\n' (code point U+000A)
 - Line tabulation      '\v' (code point U+000B)
 - Form feed            '\f' (code point U+000C)
 - Carriage return      '\r' (code point U+000D)
 - Space                     (code point U+0020)
 - Next Line                 (code point U+0085)

## Comments

The only way to add a comment in Catspeak is to use the special `--` symbol.
This will ignore all of the characters after it until a new line is reached.
For example:
```
-- this is a Catspeak comment!
```

NOTE: Unlike GML, Catspeak does not support multi-line comments.
      Use multiple comments instead.

NOTE: Because Catspeak allows for custom operators, you **must only** use
      `--` and not something like `---` or `--//`; otherwise it will be
      considered a custom operator identifier. For more information, see the
      [Operator Identifiers] section.

## Identifiers

Identifiers are mainly used for variable names in Catspeak. The most common
kind of identifier is the alphanumeric identifier. These identifiers start
with a letter and are followed by a sequence of other letters, numbers,
underscores (_), or apostrophes (').

An example of an identifier which uses all of these is `Can't_count_to_10`.
The following identifiers are invalid:
```
_invalid
1Invalid
'INVALID'
```

### Raw Identifiers

Raw identifiers are a special type of identifier which starts and ends
with the backtick symbol:
```
let `1st-of-march` = "2022-03-01"
```

You can use any valid identifier character between the backticks, in
whatever order you decide. This includes [Operator Identifiers].

### Operator Identifiers

Operators in Catspeak aren't special, they are just a kind of identifier
which use symbols instead of letters or numbers. Below is a list of valid
characters which can be used as operators, sorted by highest precedence
to lowest precedence.

 highest precedence (7): `#`, `.`, `@`
                    (6): `%`, `\`
          .         (5): `*`, `/`
          .         (4): `+`, `-`
          .         (3): `!`, `<`, `=`, `>`, `?`, `~`
          .         (2): `&`
                    (1): `^`, `|`
  lowest precedence (0): `$`, `:`, `;`

Operators on the same line share the same precedence.

You can combine as many, or as few, of these symbols together to create
your very own operator. Here are a few: `>>=`, `><>`, `;~;`, `>*^-^*<`.
The precedence of the new operator will be the same as its first
character. So the `>>=` operator will have the same precedence as `>=`.

## Keywords

Catspeak reserves the following identifiers as keywords:

 - `--`       see [Comments]
 - `=`        see [Let Statement] and [Assignment Expression]
 - `:`        see [Struct Expression]
 - `;`        see [Automatic Semicolon Insertion]
 - `.`        see [Accessor Expression]
 - `...`      see [Automatic Semicolon Insertion]
 - `do`       see [Block Expression]
 - `if`       see [If Expression]
 - `else`     see [If Expression]
 - `while`    see [Loop Expression]
 - `for`
 - `let`      see [Let Statement]
 - `fun`      see [Function Expression]
 - `break`    see [Break Expression]
 - `continue` see [Continue Expression]
 - `return`   see [Return Expression]

## Literals

A literal in Catspeak is either a [Numeric Literal] or [String Literal].

### Numeric Literals

Numeric literals are a sequence of ASCII digits, optionally separated by
a single decimal point:
```
1234567890
3.1415
```

### String Literals

There are two types of string literal in Catspeak. The most common is
a sequence of characters starting and ending in double quotes ("):
```
let hi = "hello world"
```
This type of string allows the following escape sequences to be used:

 - \" Quotation mark
 - \  Escape new line
 - \\ Backslash
 - \t Character tabulation
 - \n Line feed
 - \v Line tabulation
 - \f Form feed
 - \r Carriage return

The other type of string is the **raw string**. A raw string is prefixed
by the `@` character, and does not interpret any of the previously
mentioned escape sequences:
```
let hi_again = @"\hello\"
```

## Automatic Semicolon Insertion

Automatic semicolon insertion is a process used to help Catspeak understand
when a statement has ended so that another can begin. A semicolon or new
line will be expected after the [Let Statement] and [Expression Statement].

All new lines are considered semicolons unless it is preceeded by the
`...` operator, or one of the following tokens:

 - Parens: `(`, `[`, `{`
 - Built-in operators: `.`, `:`, `,`, `=`
 - Keywords: `do`, `if`, `else`, `while`, `for`, `let`, `fun`
 - User-defined operators, see [Operator Identifiers]

This means that in order to write Catspeak code in the Allman style, you
must use `...` to tell Catspeak that you are continuing the line:
```
while (x == y) ...
{
    something()
}
```
This is not necessary for styles where the first `{` appears on the same
line:
```
while (x == y) {
    something()
}
```

# Statements

Unlike GML, Catspeak only has two kinds of statement: [Let Statements] and
[Expression Statements]. This is because Catspeak is an expression-oriented
language, so things like "if" statements become [If Expressions].

## Let Statements

The `let` statement creates a new local variable in the current block scope.
It can optionally be followed by an initialiser expression. If no
initialiser expression is used, then the variable will be initialised to
`undefined`:
```
let a = 1 + 3 -- initialised to the value 3
let b         -- initialised to undefined
```

Unlike GML, catspeak variables are no longer visible after the end of their
enclosing block scope, unless another variable of the same name exists in
an outer scope.

## Expression Statements

Most often, an expression statement will evaluate its expression and ignore
the result. There is an exception to this rule with [Do Expressions].

# Expressions

An expression is is a term which always produces a value, and may be
composed of many sub-expressions. All statements you would typically find
in GML appear as expressions in Catspeak. This includes [Break Expressions],
[Return Expressions], and [Continue Expressions], all of which return the
**never** type; indicating that the expression never returns.

## Terminal Expressions

Terminal expressions are either non-operator [Identifiers] or [Literals].
These expressions have no further sub-expressions, hence the name.

## Operator Expressions

Operator expressions can either be unary or binary. A unary operator
expression is an operator identifier followed by an [Accessor Expression],
[Terminal Expression], or [Grouped Expression]:
```
let unary = -2;
```

A binary operator is made up of an operator identifier sandwiched between
two expressions:
```
let binary = 0.1 + 0.9
```

Both unary and operator expressions are sugar for [Call Expressions]:
```
let unary = `-`(2)
let binary = `+`(0.1, 0.9)
```

## Assignment Expressions

TODO

## Grouped Expressions

A grouped expression wraps a single sub-expression between `(` and `)`,
evaluating the sub-expression. This is typically used to make the
precedence of the inner expression clear:
```
let a = 1 + 2 * 3;   -- 7
let b = (1 + 2) * 3; -- 9
```

## Array Expressions

TODO

## Struct Expressions

TODO

## Call Expressions

A call expression calls a function with a set of arguments. The call syntax
in Catspeak is a lot less restrictive than GML, allowing parenthesis on the
arguments to be optional. This allows for the creation of statement-like
function calls, like the `print` function found in the [Standard Library]:
```
print("hello", "world")

-- this is also valid:
print "hello", "world"
```

## Accessor Expressions

TODO

## Block Expressions

TODO

## If Expressions

TODO

## Loop Expressions

TODO

## Function Expressions

TODO

## Continue Expressions

The `continue` expression will immediately jump to the start of the current
loop body, entering the next iteration of the loop if one exists.

## Break Expressions

The `break` expression will immediately jump to the end of the current
loop body:
```
let n = 0
while (n < 100) {
    n = n + 1
    if (n > 10) {
        break
    }
}

print n -- outputs: 11
```

## Return Expressions

The `return` expression will immediately terminate the current function call
and returns its argument as the result of the current function call. If no
argument is given, `undefined` is used as the result instead.
```
let max = fun(a, b) {
    if (a > b) {
        return a
    }
    return b
}
```