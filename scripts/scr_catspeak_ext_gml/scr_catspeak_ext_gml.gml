/* Catspeak GML Interface
 * ----------------------
 * Kat @katsaii
 */

#macro CATSPEAK_EXT_GML_FUNCTIONS (1 << 0)
#macro CATSPEAK_EXT_GML_CONSTANTS (1 << 1)
#macro CATSPEAK_EXT_GML_ALL (CATSPEAK_EXT_GML_FUNCTIONS | CATSPEAK_EXT_GML_CONSTANTS)

/// @desc Applies the instances interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_instances(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "point_distance_3d", point_distance_3d);
        f(_session_id, "point_distance", point_distance);
        f(_session_id, "point_direction", point_direction);
        f(_session_id, "motion_set", motion_set);
        f(_session_id, "motion_add", motion_add);
        f(_session_id, "place_free", place_free);
        f(_session_id, "place_empty", place_empty);
        f(_session_id, "place_meeting", place_meeting);
        f(_session_id, "place_snapped", place_snapped);
        f(_session_id, "move_random", move_random);
        f(_session_id, "move_snap", move_snap);
        f(_session_id, "move_towards_point", move_towards_point);
        f(_session_id, "move_contact_solid", move_contact_solid);
        f(_session_id, "move_contact_all", move_contact_all);
        f(_session_id, "move_outside_solid", move_outside_solid);
        f(_session_id, "move_outside_all", move_outside_all);
        f(_session_id, "move_bounce_solid", move_bounce_solid);
        f(_session_id, "move_bounce_all", move_bounce_all);
        f(_session_id, "move_wrap", move_wrap);
        f(_session_id, "distance_to_point", distance_to_point);
        f(_session_id, "distance_to_object", distance_to_object);
        f(_session_id, "position_empty", position_empty);
        f(_session_id, "position_meeting", position_meeting);
        f(_session_id, "collision_point", collision_point);
        f(_session_id, "collision_rectangle", collision_rectangle);
        f(_session_id, "collision_circle", collision_circle);
        f(_session_id, "collision_ellipse", collision_ellipse);
        f(_session_id, "collision_line", collision_line);
        f(_session_id, "collision_point_list", collision_point_list);
        f(_session_id, "collision_rectangle_list", collision_rectangle_list);
        f(_session_id, "collision_circle_list", collision_circle_list);
        f(_session_id, "collision_ellipse_list", collision_ellipse_list);
        f(_session_id, "collision_line_list", collision_line_list);
        f(_session_id, "instance_position_list", instance_position_list);
        f(_session_id, "instance_place_list", instance_place_list);
        f(_session_id, "point_in_rectangle", point_in_rectangle);
        f(_session_id, "point_in_triangle", point_in_triangle);
        f(_session_id, "point_in_circle", point_in_circle);
        f(_session_id, "rectangle_in_rectangle", rectangle_in_rectangle);
        f(_session_id, "rectangle_in_triangle", rectangle_in_triangle);
        f(_session_id, "rectangle_in_circle", rectangle_in_circle);
        f(_session_id, "instance_find", instance_find);
        f(_session_id, "instance_exists", instance_exists);
        f(_session_id, "instance_number", instance_number);
        f(_session_id, "instance_position", instance_position);
        f(_session_id, "instance_nearest", instance_nearest);
        f(_session_id, "instance_furthest", instance_furthest);
        f(_session_id, "instance_place", instance_place);
        f(_session_id, "instance_create_depth", instance_create_depth);
        f(_session_id, "instance_create_layer", instance_create_layer);
        f(_session_id, "instance_copy", instance_copy);
        f(_session_id, "instance_change", instance_change);
        f(_session_id, "instance_destroy", instance_destroy);
        f(_session_id, "position_destroy", position_destroy);
        f(_session_id, "position_change", position_change);
        f(_session_id, "instance_id_get", instance_id_get);
        f(_session_id, "instance_deactivate_all", instance_deactivate_all);
        f(_session_id, "instance_deactivate_object", instance_deactivate_object);
        f(_session_id, "instance_deactivate_region", instance_deactivate_region);
        f(_session_id, "instance_activate_all", instance_activate_all);
        f(_session_id, "instance_activate_object", instance_activate_object);
        f(_session_id, "instance_activate_region", instance_activate_region);
        f(_session_id, "object_exists", object_exists);
        f(_session_id, "object_get_name", object_get_name);
        f(_session_id, "object_get_sprite", object_get_sprite);
        f(_session_id, "object_get_solid", object_get_solid);
        f(_session_id, "object_get_visible", object_get_visible);
        f(_session_id, "object_get_persistent", object_get_persistent);
        f(_session_id, "object_get_mask", object_get_mask);
        f(_session_id, "object_get_parent", object_get_parent);
        f(_session_id, "object_get_physics", object_get_physics);
        f(_session_id, "object_is_ancestor", object_is_ancestor);
        f(_session_id, "object_set_sprite", object_set_sprite);
        f(_session_id, "object_set_solid", object_set_solid);
        f(_session_id, "object_set_visible", object_set_visible);
        f(_session_id, "object_set_persistent", object_set_persistent);
        f(_session_id, "object_set_mask", object_set_mask);
        f(_session_id, "instance_activate_layer", instance_activate_layer);
        f(_session_id, "instance_deactivate_layer", instance_deactivate_layer);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        c(_session_id, "all", all);
        c(_session_id, "noone", noone);
        c(_session_id, "global", global);
    }
}

/// @desc Applies the physics interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_physics(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "physics_world_create", physics_world_create);
        f(_session_id, "physics_world_gravity", physics_world_gravity);
        f(_session_id, "physics_world_update_speed", physics_world_update_speed);
        f(_session_id, "physics_world_update_iterations", physics_world_update_iterations);
        f(_session_id, "physics_world_draw_debug", physics_world_draw_debug);
        f(_session_id, "physics_pause_enable", physics_pause_enable);
        f(_session_id, "physics_fixture_create", physics_fixture_create);
        f(_session_id, "physics_fixture_set_kinematic", physics_fixture_set_kinematic);
        f(_session_id, "physics_fixture_set_density", physics_fixture_set_density);
        f(_session_id, "physics_fixture_set_awake", physics_fixture_set_awake);
        f(_session_id, "physics_fixture_set_restitution", physics_fixture_set_restitution);
        f(_session_id, "physics_fixture_set_friction", physics_fixture_set_friction);
        f(_session_id, "physics_fixture_set_collision_group", physics_fixture_set_collision_group);
        f(_session_id, "physics_fixture_set_sensor", physics_fixture_set_sensor);
        f(_session_id, "physics_fixture_set_linear_damping", physics_fixture_set_linear_damping);
        f(_session_id, "physics_fixture_set_angular_damping", physics_fixture_set_angular_damping);
        f(_session_id, "physics_fixture_set_circle_shape", physics_fixture_set_circle_shape);
        f(_session_id, "physics_fixture_set_box_shape", physics_fixture_set_box_shape);
        f(_session_id, "physics_fixture_set_edge_shape", physics_fixture_set_edge_shape);
        f(_session_id, "physics_fixture_set_polygon_shape", physics_fixture_set_polygon_shape);
        f(_session_id, "physics_fixture_set_chain_shape", physics_fixture_set_chain_shape);
        f(_session_id, "physics_fixture_add_point", physics_fixture_add_point);
        f(_session_id, "physics_fixture_bind", physics_fixture_bind);
        f(_session_id, "physics_fixture_bind_ext", physics_fixture_bind_ext);
        f(_session_id, "physics_fixture_delete", physics_fixture_delete);
        f(_session_id, "physics_apply_force", physics_apply_force);
        f(_session_id, "physics_apply_impulse", physics_apply_impulse);
        f(_session_id, "physics_apply_angular_impulse", physics_apply_angular_impulse);
        f(_session_id, "physics_apply_local_force", physics_apply_local_force);
        f(_session_id, "physics_apply_local_impulse", physics_apply_local_impulse);
        f(_session_id, "physics_apply_torque", physics_apply_torque);
        f(_session_id, "physics_mass_properties", physics_mass_properties);
        f(_session_id, "physics_draw_debug", physics_draw_debug);
        f(_session_id, "physics_test_overlap", physics_test_overlap);
        f(_session_id, "physics_remove_fixture", physics_remove_fixture);
        f(_session_id, "physics_set_friction", physics_set_friction);
        f(_session_id, "physics_set_density", physics_set_density);
        f(_session_id, "physics_set_restitution", physics_set_restitution);
        f(_session_id, "physics_get_friction", physics_get_friction);
        f(_session_id, "physics_get_density", physics_get_density);
        f(_session_id, "physics_get_restitution", physics_get_restitution);
        f(_session_id, "physics_joint_distance_create", physics_joint_distance_create);
        f(_session_id, "physics_joint_rope_create", physics_joint_rope_create);
        f(_session_id, "physics_joint_revolute_create", physics_joint_revolute_create);
        f(_session_id, "physics_joint_prismatic_create", physics_joint_prismatic_create);
        f(_session_id, "physics_joint_pulley_create", physics_joint_pulley_create);
        f(_session_id, "physics_joint_wheel_create", physics_joint_wheel_create);
        f(_session_id, "physics_joint_weld_create", physics_joint_weld_create);
        f(_session_id, "physics_joint_friction_create", physics_joint_friction_create);
        f(_session_id, "physics_joint_gear_create", physics_joint_gear_create);
        f(_session_id, "physics_joint_enable_motor", physics_joint_enable_motor);
        f(_session_id, "physics_joint_get_value", physics_joint_get_value);
        f(_session_id, "physics_joint_set_value", physics_joint_set_value);
        f(_session_id, "physics_joint_delete", physics_joint_delete);
        f(_session_id, "physics_particle_create", physics_particle_create);
        f(_session_id, "physics_particle_delete", physics_particle_delete);
        f(_session_id, "physics_particle_delete_region_circle", physics_particle_delete_region_circle);
        f(_session_id, "physics_particle_delete_region_box", physics_particle_delete_region_box);
        f(_session_id, "physics_particle_delete_region_poly", physics_particle_delete_region_poly);
        f(_session_id, "physics_particle_set_flags", physics_particle_set_flags);
        f(_session_id, "physics_particle_set_category_flags", physics_particle_set_category_flags);
        f(_session_id, "physics_particle_draw", physics_particle_draw);
        f(_session_id, "physics_particle_draw_ext", physics_particle_draw_ext);
        f(_session_id, "physics_particle_count", physics_particle_count);
        f(_session_id, "physics_particle_get_data", physics_particle_get_data);
        f(_session_id, "physics_particle_get_data_particle", physics_particle_get_data_particle);
        f(_session_id, "physics_particle_group_begin", physics_particle_group_begin);
        f(_session_id, "physics_particle_group_circle", physics_particle_group_circle);
        f(_session_id, "physics_particle_group_box", physics_particle_group_box);
        f(_session_id, "physics_particle_group_polygon", physics_particle_group_polygon);
        f(_session_id, "physics_particle_group_add_point", physics_particle_group_add_point);
        f(_session_id, "physics_particle_group_end", physics_particle_group_end);
        f(_session_id, "physics_particle_group_join", physics_particle_group_join);
        f(_session_id, "physics_particle_group_delete", physics_particle_group_delete);
        f(_session_id, "physics_particle_group_count", physics_particle_group_count);
        f(_session_id, "physics_particle_group_get_data", physics_particle_group_get_data);
        f(_session_id, "physics_particle_group_get_mass", physics_particle_group_get_mass);
        f(_session_id, "physics_particle_group_get_inertia", physics_particle_group_get_inertia);
        f(_session_id, "physics_particle_group_get_centre_x", physics_particle_group_get_centre_x);
        f(_session_id, "physics_particle_group_get_centre_y", physics_particle_group_get_centre_y);
        f(_session_id, "physics_particle_group_get_vel_x", physics_particle_group_get_vel_x);
        f(_session_id, "physics_particle_group_get_vel_y", physics_particle_group_get_vel_y);
        f(_session_id, "physics_particle_group_get_ang_vel", physics_particle_group_get_ang_vel);
        f(_session_id, "physics_particle_group_get_x", physics_particle_group_get_x);
        f(_session_id, "physics_particle_group_get_y", physics_particle_group_get_y);
        f(_session_id, "physics_particle_group_get_angle", physics_particle_group_get_angle);
        f(_session_id, "physics_particle_set_group_flags", physics_particle_set_group_flags);
        f(_session_id, "physics_particle_get_group_flags", physics_particle_get_group_flags);
        f(_session_id, "physics_particle_get_max_count", physics_particle_get_max_count);
        f(_session_id, "physics_particle_get_radius", physics_particle_get_radius);
        f(_session_id, "physics_particle_get_density", physics_particle_get_density);
        f(_session_id, "physics_particle_get_damping", physics_particle_get_damping);
        f(_session_id, "physics_particle_get_gravity_scale", physics_particle_get_gravity_scale);
        f(_session_id, "physics_particle_set_max_count", physics_particle_set_max_count);
        f(_session_id, "physics_particle_set_radius", physics_particle_set_radius);
        f(_session_id, "physics_particle_set_density", physics_particle_set_density);
        f(_session_id, "physics_particle_set_damping", physics_particle_set_damping);
        f(_session_id, "physics_particle_set_gravity_scale", physics_particle_set_gravity_scale);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        c(_session_id, "phy_joint_anchor_1_x", phy_joint_anchor_1_x);
        c(_session_id, "phy_joint_anchor_1_y", phy_joint_anchor_1_y);
        c(_session_id, "phy_joint_anchor_2_x", phy_joint_anchor_2_x);
        c(_session_id, "phy_joint_anchor_2_y", phy_joint_anchor_2_y);
        c(_session_id, "phy_joint_reaction_force_x", phy_joint_reaction_force_x);
        c(_session_id, "phy_joint_reaction_force_y", phy_joint_reaction_force_y);
        c(_session_id, "phy_joint_reaction_torque", phy_joint_reaction_torque);
        c(_session_id, "phy_joint_motor_speed", phy_joint_motor_speed);
        c(_session_id, "phy_joint_angle", phy_joint_angle);
        c(_session_id, "phy_joint_motor_torque", phy_joint_motor_torque);
        c(_session_id, "phy_joint_max_motor_torque", phy_joint_max_motor_torque);
        c(_session_id, "phy_joint_translation", phy_joint_translation);
        c(_session_id, "phy_joint_speed", phy_joint_speed);
        c(_session_id, "phy_joint_motor_force", phy_joint_motor_force);
        c(_session_id, "phy_joint_max_motor_force", phy_joint_max_motor_force);
        c(_session_id, "phy_joint_length_1", phy_joint_length_1);
        c(_session_id, "phy_joint_length_2", phy_joint_length_2);
        c(_session_id, "phy_joint_damping_ratio", phy_joint_damping_ratio);
        c(_session_id, "phy_joint_frequency", phy_joint_frequency);
        c(_session_id, "phy_joint_lower_angle_limit", phy_joint_lower_angle_limit);
        c(_session_id, "phy_joint_upper_angle_limit", phy_joint_upper_angle_limit);
        c(_session_id, "phy_joint_angle_limits", phy_joint_angle_limits);
        c(_session_id, "phy_joint_max_length", phy_joint_max_length);
        c(_session_id, "phy_joint_max_torque", phy_joint_max_torque);
        c(_session_id, "phy_joint_max_force", phy_joint_max_force);
        c(_session_id, "phy_debug_render_aabb", phy_debug_render_aabb);
        c(_session_id, "phy_debug_render_collision_pairs", phy_debug_render_collision_pairs);
        c(_session_id, "phy_debug_render_coms", phy_debug_render_coms);
        c(_session_id, "phy_debug_render_core_shapes", phy_debug_render_core_shapes);
        c(_session_id, "phy_debug_render_joints", phy_debug_render_joints);
        c(_session_id, "phy_debug_render_obb", phy_debug_render_obb);
        c(_session_id, "phy_debug_render_shapes", phy_debug_render_shapes);
        c(_session_id, "phy_particle_flag_water", phy_particle_flag_water);
        c(_session_id, "phy_particle_flag_zombie", phy_particle_flag_zombie);
        c(_session_id, "phy_particle_flag_wall", phy_particle_flag_wall);
        c(_session_id, "phy_particle_flag_spring", phy_particle_flag_spring);
        c(_session_id, "phy_particle_flag_elastic", phy_particle_flag_elastic);
        c(_session_id, "phy_particle_flag_viscous", phy_particle_flag_viscous);
        c(_session_id, "phy_particle_flag_powder", phy_particle_flag_powder);
        c(_session_id, "phy_particle_flag_tensile", phy_particle_flag_tensile);
        c(_session_id, "phy_particle_flag_colourmixing", phy_particle_flag_colourmixing);
        c(_session_id, "phy_particle_flag_colormixing", phy_particle_flag_colormixing);
        c(_session_id, "phy_particle_group_flag_solid", phy_particle_group_flag_solid);
        c(_session_id, "phy_particle_group_flag_rigid", phy_particle_group_flag_rigid);
        c(_session_id, "phy_particle_data_flag_typeflags", phy_particle_data_flag_typeflags);
        c(_session_id, "phy_particle_data_flag_position", phy_particle_data_flag_position);
        c(_session_id, "phy_particle_data_flag_velocity", phy_particle_data_flag_velocity);
        c(_session_id, "phy_particle_data_flag_colour", phy_particle_data_flag_colour);
        c(_session_id, "phy_particle_data_flag_category", phy_particle_data_flag_category);
    }
}

/// @desc Applies the pointers interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_pointers(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "weak_ref_create", weak_ref_create);
        f(_session_id, "weak_ref_alive", weak_ref_alive);
        f(_session_id, "weak_ref_any_alive", weak_ref_any_alive);
        f(_session_id, "ptr", ptr);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        c(_session_id, "pointer_invalid", pointer_invalid);
        c(_session_id, "pointer_null", pointer_null);
    }
}

/// @desc Applies the game interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_game(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "game_set_speed", game_set_speed);
        f(_session_id, "game_get_speed", game_get_speed);
        f(_session_id, "room_goto", room_goto);
        f(_session_id, "room_goto_previous", room_goto_previous);
        f(_session_id, "room_goto_next", room_goto_next);
        f(_session_id, "room_previous", room_previous);
        f(_session_id, "room_next", room_next);
        f(_session_id, "room_restart", room_restart);
        f(_session_id, "game_end", game_end);
        f(_session_id, "game_restart", game_restart);
        f(_session_id, "game_load", game_load);
        f(_session_id, "game_save", game_save);
        f(_session_id, "game_save_buffer", game_save_buffer);
        f(_session_id, "game_load_buffer", game_load_buffer);
        f(_session_id, "event_perform", event_perform);
        f(_session_id, "event_user", event_user);
        f(_session_id, "event_perform_object", event_perform_object);
        f(_session_id, "event_inherited", event_inherited);
        f(_session_id, "room_exists", room_exists);
        f(_session_id, "room_get_name", room_get_name);
        f(_session_id, "room_set_width", room_set_width);
        f(_session_id, "room_set_height", room_set_height);
        f(_session_id, "room_set_persistent", room_set_persistent);
        f(_session_id, "room_set_viewport", room_set_viewport);
        f(_session_id, "room_get_viewport", room_get_viewport);
        f(_session_id, "room_set_view_enabled", room_set_view_enabled);
        f(_session_id, "room_add", room_add);
        f(_session_id, "room_duplicate", room_duplicate);
        f(_session_id, "room_assign", room_assign);
        f(_session_id, "room_instance_add", room_instance_add);
        f(_session_id, "room_instance_clear", room_instance_clear);
        f(_session_id, "room_get_camera", room_get_camera);
        f(_session_id, "room_set_camera", room_set_camera);
        f(_session_id, "gc_collect", gc_collect);
        f(_session_id, "gc_enable", gc_enable);
        f(_session_id, "gc_is_enabled", gc_is_enabled);
        f(_session_id, "gc_get_stats", gc_get_stats);
        f(_session_id, "gc_target_frame_time", gc_target_frame_time);
        f(_session_id, "gc_get_target_frame_time", gc_get_target_frame_time);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        c(_session_id, "gamespeed_fps", gamespeed_fps);
        c(_session_id, "gamespeed_microseconds", gamespeed_microseconds);
        c(_session_id, "ev_create", ev_create);
        c(_session_id, "ev_destroy", ev_destroy);
        c(_session_id, "ev_step", ev_step);
        c(_session_id, "ev_alarm", ev_alarm);
        c(_session_id, "ev_keyboard", ev_keyboard);
        c(_session_id, "ev_mouse", ev_mouse);
        c(_session_id, "ev_collision", ev_collision);
        c(_session_id, "ev_other", ev_other);
        c(_session_id, "ev_draw", ev_draw);
        c(_session_id, "ev_draw_begin", ev_draw_begin);
        c(_session_id, "ev_draw_end", ev_draw_end);
        c(_session_id, "ev_draw_pre", ev_draw_pre);
        c(_session_id, "ev_draw_post", ev_draw_post);
        c(_session_id, "ev_keypress", ev_keypress);
        c(_session_id, "ev_keyrelease", ev_keyrelease);
        c(_session_id, "ev_trigger", ev_trigger);
        c(_session_id, "ev_left_button", ev_left_button);
        c(_session_id, "ev_right_button", ev_right_button);
        c(_session_id, "ev_middle_button", ev_middle_button);
        c(_session_id, "ev_no_button", ev_no_button);
        c(_session_id, "ev_left_press", ev_left_press);
        c(_session_id, "ev_right_press", ev_right_press);
        c(_session_id, "ev_middle_press", ev_middle_press);
        c(_session_id, "ev_left_release", ev_left_release);
        c(_session_id, "ev_right_release", ev_right_release);
        c(_session_id, "ev_middle_release", ev_middle_release);
        c(_session_id, "ev_mouse_enter", ev_mouse_enter);
        c(_session_id, "ev_mouse_leave", ev_mouse_leave);
        c(_session_id, "ev_mouse_wheel_up", ev_mouse_wheel_up);
        c(_session_id, "ev_mouse_wheel_down", ev_mouse_wheel_down);
        c(_session_id, "ev_global_left_button", ev_global_left_button);
        c(_session_id, "ev_global_right_button", ev_global_right_button);
        c(_session_id, "ev_global_middle_button", ev_global_middle_button);
        c(_session_id, "ev_global_left_press", ev_global_left_press);
        c(_session_id, "ev_global_right_press", ev_global_right_press);
        c(_session_id, "ev_global_middle_press", ev_global_middle_press);
        c(_session_id, "ev_global_left_release", ev_global_left_release);
        c(_session_id, "ev_global_right_release", ev_global_right_release);
        c(_session_id, "ev_global_middle_release", ev_global_middle_release);
        c(_session_id, "ev_joystick1_left", ev_joystick1_left);
        c(_session_id, "ev_joystick1_right", ev_joystick1_right);
        c(_session_id, "ev_joystick1_up", ev_joystick1_up);
        c(_session_id, "ev_joystick1_down", ev_joystick1_down);
        c(_session_id, "ev_joystick1_button1", ev_joystick1_button1);
        c(_session_id, "ev_joystick1_button2", ev_joystick1_button2);
        c(_session_id, "ev_joystick1_button3", ev_joystick1_button3);
        c(_session_id, "ev_joystick1_button4", ev_joystick1_button4);
        c(_session_id, "ev_joystick1_button5", ev_joystick1_button5);
        c(_session_id, "ev_joystick1_button6", ev_joystick1_button6);
        c(_session_id, "ev_joystick1_button7", ev_joystick1_button7);
        c(_session_id, "ev_joystick1_button8", ev_joystick1_button8);
        c(_session_id, "ev_joystick2_left", ev_joystick2_left);
        c(_session_id, "ev_joystick2_right", ev_joystick2_right);
        c(_session_id, "ev_joystick2_up", ev_joystick2_up);
        c(_session_id, "ev_joystick2_down", ev_joystick2_down);
        c(_session_id, "ev_joystick2_button1", ev_joystick2_button1);
        c(_session_id, "ev_joystick2_button2", ev_joystick2_button2);
        c(_session_id, "ev_joystick2_button3", ev_joystick2_button3);
        c(_session_id, "ev_joystick2_button4", ev_joystick2_button4);
        c(_session_id, "ev_joystick2_button5", ev_joystick2_button5);
        c(_session_id, "ev_joystick2_button6", ev_joystick2_button6);
        c(_session_id, "ev_joystick2_button7", ev_joystick2_button7);
        c(_session_id, "ev_joystick2_button8", ev_joystick2_button8);
        c(_session_id, "ev_outside", ev_outside);
        c(_session_id, "ev_boundary", ev_boundary);
        c(_session_id, "ev_game_start", ev_game_start);
        c(_session_id, "ev_game_end", ev_game_end);
        c(_session_id, "ev_room_start", ev_room_start);
        c(_session_id, "ev_room_end", ev_room_end);
        c(_session_id, "ev_no_more_lives", ev_no_more_lives);
        c(_session_id, "ev_animation_end", ev_animation_end);
        c(_session_id, "ev_end_of_path", ev_end_of_path);
        c(_session_id, "ev_no_more_health", ev_no_more_health);
        c(_session_id, "ev_user0", ev_user0);
        c(_session_id, "ev_user1", ev_user1);
        c(_session_id, "ev_user2", ev_user2);
        c(_session_id, "ev_user3", ev_user3);
        c(_session_id, "ev_user4", ev_user4);
        c(_session_id, "ev_user5", ev_user5);
        c(_session_id, "ev_user6", ev_user6);
        c(_session_id, "ev_user7", ev_user7);
        c(_session_id, "ev_user8", ev_user8);
        c(_session_id, "ev_user9", ev_user9);
        c(_session_id, "ev_user10", ev_user10);
        c(_session_id, "ev_user11", ev_user11);
        c(_session_id, "ev_user12", ev_user12);
        c(_session_id, "ev_user13", ev_user13);
        c(_session_id, "ev_user14", ev_user14);
        c(_session_id, "ev_user15", ev_user15);
        c(_session_id, "ev_outside_view0", ev_outside_view0);
        c(_session_id, "ev_outside_view1", ev_outside_view1);
        c(_session_id, "ev_outside_view2", ev_outside_view2);
        c(_session_id, "ev_outside_view3", ev_outside_view3);
        c(_session_id, "ev_outside_view4", ev_outside_view4);
        c(_session_id, "ev_outside_view5", ev_outside_view5);
        c(_session_id, "ev_outside_view6", ev_outside_view6);
        c(_session_id, "ev_outside_view7", ev_outside_view7);
        c(_session_id, "ev_boundary_view0", ev_boundary_view0);
        c(_session_id, "ev_boundary_view1", ev_boundary_view1);
        c(_session_id, "ev_boundary_view2", ev_boundary_view2);
        c(_session_id, "ev_boundary_view3", ev_boundary_view3);
        c(_session_id, "ev_boundary_view4", ev_boundary_view4);
        c(_session_id, "ev_boundary_view5", ev_boundary_view5);
        c(_session_id, "ev_boundary_view6", ev_boundary_view6);
        c(_session_id, "ev_boundary_view7", ev_boundary_view7);
        c(_session_id, "ev_animation_update", ev_animation_update);
        c(_session_id, "ev_animation_event", ev_animation_event);
        c(_session_id, "ev_web_image_load", ev_web_image_load);
        c(_session_id, "ev_web_sound_load", ev_web_sound_load);
        c(_session_id, "ev_web_async", ev_web_async);
        c(_session_id, "ev_dialog_async", ev_dialog_async);
        c(_session_id, "ev_web_iap", ev_web_iap);
        c(_session_id, "ev_web_cloud", ev_web_cloud);
        c(_session_id, "ev_web_networking", ev_web_networking);
        c(_session_id, "ev_web_steam", ev_web_steam);
        c(_session_id, "ev_social", ev_social);
        c(_session_id, "ev_push_notification", ev_push_notification);
        c(_session_id, "ev_async_save_load", ev_async_save_load);
        c(_session_id, "ev_audio_recording", ev_audio_recording);
        c(_session_id, "ev_audio_playback", ev_audio_playback);
        c(_session_id, "ev_system_event", ev_system_event);
        c(_session_id, "ev_broadcast_message", ev_broadcast_message);
        c(_session_id, "ev_step_normal", ev_step_normal);
        c(_session_id, "ev_step_begin", ev_step_begin);
        c(_session_id, "ev_step_end", ev_step_end);
        c(_session_id, "ev_gui", ev_gui);
        c(_session_id, "ev_gui_begin", ev_gui_begin);
        c(_session_id, "ev_gui_end", ev_gui_end);
        c(_session_id, "ev_cleanup", ev_cleanup);
        c(_session_id, "ev_gesture", ev_gesture);
        c(_session_id, "ev_gesture_tap", ev_gesture_tap);
        c(_session_id, "ev_gesture_double_tap", ev_gesture_double_tap);
        c(_session_id, "ev_gesture_drag_start", ev_gesture_drag_start);
        c(_session_id, "ev_gesture_dragging", ev_gesture_dragging);
        c(_session_id, "ev_gesture_drag_end", ev_gesture_drag_end);
        c(_session_id, "ev_gesture_flick", ev_gesture_flick);
        c(_session_id, "ev_gesture_pinch_start", ev_gesture_pinch_start);
        c(_session_id, "ev_gesture_pinch_in", ev_gesture_pinch_in);
        c(_session_id, "ev_gesture_pinch_out", ev_gesture_pinch_out);
        c(_session_id, "ev_gesture_pinch_end", ev_gesture_pinch_end);
        c(_session_id, "ev_gesture_rotate_start", ev_gesture_rotate_start);
        c(_session_id, "ev_gesture_rotating", ev_gesture_rotating);
        c(_session_id, "ev_gesture_rotate_end", ev_gesture_rotate_end);
        c(_session_id, "ev_global_gesture_tap", ev_global_gesture_tap);
        c(_session_id, "ev_global_gesture_double_tap", ev_global_gesture_double_tap);
        c(_session_id, "ev_global_gesture_drag_start", ev_global_gesture_drag_start);
        c(_session_id, "ev_global_gesture_dragging", ev_global_gesture_dragging);
        c(_session_id, "ev_global_gesture_drag_end", ev_global_gesture_drag_end);
        c(_session_id, "ev_global_gesture_flick", ev_global_gesture_flick);
        c(_session_id, "ev_global_gesture_pinch_start", ev_global_gesture_pinch_start);
        c(_session_id, "ev_global_gesture_pinch_in", ev_global_gesture_pinch_in);
        c(_session_id, "ev_global_gesture_pinch_out", ev_global_gesture_pinch_out);
        c(_session_id, "ev_global_gesture_pinch_end", ev_global_gesture_pinch_end);
        c(_session_id, "ev_global_gesture_rotate_start", ev_global_gesture_rotate_start);
        c(_session_id, "ev_global_gesture_rotating", ev_global_gesture_rotating);
        c(_session_id, "ev_global_gesture_rotate_end", ev_global_gesture_rotate_end);
    }
}

/// @desc Applies the introspection interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_introspection(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "is_real", is_real);
        f(_session_id, "is_numeric", is_numeric);
        f(_session_id, "is_string", is_string);
        f(_session_id, "is_array", is_array);
        f(_session_id, "is_undefined", is_undefined);
        f(_session_id, "is_int32", is_int32);
        f(_session_id, "is_int64", is_int64);
        f(_session_id, "is_ptr", is_ptr);
        f(_session_id, "is_vec3", is_vec3);
        f(_session_id, "is_vec4", is_vec4);
        f(_session_id, "is_bool", is_bool);
        f(_session_id, "is_nan", is_nan);
        f(_session_id, "is_infinity", is_infinity);
        f(_session_id, "is_struct", is_struct);
        f(_session_id, "is_method", is_method);
        f(_session_id, "typeof", typeof);
        f(_session_id, "instanceof", instanceof);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        
    }
}

/// @desc Applies the assets interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_assets(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "asset_get_index", asset_get_index);
        f(_session_id, "asset_get_type", asset_get_type);
        f(_session_id, "tag_get_asset_ids", tag_get_asset_ids);
        f(_session_id, "tag_get_assets", tag_get_assets);
        f(_session_id, "asset_get_tags", asset_get_tags);
        f(_session_id, "asset_add_tags", asset_add_tags);
        f(_session_id, "asset_remove_tags", asset_remove_tags);
        f(_session_id, "asset_has_tags", asset_has_tags);
        f(_session_id, "asset_has_any_tag", asset_has_any_tag);
        f(_session_id, "asset_clear_tags", asset_clear_tags);
        f(_session_id, "extension_get_string", extension_get_string);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        c(_session_id, "asset_object", asset_object);
        c(_session_id, "asset_unknown", asset_unknown);
        c(_session_id, "asset_sprite", asset_sprite);
        c(_session_id, "asset_sound", asset_sound);
        c(_session_id, "asset_room", asset_room);
        c(_session_id, "asset_path", asset_path);
        c(_session_id, "asset_script", asset_script);
        c(_session_id, "asset_font", asset_font);
        c(_session_id, "asset_timeline", asset_timeline);
        c(_session_id, "asset_tiles", asset_tiles);
        c(_session_id, "asset_shader", asset_shader);
        c(_session_id, "asset_sequence", asset_sequence);
        c(_session_id, "asset_animationcurve", asset_animationcurve);
    }
}

/// @desc Applies the maths interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_maths(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "abs", abs);
        f(_session_id, "round", round);
        f(_session_id, "floor", floor);
        f(_session_id, "ceil", ceil);
        f(_session_id, "sign", sign);
        f(_session_id, "frac", frac);
        f(_session_id, "sqrt", sqrt);
        f(_session_id, "sqr", sqr);
        f(_session_id, "exp", exp);
        f(_session_id, "ln", ln);
        f(_session_id, "log2", log2);
        f(_session_id, "log10", log10);
        f(_session_id, "sin", sin);
        f(_session_id, "cos", cos);
        f(_session_id, "tan", tan);
        f(_session_id, "arcsin", arcsin);
        f(_session_id, "arccos", arccos);
        f(_session_id, "arctan", arctan);
        f(_session_id, "arctan2", arctan2);
        f(_session_id, "dsin", dsin);
        f(_session_id, "dcos", dcos);
        f(_session_id, "dtan", dtan);
        f(_session_id, "darcsin", darcsin);
        f(_session_id, "darccos", darccos);
        f(_session_id, "darctan", darctan);
        f(_session_id, "darctan2", darctan2);
        f(_session_id, "degtorad", degtorad);
        f(_session_id, "power", power);
        f(_session_id, "logn", logn);
        f(_session_id, "min", min);
        f(_session_id, "max", max);
        f(_session_id, "mean", mean);
        f(_session_id, "median", median);
        f(_session_id, "clamp", clamp);
        f(_session_id, "lerp", lerp);
        f(_session_id, "dot_product", dot_product);
        f(_session_id, "dot_product_3d", dot_product_3d);
        f(_session_id, "dot_product_normalised", dot_product_normalised);
        f(_session_id, "dot_product_3d_normalised", dot_product_3d_normalised);
        f(_session_id, "dot_product_normalized", dot_product_normalized);
        f(_session_id, "dot_product_3d_normalized", dot_product_3d_normalized);
        f(_session_id, "math_set_epsilon", math_set_epsilon);
        f(_session_id, "math_get_epsilon", math_get_epsilon);
        f(_session_id, "point_distance_3d", point_distance_3d);
        f(_session_id, "point_distance", point_distance);
        f(_session_id, "point_direction", point_direction);
        f(_session_id, "lengthdir_x", lengthdir_x);
        f(_session_id, "lengthdir_y", lengthdir_y);
        f(_session_id, "real", real);
        f(_session_id, "bool", bool);
        f(_session_id, "int64", int64);
        f(_session_id, "point_in_rectangle", point_in_rectangle);
        f(_session_id, "point_in_triangle", point_in_triangle);
        f(_session_id, "point_in_circle", point_in_circle);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        c(_session_id, "pi", pi);
    }
}

/// @desc Applies the animation interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_animation(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "path_start", path_start);
        f(_session_id, "path_end", path_end);
        f(_session_id, "mp_linear_step", mp_linear_step);
        f(_session_id, "mp_potential_step", mp_potential_step);
        f(_session_id, "mp_linear_step_object", mp_linear_step_object);
        f(_session_id, "mp_potential_step_object", mp_potential_step_object);
        f(_session_id, "mp_potential_settings", mp_potential_settings);
        f(_session_id, "mp_linear_path", mp_linear_path);
        f(_session_id, "mp_potential_path", mp_potential_path);
        f(_session_id, "mp_linear_path_object", mp_linear_path_object);
        f(_session_id, "mp_potential_path_object", mp_potential_path_object);
        f(_session_id, "mp_grid_create", mp_grid_create);
        f(_session_id, "mp_grid_destroy", mp_grid_destroy);
        f(_session_id, "mp_grid_clear_all", mp_grid_clear_all);
        f(_session_id, "mp_grid_clear_cell", mp_grid_clear_cell);
        f(_session_id, "mp_grid_clear_rectangle", mp_grid_clear_rectangle);
        f(_session_id, "mp_grid_add_cell", mp_grid_add_cell);
        f(_session_id, "mp_grid_get_cell", mp_grid_get_cell);
        f(_session_id, "mp_grid_add_rectangle", mp_grid_add_rectangle);
        f(_session_id, "mp_grid_add_instances", mp_grid_add_instances);
        f(_session_id, "mp_grid_path", mp_grid_path);
        f(_session_id, "mp_grid_draw", mp_grid_draw);
        f(_session_id, "mp_grid_to_ds_grid", mp_grid_to_ds_grid);
        f(_session_id, "path_exists", path_exists);
        f(_session_id, "path_get_name", path_get_name);
        f(_session_id, "path_get_length", path_get_length);
        f(_session_id, "path_get_kind", path_get_kind);
        f(_session_id, "path_get_closed", path_get_closed);
        f(_session_id, "path_get_precision", path_get_precision);
        f(_session_id, "path_get_number", path_get_number);
        f(_session_id, "path_get_point_x", path_get_point_x);
        f(_session_id, "path_get_point_y", path_get_point_y);
        f(_session_id, "path_get_point_speed", path_get_point_speed);
        f(_session_id, "path_get_x", path_get_x);
        f(_session_id, "path_get_y", path_get_y);
        f(_session_id, "path_get_speed", path_get_speed);
        f(_session_id, "timeline_add", timeline_add);
        f(_session_id, "timeline_delete", timeline_delete);
        f(_session_id, "timeline_clear", timeline_clear);
        f(_session_id, "timeline_exists", timeline_exists);
        f(_session_id, "timeline_get_name", timeline_get_name);
        f(_session_id, "timeline_moment_clear", timeline_moment_clear);
        f(_session_id, "timeline_moment_add_script", timeline_moment_add_script);
        f(_session_id, "timeline_size", timeline_size);
        f(_session_id, "timeline_max_moment", timeline_max_moment);
        f(_session_id, "path_set_kind", path_set_kind);
        f(_session_id, "path_set_closed", path_set_closed);
        f(_session_id, "path_set_precision", path_set_precision);
        f(_session_id, "path_add", path_add);
        f(_session_id, "path_assign", path_assign);
        f(_session_id, "path_duplicate", path_duplicate);
        f(_session_id, "path_append", path_append);
        f(_session_id, "path_delete", path_delete);
        f(_session_id, "path_add_point", path_add_point);
        f(_session_id, "path_insert_point", path_insert_point);
        f(_session_id, "path_change_point", path_change_point);
        f(_session_id, "path_delete_point", path_delete_point);
        f(_session_id, "path_clear_points", path_clear_points);
        f(_session_id, "path_reverse", path_reverse);
        f(_session_id, "path_mirror", path_mirror);
        f(_session_id, "path_flip", path_flip);
        f(_session_id, "path_rotate", path_rotate);
        f(_session_id, "path_rescale", path_rescale);
        f(_session_id, "path_shift", path_shift);
        f(_session_id, "skeleton_animation_set", skeleton_animation_set);
        f(_session_id, "skeleton_animation_get", skeleton_animation_get);
        f(_session_id, "skeleton_animation_mix", skeleton_animation_mix);
        f(_session_id, "skeleton_animation_set_ext", skeleton_animation_set_ext);
        f(_session_id, "skeleton_animation_get_ext", skeleton_animation_get_ext);
        f(_session_id, "skeleton_animation_get_duration", skeleton_animation_get_duration);
        f(_session_id, "skeleton_animation_get_frames", skeleton_animation_get_frames);
        f(_session_id, "skeleton_animation_clear", skeleton_animation_clear);
        f(_session_id, "skeleton_skin_set", skeleton_skin_set);
        f(_session_id, "skeleton_skin_get", skeleton_skin_get);
        f(_session_id, "skeleton_attachment_set", skeleton_attachment_set);
        f(_session_id, "skeleton_attachment_get", skeleton_attachment_get);
        f(_session_id, "skeleton_attachment_create", skeleton_attachment_create);
        f(_session_id, "skeleton_attachment_create_colour", skeleton_attachment_create_colour);
        f(_session_id, "skeleton_attachment_create_color", skeleton_attachment_create_color);
        f(_session_id, "skeleton_collision_draw_set", skeleton_collision_draw_set);
        f(_session_id, "skeleton_bone_data_get", skeleton_bone_data_get);
        f(_session_id, "skeleton_bone_data_set", skeleton_bone_data_set);
        f(_session_id, "skeleton_bone_state_get", skeleton_bone_state_get);
        f(_session_id, "skeleton_bone_state_set", skeleton_bone_state_set);
        f(_session_id, "skeleton_slot_colour_set", skeleton_slot_colour_set);
        f(_session_id, "skeleton_slot_color_set", skeleton_slot_color_set);
        f(_session_id, "skeleton_slot_colour_get", skeleton_slot_colour_get);
        f(_session_id, "skeleton_slot_color_get", skeleton_slot_color_get);
        f(_session_id, "skeleton_slot_alpha_get", skeleton_slot_alpha_get);
        f(_session_id, "skeleton_find_slot", skeleton_find_slot);
        f(_session_id, "skeleton_get_minmax", skeleton_get_minmax);
        f(_session_id, "skeleton_get_num_bounds", skeleton_get_num_bounds);
        f(_session_id, "skeleton_get_bounds", skeleton_get_bounds);
        f(_session_id, "skeleton_animation_get_frame", skeleton_animation_get_frame);
        f(_session_id, "skeleton_animation_set_frame", skeleton_animation_set_frame);
        f(_session_id, "skeleton_animation_list", skeleton_animation_list);
        f(_session_id, "skeleton_skin_list", skeleton_skin_list);
        f(_session_id, "skeleton_bone_list", skeleton_bone_list);
        f(_session_id, "skeleton_slot_list", skeleton_slot_list);
        f(_session_id, "skeleton_slot_data", skeleton_slot_data);
        f(_session_id, "skeleton_slot_data_instance", skeleton_slot_data_instance);
        f(_session_id, "sequence_exists", sequence_exists);
        f(_session_id, "animcurve_get", animcurve_get);
        f(_session_id, "animcurve_get_channel", animcurve_get_channel);
        f(_session_id, "animcurve_get_channel_index", animcurve_get_channel_index);
        f(_session_id, "animcurve_channel_evaluate", animcurve_channel_evaluate);
        f(_session_id, "sequence_create", sequence_create);
        f(_session_id, "sequence_destroy", sequence_destroy);
        f(_session_id, "sequence_exists", sequence_exists);
        f(_session_id, "sequence_get", sequence_get);
        f(_session_id, "sequence_keyframe_new", sequence_keyframe_new);
        f(_session_id, "sequence_keyframedata_new", sequence_keyframedata_new);
        f(_session_id, "sequence_track_new", sequence_track_new);
        f(_session_id, "sequence_get_objects", sequence_get_objects);
        f(_session_id, "sequence_instance_override_object", sequence_instance_override_object);
        f(_session_id, "animcurve_create", animcurve_create);
        f(_session_id, "animcurve_destroy", animcurve_destroy);
        f(_session_id, "animcurve_exists", animcurve_exists);
        f(_session_id, "animcurve_channel_new", animcurve_channel_new);
        f(_session_id, "animcurve_point_new", animcurve_point_new);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        c(_session_id, "path_action_stop", path_action_stop);
        c(_session_id, "path_action_restart", path_action_restart);
        c(_session_id, "path_action_continue", path_action_continue);
        c(_session_id, "path_action_reverse", path_action_reverse);
        c(_session_id, "seqtracktype_graphic", seqtracktype_graphic);
        c(_session_id, "seqtracktype_audio", seqtracktype_audio);
        c(_session_id, "seqtracktype_real", seqtracktype_real);
        c(_session_id, "seqtracktype_color", seqtracktype_color);
        c(_session_id, "seqtracktype_colour", seqtracktype_colour);
        c(_session_id, "seqtracktype_bool", seqtracktype_bool);
        c(_session_id, "seqtracktype_string", seqtracktype_string);
        c(_session_id, "seqtracktype_sequence", seqtracktype_sequence);
        c(_session_id, "seqtracktype_clipmask", seqtracktype_clipmask);
        c(_session_id, "seqtracktype_clipmask_mask", seqtracktype_clipmask_mask);
        c(_session_id, "seqtracktype_clipmask_subject", seqtracktype_clipmask_subject);
        c(_session_id, "seqtracktype_group", seqtracktype_group);
        c(_session_id, "seqtracktype_empty", seqtracktype_empty);
        c(_session_id, "seqtracktype_spriteframes", seqtracktype_spriteframes);
        c(_session_id, "seqtracktype_instance", seqtracktype_instance);
        c(_session_id, "seqtracktype_message", seqtracktype_message);
        c(_session_id, "seqtracktype_moment", seqtracktype_moment);
        c(_session_id, "seqplay_oneshot", seqplay_oneshot);
        c(_session_id, "seqplay_loop", seqplay_loop);
        c(_session_id, "seqplay_pingpong", seqplay_pingpong);
        c(_session_id, "seqdir_right", seqdir_right);
        c(_session_id, "seqdir_left", seqdir_left);
        c(_session_id, "seqinterpolation_assign", seqinterpolation_assign);
        c(_session_id, "seqinterpolation_lerp", seqinterpolation_lerp);
        c(_session_id, "seqaudiokey_loop", seqaudiokey_loop);
        c(_session_id, "seqaudiokey_oneshot", seqaudiokey_oneshot);
        c(_session_id, "animcurvetype_linear", animcurvetype_linear);
        c(_session_id, "animcurvetype_catmullrom", animcurvetype_catmullrom);
    }
}

/// @desc Applies the collections interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_collections(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "array_length", array_length);
        f(_session_id, "array_equals", array_equals);
        f(_session_id, "array_create", array_create);
        f(_session_id, "array_copy", array_copy);
        f(_session_id, "array_resize", array_resize);
        f(_session_id, "array_get", array_get);
        f(_session_id, "array_set", array_set);
        f(_session_id, "array_push", array_push);
        f(_session_id, "array_pop", array_pop);
        f(_session_id, "array_insert", array_insert);
        f(_session_id, "array_delete", array_delete);
        f(_session_id, "array_sort", array_sort);
        f(_session_id, "path_start", path_start);
        f(_session_id, "path_end", path_end);
        f(_session_id, "mp_linear_step", mp_linear_step);
        f(_session_id, "mp_potential_step", mp_potential_step);
        f(_session_id, "mp_linear_step_object", mp_linear_step_object);
        f(_session_id, "mp_potential_step_object", mp_potential_step_object);
        f(_session_id, "mp_potential_settings", mp_potential_settings);
        f(_session_id, "mp_linear_path", mp_linear_path);
        f(_session_id, "mp_potential_path", mp_potential_path);
        f(_session_id, "mp_linear_path_object", mp_linear_path_object);
        f(_session_id, "mp_potential_path_object", mp_potential_path_object);
        f(_session_id, "mp_grid_create", mp_grid_create);
        f(_session_id, "mp_grid_destroy", mp_grid_destroy);
        f(_session_id, "mp_grid_clear_all", mp_grid_clear_all);
        f(_session_id, "mp_grid_clear_cell", mp_grid_clear_cell);
        f(_session_id, "mp_grid_clear_rectangle", mp_grid_clear_rectangle);
        f(_session_id, "mp_grid_add_cell", mp_grid_add_cell);
        f(_session_id, "mp_grid_get_cell", mp_grid_get_cell);
        f(_session_id, "mp_grid_add_rectangle", mp_grid_add_rectangle);
        f(_session_id, "mp_grid_add_instances", mp_grid_add_instances);
        f(_session_id, "mp_grid_path", mp_grid_path);
        f(_session_id, "mp_grid_draw", mp_grid_draw);
        f(_session_id, "mp_grid_to_ds_grid", mp_grid_to_ds_grid);
        f(_session_id, "path_exists", path_exists);
        f(_session_id, "path_get_name", path_get_name);
        f(_session_id, "path_get_length", path_get_length);
        f(_session_id, "path_get_kind", path_get_kind);
        f(_session_id, "path_get_closed", path_get_closed);
        f(_session_id, "path_get_precision", path_get_precision);
        f(_session_id, "path_get_number", path_get_number);
        f(_session_id, "path_get_point_x", path_get_point_x);
        f(_session_id, "path_get_point_y", path_get_point_y);
        f(_session_id, "path_get_point_speed", path_get_point_speed);
        f(_session_id, "path_get_x", path_get_x);
        f(_session_id, "path_get_y", path_get_y);
        f(_session_id, "path_get_speed", path_get_speed);
        f(_session_id, "path_set_kind", path_set_kind);
        f(_session_id, "path_set_closed", path_set_closed);
        f(_session_id, "path_set_precision", path_set_precision);
        f(_session_id, "path_add", path_add);
        f(_session_id, "path_assign", path_assign);
        f(_session_id, "path_duplicate", path_duplicate);
        f(_session_id, "path_append", path_append);
        f(_session_id, "path_delete", path_delete);
        f(_session_id, "path_add_point", path_add_point);
        f(_session_id, "path_insert_point", path_insert_point);
        f(_session_id, "path_change_point", path_change_point);
        f(_session_id, "path_delete_point", path_delete_point);
        f(_session_id, "path_clear_points", path_clear_points);
        f(_session_id, "path_reverse", path_reverse);
        f(_session_id, "path_mirror", path_mirror);
        f(_session_id, "path_flip", path_flip);
        f(_session_id, "path_rotate", path_rotate);
        f(_session_id, "path_rescale", path_rescale);
        f(_session_id, "path_shift", path_shift);
        f(_session_id, "ds_set_precision", ds_set_precision);
        f(_session_id, "ds_exists", ds_exists);
        f(_session_id, "ds_stack_create", ds_stack_create);
        f(_session_id, "ds_stack_destroy", ds_stack_destroy);
        f(_session_id, "ds_stack_clear", ds_stack_clear);
        f(_session_id, "ds_stack_copy", ds_stack_copy);
        f(_session_id, "ds_stack_size", ds_stack_size);
        f(_session_id, "ds_stack_empty", ds_stack_empty);
        f(_session_id, "ds_stack_push", ds_stack_push);
        f(_session_id, "ds_stack_pop", ds_stack_pop);
        f(_session_id, "ds_stack_top", ds_stack_top);
        f(_session_id, "ds_stack_write", ds_stack_write);
        f(_session_id, "ds_stack_read", ds_stack_read);
        f(_session_id, "ds_queue_create", ds_queue_create);
        f(_session_id, "ds_queue_destroy", ds_queue_destroy);
        f(_session_id, "ds_queue_clear", ds_queue_clear);
        f(_session_id, "ds_queue_copy", ds_queue_copy);
        f(_session_id, "ds_queue_size", ds_queue_size);
        f(_session_id, "ds_queue_empty", ds_queue_empty);
        f(_session_id, "ds_queue_enqueue", ds_queue_enqueue);
        f(_session_id, "ds_queue_dequeue", ds_queue_dequeue);
        f(_session_id, "ds_queue_head", ds_queue_head);
        f(_session_id, "ds_queue_tail", ds_queue_tail);
        f(_session_id, "ds_queue_write", ds_queue_write);
        f(_session_id, "ds_queue_read", ds_queue_read);
        f(_session_id, "ds_list_create", ds_list_create);
        f(_session_id, "ds_list_destroy", ds_list_destroy);
        f(_session_id, "ds_list_clear", ds_list_clear);
        f(_session_id, "ds_list_copy", ds_list_copy);
        f(_session_id, "ds_list_size", ds_list_size);
        f(_session_id, "ds_list_empty", ds_list_empty);
        f(_session_id, "ds_list_add", ds_list_add);
        f(_session_id, "ds_list_insert", ds_list_insert);
        f(_session_id, "ds_list_replace", ds_list_replace);
        f(_session_id, "ds_list_delete", ds_list_delete);
        f(_session_id, "ds_list_find_index", ds_list_find_index);
        f(_session_id, "ds_list_find_value", ds_list_find_value);
        f(_session_id, "ds_list_is_map", ds_list_is_map);
        f(_session_id, "ds_list_is_list", ds_list_is_list);
        f(_session_id, "ds_list_mark_as_list", ds_list_mark_as_list);
        f(_session_id, "ds_list_mark_as_map", ds_list_mark_as_map);
        f(_session_id, "ds_list_sort", ds_list_sort);
        f(_session_id, "ds_list_shuffle", ds_list_shuffle);
        f(_session_id, "ds_list_write", ds_list_write);
        f(_session_id, "ds_list_read", ds_list_read);
        f(_session_id, "ds_list_set", ds_list_set);
        f(_session_id, "ds_map_create", ds_map_create);
        f(_session_id, "ds_map_destroy", ds_map_destroy);
        f(_session_id, "ds_map_clear", ds_map_clear);
        f(_session_id, "ds_map_copy", ds_map_copy);
        f(_session_id, "ds_map_size", ds_map_size);
        f(_session_id, "ds_map_empty", ds_map_empty);
        f(_session_id, "ds_map_add", ds_map_add);
        f(_session_id, "ds_map_add_list", ds_map_add_list);
        f(_session_id, "ds_map_add_map", ds_map_add_map);
        f(_session_id, "ds_map_replace", ds_map_replace);
        f(_session_id, "ds_map_replace_map", ds_map_replace_map);
        f(_session_id, "ds_map_replace_list", ds_map_replace_list);
        f(_session_id, "ds_map_delete", ds_map_delete);
        f(_session_id, "ds_map_exists", ds_map_exists);
        f(_session_id, "ds_map_values_to_array", ds_map_values_to_array);
        f(_session_id, "ds_map_keys_to_array", ds_map_keys_to_array);
        f(_session_id, "ds_map_find_value", ds_map_find_value);
        f(_session_id, "ds_map_is_map", ds_map_is_map);
        f(_session_id, "ds_map_is_list", ds_map_is_list);
        f(_session_id, "ds_map_find_previous", ds_map_find_previous);
        f(_session_id, "ds_map_find_next", ds_map_find_next);
        f(_session_id, "ds_map_find_first", ds_map_find_first);
        f(_session_id, "ds_map_find_last", ds_map_find_last);
        f(_session_id, "ds_map_write", ds_map_write);
        f(_session_id, "ds_map_read", ds_map_read);
        f(_session_id, "ds_map_secure_save", ds_map_secure_save);
        f(_session_id, "ds_map_secure_load", ds_map_secure_load);
        f(_session_id, "ds_map_secure_load_buffer", ds_map_secure_load_buffer);
        f(_session_id, "ds_map_secure_save_buffer", ds_map_secure_save_buffer);
        f(_session_id, "ds_map_set", ds_map_set);
        f(_session_id, "ds_priority_create", ds_priority_create);
        f(_session_id, "ds_priority_destroy", ds_priority_destroy);
        f(_session_id, "ds_priority_clear", ds_priority_clear);
        f(_session_id, "ds_priority_copy", ds_priority_copy);
        f(_session_id, "ds_priority_size", ds_priority_size);
        f(_session_id, "ds_priority_empty", ds_priority_empty);
        f(_session_id, "ds_priority_add", ds_priority_add);
        f(_session_id, "ds_priority_change_priority", ds_priority_change_priority);
        f(_session_id, "ds_priority_find_priority", ds_priority_find_priority);
        f(_session_id, "ds_priority_delete_value", ds_priority_delete_value);
        f(_session_id, "ds_priority_delete_min", ds_priority_delete_min);
        f(_session_id, "ds_priority_find_min", ds_priority_find_min);
        f(_session_id, "ds_priority_delete_max", ds_priority_delete_max);
        f(_session_id, "ds_priority_find_max", ds_priority_find_max);
        f(_session_id, "ds_priority_write", ds_priority_write);
        f(_session_id, "ds_priority_read", ds_priority_read);
        f(_session_id, "ds_grid_create", ds_grid_create);
        f(_session_id, "ds_grid_destroy", ds_grid_destroy);
        f(_session_id, "ds_grid_copy", ds_grid_copy);
        f(_session_id, "ds_grid_resize", ds_grid_resize);
        f(_session_id, "ds_grid_width", ds_grid_width);
        f(_session_id, "ds_grid_height", ds_grid_height);
        f(_session_id, "ds_grid_clear", ds_grid_clear);
        f(_session_id, "ds_grid_set", ds_grid_set);
        f(_session_id, "ds_grid_add", ds_grid_add);
        f(_session_id, "ds_grid_multiply", ds_grid_multiply);
        f(_session_id, "ds_grid_set_region", ds_grid_set_region);
        f(_session_id, "ds_grid_add_region", ds_grid_add_region);
        f(_session_id, "ds_grid_multiply_region", ds_grid_multiply_region);
        f(_session_id, "ds_grid_set_disk", ds_grid_set_disk);
        f(_session_id, "ds_grid_add_disk", ds_grid_add_disk);
        f(_session_id, "ds_grid_multiply_disk", ds_grid_multiply_disk);
        f(_session_id, "ds_grid_set_grid_region", ds_grid_set_grid_region);
        f(_session_id, "ds_grid_add_grid_region", ds_grid_add_grid_region);
        f(_session_id, "ds_grid_multiply_grid_region", ds_grid_multiply_grid_region);
        f(_session_id, "ds_grid_get", ds_grid_get);
        f(_session_id, "ds_grid_get_sum", ds_grid_get_sum);
        f(_session_id, "ds_grid_get_max", ds_grid_get_max);
        f(_session_id, "ds_grid_get_min", ds_grid_get_min);
        f(_session_id, "ds_grid_get_mean", ds_grid_get_mean);
        f(_session_id, "ds_grid_get_disk_sum", ds_grid_get_disk_sum);
        f(_session_id, "ds_grid_get_disk_min", ds_grid_get_disk_min);
        f(_session_id, "ds_grid_get_disk_max", ds_grid_get_disk_max);
        f(_session_id, "ds_grid_get_disk_mean", ds_grid_get_disk_mean);
        f(_session_id, "ds_grid_value_exists", ds_grid_value_exists);
        f(_session_id, "ds_grid_value_x", ds_grid_value_x);
        f(_session_id, "ds_grid_value_y", ds_grid_value_y);
        f(_session_id, "ds_grid_value_disk_exists", ds_grid_value_disk_exists);
        f(_session_id, "ds_grid_value_disk_x", ds_grid_value_disk_x);
        f(_session_id, "ds_grid_value_disk_y", ds_grid_value_disk_y);
        f(_session_id, "ds_grid_shuffle", ds_grid_shuffle);
        f(_session_id, "ds_grid_write", ds_grid_write);
        f(_session_id, "ds_grid_read", ds_grid_read);
        f(_session_id, "ds_grid_sort", ds_grid_sort);
        f(_session_id, "ds_grid_set", ds_grid_set);
        f(_session_id, "ds_grid_get", ds_grid_get);
        f(_session_id, "buffer_create", buffer_create);
        f(_session_id, "buffer_write", buffer_write);
        f(_session_id, "buffer_read", buffer_read);
        f(_session_id, "buffer_seek", buffer_seek);
        f(_session_id, "buffer_get_surface", buffer_get_surface);
        f(_session_id, "buffer_set_surface", buffer_set_surface);
        f(_session_id, "buffer_delete", buffer_delete);
        f(_session_id, "buffer_exists", buffer_exists);
        f(_session_id, "buffer_get_type", buffer_get_type);
        f(_session_id, "buffer_get_alignment", buffer_get_alignment);
        f(_session_id, "buffer_poke", buffer_poke);
        f(_session_id, "buffer_peek", buffer_peek);
        f(_session_id, "buffer_save", buffer_save);
        f(_session_id, "buffer_save_ext", buffer_save_ext);
        f(_session_id, "buffer_load", buffer_load);
        f(_session_id, "buffer_load_ext", buffer_load_ext);
        f(_session_id, "buffer_load_partial", buffer_load_partial);
        f(_session_id, "buffer_copy", buffer_copy);
        f(_session_id, "buffer_fill", buffer_fill);
        f(_session_id, "buffer_get_size", buffer_get_size);
        f(_session_id, "buffer_tell", buffer_tell);
        f(_session_id, "buffer_resize", buffer_resize);
        f(_session_id, "buffer_md5", buffer_md5);
        f(_session_id, "buffer_sha1", buffer_sha1);
        f(_session_id, "buffer_crc32", buffer_crc32);
        f(_session_id, "buffer_base64_encode", buffer_base64_encode);
        f(_session_id, "buffer_base64_decode", buffer_base64_decode);
        f(_session_id, "buffer_base64_decode_ext", buffer_base64_decode_ext);
        f(_session_id, "buffer_sizeof", buffer_sizeof);
        f(_session_id, "buffer_get_address", buffer_get_address);
        f(_session_id, "buffer_create_from_vertex_buffer", buffer_create_from_vertex_buffer);
        f(_session_id, "buffer_create_from_vertex_buffer_ext", buffer_create_from_vertex_buffer_ext);
        f(_session_id, "buffer_copy_from_vertex_buffer", buffer_copy_from_vertex_buffer);
        f(_session_id, "buffer_async_group_begin", buffer_async_group_begin);
        f(_session_id, "buffer_async_group_option", buffer_async_group_option);
        f(_session_id, "buffer_async_group_end", buffer_async_group_end);
        f(_session_id, "buffer_load_async", buffer_load_async);
        f(_session_id, "buffer_save_async", buffer_save_async);
        f(_session_id, "buffer_compress", buffer_compress);
        f(_session_id, "buffer_decompress", buffer_decompress);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        c(_session_id, "path_action_stop", path_action_stop);
        c(_session_id, "path_action_restart", path_action_restart);
        c(_session_id, "path_action_continue", path_action_continue);
        c(_session_id, "path_action_reverse", path_action_reverse);
        c(_session_id, "ds_type_map", ds_type_map);
        c(_session_id, "ds_type_list", ds_type_list);
        c(_session_id, "ds_type_stack", ds_type_stack);
        c(_session_id, "ds_type_queue", ds_type_queue);
        c(_session_id, "ds_type_grid", ds_type_grid);
        c(_session_id, "ds_type_priority", ds_type_priority);
        c(_session_id, "buffer_fixed", buffer_fixed);
        c(_session_id, "buffer_grow", buffer_grow);
        c(_session_id, "buffer_wrap", buffer_wrap);
        c(_session_id, "buffer_fast", buffer_fast);
        c(_session_id, "buffer_vbuffer", buffer_vbuffer);
        c(_session_id, "buffer_u8", buffer_u8);
        c(_session_id, "buffer_s8", buffer_s8);
        c(_session_id, "buffer_u16", buffer_u16);
        c(_session_id, "buffer_s16", buffer_s16);
        c(_session_id, "buffer_u32", buffer_u32);
        c(_session_id, "buffer_s32", buffer_s32);
        c(_session_id, "buffer_u64", buffer_u64);
        c(_session_id, "buffer_f16", buffer_f16);
        c(_session_id, "buffer_f32", buffer_f32);
        c(_session_id, "buffer_f64", buffer_f64);
        c(_session_id, "buffer_bool", buffer_bool);
        c(_session_id, "buffer_text", buffer_text);
        c(_session_id, "buffer_string", buffer_string);
        c(_session_id, "buffer_seek_start", buffer_seek_start);
        c(_session_id, "buffer_seek_relative", buffer_seek_relative);
        c(_session_id, "buffer_seek_end", buffer_seek_end);
    }
}

/// @desc Applies the random interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_random(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "random", random);
        f(_session_id, "random_range", random_range);
        f(_session_id, "irandom", irandom);
        f(_session_id, "irandom_range", irandom_range);
        f(_session_id, "random_set_seed", random_set_seed);
        f(_session_id, "random_get_seed", random_get_seed);
        f(_session_id, "randomize", randomize);
        f(_session_id, "randomise", randomise);
        f(_session_id, "choose", choose);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        
    }
}

/// @desc Applies the strings interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_strings(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "string", string);
        f(_session_id, "string_format", string_format);
        f(_session_id, "chr", chr);
        f(_session_id, "ansi_char", ansi_char);
        f(_session_id, "ord", ord);
        f(_session_id, "string_length", string_length);
        f(_session_id, "string_byte_length", string_byte_length);
        f(_session_id, "string_pos", string_pos);
        f(_session_id, "string_pos_ext", string_pos_ext);
        f(_session_id, "string_last_pos", string_last_pos);
        f(_session_id, "string_last_pos_ext", string_last_pos_ext);
        f(_session_id, "string_copy", string_copy);
        f(_session_id, "string_char_at", string_char_at);
        f(_session_id, "string_ord_at", string_ord_at);
        f(_session_id, "string_byte_at", string_byte_at);
        f(_session_id, "string_set_byte_at", string_set_byte_at);
        f(_session_id, "string_delete", string_delete);
        f(_session_id, "string_insert", string_insert);
        f(_session_id, "string_lower", string_lower);
        f(_session_id, "string_upper", string_upper);
        f(_session_id, "string_repeat", string_repeat);
        f(_session_id, "string_letters", string_letters);
        f(_session_id, "string_digits", string_digits);
        f(_session_id, "string_lettersdigits", string_lettersdigits);
        f(_session_id, "string_replace", string_replace);
        f(_session_id, "string_replace_all", string_replace_all);
        f(_session_id, "string_count", string_count);
        f(_session_id, "string_hash_to_newline", string_hash_to_newline);
        f(_session_id, "string_width", string_width);
        f(_session_id, "string_height", string_height);
        f(_session_id, "string_width_ext", string_width_ext);
        f(_session_id, "string_height_ext", string_height_ext);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        
    }
}

/// @desc Applies the scripts interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_scripts(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "method", method);
        f(_session_id, "method_get_index", method_get_index);
        f(_session_id, "method_get_self", method_get_self);
        f(_session_id, "script_exists", script_exists);
        f(_session_id, "script_get_name", script_get_name);
        f(_session_id, "script_execute", script_execute);
        f(_session_id, "script_execute_ext", script_execute_ext);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        
    }
}

/// @desc Applies the input interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_input(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "keyboard_set_map", keyboard_set_map);
        f(_session_id, "keyboard_get_map", keyboard_get_map);
        f(_session_id, "keyboard_unset_map", keyboard_unset_map);
        f(_session_id, "keyboard_check", keyboard_check);
        f(_session_id, "keyboard_check_pressed", keyboard_check_pressed);
        f(_session_id, "keyboard_check_released", keyboard_check_released);
        f(_session_id, "keyboard_check_direct", keyboard_check_direct);
        f(_session_id, "keyboard_get_numlock", keyboard_get_numlock);
        f(_session_id, "keyboard_set_numlock", keyboard_set_numlock);
        f(_session_id, "keyboard_key_press", keyboard_key_press);
        f(_session_id, "keyboard_key_release", keyboard_key_release);
        f(_session_id, "keyboard_clear", keyboard_clear);
        f(_session_id, "io_clear", io_clear);
        f(_session_id, "mouse_check_button", mouse_check_button);
        f(_session_id, "mouse_check_button_pressed", mouse_check_button_pressed);
        f(_session_id, "mouse_check_button_released", mouse_check_button_released);
        f(_session_id, "mouse_wheel_up", mouse_wheel_up);
        f(_session_id, "mouse_wheel_down", mouse_wheel_down);
        f(_session_id, "mouse_clear", mouse_clear);
        f(_session_id, "clickable_add", clickable_add);
        f(_session_id, "clickable_add_ext", clickable_add_ext);
        f(_session_id, "clickable_change", clickable_change);
        f(_session_id, "clickable_change_ext", clickable_change_ext);
        f(_session_id, "clickable_delete", clickable_delete);
        f(_session_id, "clickable_exists", clickable_exists);
        f(_session_id, "clickable_set_style", clickable_set_style);
        f(_session_id, "device_mouse_dbclick_enable", device_mouse_dbclick_enable);
        f(_session_id, "virtual_key_add", virtual_key_add);
        f(_session_id, "virtual_key_hide", virtual_key_hide);
        f(_session_id, "virtual_key_delete", virtual_key_delete);
        f(_session_id, "virtual_key_show", virtual_key_show);
        f(_session_id, "device_get_tilt_x", device_get_tilt_x);
        f(_session_id, "device_get_tilt_y", device_get_tilt_y);
        f(_session_id, "device_get_tilt_z", device_get_tilt_z);
        f(_session_id, "device_is_keypad_open", device_is_keypad_open);
        f(_session_id, "device_mouse_check_button", device_mouse_check_button);
        f(_session_id, "device_mouse_check_button_pressed", device_mouse_check_button_pressed);
        f(_session_id, "device_mouse_check_button_released", device_mouse_check_button_released);
        f(_session_id, "device_mouse_x", device_mouse_x);
        f(_session_id, "device_mouse_y", device_mouse_y);
        f(_session_id, "device_mouse_raw_x", device_mouse_raw_x);
        f(_session_id, "device_mouse_raw_y", device_mouse_raw_y);
        f(_session_id, "device_mouse_x_to_gui", device_mouse_x_to_gui);
        f(_session_id, "device_mouse_y_to_gui", device_mouse_y_to_gui);
        f(_session_id, "gamepad_is_supported", gamepad_is_supported);
        f(_session_id, "gamepad_get_device_count", gamepad_get_device_count);
        f(_session_id, "gamepad_is_connected", gamepad_is_connected);
        f(_session_id, "gamepad_get_description", gamepad_get_description);
        f(_session_id, "gamepad_get_button_threshold", gamepad_get_button_threshold);
        f(_session_id, "gamepad_set_button_threshold", gamepad_set_button_threshold);
        f(_session_id, "gamepad_get_axis_deadzone", gamepad_get_axis_deadzone);
        f(_session_id, "gamepad_set_axis_deadzone", gamepad_set_axis_deadzone);
        f(_session_id, "gamepad_button_count", gamepad_button_count);
        f(_session_id, "gamepad_button_check", gamepad_button_check);
        f(_session_id, "gamepad_button_check_pressed", gamepad_button_check_pressed);
        f(_session_id, "gamepad_button_check_released", gamepad_button_check_released);
        f(_session_id, "gamepad_button_value", gamepad_button_value);
        f(_session_id, "gamepad_axis_count", gamepad_axis_count);
        f(_session_id, "gamepad_axis_value", gamepad_axis_value);
        f(_session_id, "gamepad_set_vibration", gamepad_set_vibration);
        f(_session_id, "gamepad_set_colour", gamepad_set_colour);
        f(_session_id, "gamepad_set_color", gamepad_set_color);
        f(_session_id, "gamepad_hat_count", gamepad_hat_count);
        f(_session_id, "gamepad_hat_value", gamepad_hat_value);
        f(_session_id, "gamepad_remove_mapping", gamepad_remove_mapping);
        f(_session_id, "gamepad_test_mapping", gamepad_test_mapping);
        f(_session_id, "gamepad_get_mapping", gamepad_get_mapping);
        f(_session_id, "gamepad_get_guid", gamepad_get_guid);
        f(_session_id, "gamepad_set_option", gamepad_set_option);
        f(_session_id, "gamepad_get_option", gamepad_get_option);
        f(_session_id, "gesture_drag_time", gesture_drag_time);
        f(_session_id, "gesture_drag_distance", gesture_drag_distance);
        f(_session_id, "gesture_flick_speed", gesture_flick_speed);
        f(_session_id, "gesture_double_tap_time", gesture_double_tap_time);
        f(_session_id, "gesture_double_tap_distance", gesture_double_tap_distance);
        f(_session_id, "gesture_pinch_distance", gesture_pinch_distance);
        f(_session_id, "gesture_pinch_angle_towards", gesture_pinch_angle_towards);
        f(_session_id, "gesture_pinch_angle_away", gesture_pinch_angle_away);
        f(_session_id, "gesture_rotate_time", gesture_rotate_time);
        f(_session_id, "gesture_rotate_angle", gesture_rotate_angle);
        f(_session_id, "gesture_tap_count", gesture_tap_count);
        f(_session_id, "gesture_get_drag_time", gesture_get_drag_time);
        f(_session_id, "gesture_get_drag_distance", gesture_get_drag_distance);
        f(_session_id, "gesture_get_flick_speed", gesture_get_flick_speed);
        f(_session_id, "gesture_get_double_tap_time", gesture_get_double_tap_time);
        f(_session_id, "gesture_get_double_tap_distance", gesture_get_double_tap_distance);
        f(_session_id, "gesture_get_pinch_distance", gesture_get_pinch_distance);
        f(_session_id, "gesture_get_pinch_angle_towards", gesture_get_pinch_angle_towards);
        f(_session_id, "gesture_get_pinch_angle_away", gesture_get_pinch_angle_away);
        f(_session_id, "gesture_get_rotate_time", gesture_get_rotate_time);
        f(_session_id, "gesture_get_rotate_angle", gesture_get_rotate_angle);
        f(_session_id, "gesture_get_tap_count", gesture_get_tap_count);
        f(_session_id, "keyboard_virtual_show", keyboard_virtual_show);
        f(_session_id, "keyboard_virtual_hide", keyboard_virtual_hide);
        f(_session_id, "keyboard_virtual_status", keyboard_virtual_status);
        f(_session_id, "keyboard_virtual_height", keyboard_virtual_height);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        c(_session_id, "vk_nokey", vk_nokey);
        c(_session_id, "vk_anykey", vk_anykey);
        c(_session_id, "vk_enter", vk_enter);
        c(_session_id, "vk_return", vk_return);
        c(_session_id, "vk_shift", vk_shift);
        c(_session_id, "vk_control", vk_control);
        c(_session_id, "vk_alt", vk_alt);
        c(_session_id, "vk_escape", vk_escape);
        c(_session_id, "vk_space", vk_space);
        c(_session_id, "vk_backspace", vk_backspace);
        c(_session_id, "vk_tab", vk_tab);
        c(_session_id, "vk_pause", vk_pause);
        c(_session_id, "vk_printscreen", vk_printscreen);
        c(_session_id, "vk_left", vk_left);
        c(_session_id, "vk_right", vk_right);
        c(_session_id, "vk_up", vk_up);
        c(_session_id, "vk_down", vk_down);
        c(_session_id, "vk_home", vk_home);
        c(_session_id, "vk_end", vk_end);
        c(_session_id, "vk_delete", vk_delete);
        c(_session_id, "vk_insert", vk_insert);
        c(_session_id, "vk_pageup", vk_pageup);
        c(_session_id, "vk_pagedown", vk_pagedown);
        c(_session_id, "vk_f1", vk_f1);
        c(_session_id, "vk_f2", vk_f2);
        c(_session_id, "vk_f3", vk_f3);
        c(_session_id, "vk_f4", vk_f4);
        c(_session_id, "vk_f5", vk_f5);
        c(_session_id, "vk_f6", vk_f6);
        c(_session_id, "vk_f7", vk_f7);
        c(_session_id, "vk_f8", vk_f8);
        c(_session_id, "vk_f9", vk_f9);
        c(_session_id, "vk_f10", vk_f10);
        c(_session_id, "vk_f11", vk_f11);
        c(_session_id, "vk_f12", vk_f12);
        c(_session_id, "vk_numpad0", vk_numpad0);
        c(_session_id, "vk_numpad1", vk_numpad1);
        c(_session_id, "vk_numpad2", vk_numpad2);
        c(_session_id, "vk_numpad3", vk_numpad3);
        c(_session_id, "vk_numpad4", vk_numpad4);
        c(_session_id, "vk_numpad5", vk_numpad5);
        c(_session_id, "vk_numpad6", vk_numpad6);
        c(_session_id, "vk_numpad7", vk_numpad7);
        c(_session_id, "vk_numpad8", vk_numpad8);
        c(_session_id, "vk_numpad9", vk_numpad9);
        c(_session_id, "vk_divide", vk_divide);
        c(_session_id, "vk_multiply", vk_multiply);
        c(_session_id, "vk_subtract", vk_subtract);
        c(_session_id, "vk_add", vk_add);
        c(_session_id, "vk_decimal", vk_decimal);
        c(_session_id, "vk_lshift", vk_lshift);
        c(_session_id, "vk_lcontrol", vk_lcontrol);
        c(_session_id, "vk_lalt", vk_lalt);
        c(_session_id, "vk_rshift", vk_rshift);
        c(_session_id, "vk_rcontrol", vk_rcontrol);
        c(_session_id, "vk_ralt", vk_ralt);
        c(_session_id, "mb_any", mb_any);
        c(_session_id, "mb_none", mb_none);
        c(_session_id, "mb_left", mb_left);
        c(_session_id, "mb_right", mb_right);
        c(_session_id, "mb_middle", mb_middle);
        c(_session_id, "gp_face1", gp_face1);
        c(_session_id, "gp_face2", gp_face2);
        c(_session_id, "gp_face3", gp_face3);
        c(_session_id, "gp_face4", gp_face4);
        c(_session_id, "gp_shoulderl", gp_shoulderl);
        c(_session_id, "gp_shoulderr", gp_shoulderr);
        c(_session_id, "gp_shoulderlb", gp_shoulderlb);
        c(_session_id, "gp_shoulderrb", gp_shoulderrb);
        c(_session_id, "gp_select", gp_select);
        c(_session_id, "gp_start", gp_start);
        c(_session_id, "gp_stickl", gp_stickl);
        c(_session_id, "gp_stickr", gp_stickr);
        c(_session_id, "gp_padu", gp_padu);
        c(_session_id, "gp_padd", gp_padd);
        c(_session_id, "gp_padl", gp_padl);
        c(_session_id, "gp_padr", gp_padr);
        c(_session_id, "gp_axislh", gp_axislh);
        c(_session_id, "gp_axislv", gp_axislv);
        c(_session_id, "gp_axisrh", gp_axisrh);
        c(_session_id, "gp_axisrv", gp_axisrv);
        c(_session_id, "kbv_type_default", kbv_type_default);
        c(_session_id, "kbv_type_ascii", kbv_type_ascii);
        c(_session_id, "kbv_type_url", kbv_type_url);
        c(_session_id, "kbv_type_email", kbv_type_email);
        c(_session_id, "kbv_type_numbers", kbv_type_numbers);
        c(_session_id, "kbv_type_phone", kbv_type_phone);
        c(_session_id, "kbv_type_phone_name", kbv_type_phone_name);
        c(_session_id, "kbv_returnkey_default", kbv_returnkey_default);
        c(_session_id, "kbv_returnkey_go", kbv_returnkey_go);
        c(_session_id, "kbv_returnkey_google", kbv_returnkey_google);
        c(_session_id, "kbv_returnkey_join", kbv_returnkey_join);
        c(_session_id, "kbv_returnkey_next", kbv_returnkey_next);
        c(_session_id, "kbv_returnkey_route", kbv_returnkey_route);
        c(_session_id, "kbv_returnkey_search", kbv_returnkey_search);
        c(_session_id, "kbv_returnkey_send", kbv_returnkey_send);
        c(_session_id, "kbv_returnkey_yahoo", kbv_returnkey_yahoo);
        c(_session_id, "kbv_returnkey_done", kbv_returnkey_done);
        c(_session_id, "kbv_returnkey_continue", kbv_returnkey_continue);
        c(_session_id, "kbv_returnkey_emergency", kbv_returnkey_emergency);
        c(_session_id, "kbv_autocapitalize_none", kbv_autocapitalize_none);
        c(_session_id, "kbv_autocapitalize_words", kbv_autocapitalize_words);
        c(_session_id, "kbv_autocapitalize_sentences", kbv_autocapitalize_sentences);
        c(_session_id, "kbv_autocapitalize_characters", kbv_autocapitalize_characters);
    }
}

/// @desc Applies the audio interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_audio(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "audio_listener_position", audio_listener_position);
        f(_session_id, "audio_listener_velocity", audio_listener_velocity);
        f(_session_id, "audio_listener_orientation", audio_listener_orientation);
        f(_session_id, "audio_emitter_position", audio_emitter_position);
        f(_session_id, "audio_emitter_create", audio_emitter_create);
        f(_session_id, "audio_emitter_free", audio_emitter_free);
        f(_session_id, "audio_emitter_exists", audio_emitter_exists);
        f(_session_id, "audio_emitter_pitch", audio_emitter_pitch);
        f(_session_id, "audio_emitter_velocity", audio_emitter_velocity);
        f(_session_id, "audio_emitter_falloff", audio_emitter_falloff);
        f(_session_id, "audio_emitter_gain", audio_emitter_gain);
        f(_session_id, "audio_play_sound", audio_play_sound);
        f(_session_id, "audio_play_sound_on", audio_play_sound_on);
        f(_session_id, "audio_play_sound_at", audio_play_sound_at);
        f(_session_id, "audio_stop_sound", audio_stop_sound);
        f(_session_id, "audio_resume_sound", audio_resume_sound);
        f(_session_id, "audio_pause_sound", audio_pause_sound);
        f(_session_id, "audio_channel_num", audio_channel_num);
        f(_session_id, "audio_sound_length", audio_sound_length);
        f(_session_id, "audio_get_type", audio_get_type);
        f(_session_id, "audio_falloff_set_model", audio_falloff_set_model);
        f(_session_id, "audio_master_gain", audio_master_gain);
        f(_session_id, "audio_sound_gain", audio_sound_gain);
        f(_session_id, "audio_sound_pitch", audio_sound_pitch);
        f(_session_id, "audio_stop_all", audio_stop_all);
        f(_session_id, "audio_resume_all", audio_resume_all);
        f(_session_id, "audio_pause_all", audio_pause_all);
        f(_session_id, "audio_is_playing", audio_is_playing);
        f(_session_id, "audio_is_paused", audio_is_paused);
        f(_session_id, "audio_exists", audio_exists);
        f(_session_id, "audio_system_is_available", audio_system_is_available);
        f(_session_id, "audio_sound_is_playable", audio_sound_is_playable);
        f(_session_id, "audio_emitter_get_gain", audio_emitter_get_gain);
        f(_session_id, "audio_emitter_get_pitch", audio_emitter_get_pitch);
        f(_session_id, "audio_emitter_get_x", audio_emitter_get_x);
        f(_session_id, "audio_emitter_get_y", audio_emitter_get_y);
        f(_session_id, "audio_emitter_get_z", audio_emitter_get_z);
        f(_session_id, "audio_emitter_get_vx", audio_emitter_get_vx);
        f(_session_id, "audio_emitter_get_vy", audio_emitter_get_vy);
        f(_session_id, "audio_emitter_get_vz", audio_emitter_get_vz);
        f(_session_id, "audio_listener_set_position", audio_listener_set_position);
        f(_session_id, "audio_listener_set_velocity", audio_listener_set_velocity);
        f(_session_id, "audio_listener_set_orientation", audio_listener_set_orientation);
        f(_session_id, "audio_listener_get_data", audio_listener_get_data);
        f(_session_id, "audio_set_master_gain", audio_set_master_gain);
        f(_session_id, "audio_get_master_gain", audio_get_master_gain);
        f(_session_id, "audio_sound_get_gain", audio_sound_get_gain);
        f(_session_id, "audio_sound_get_pitch", audio_sound_get_pitch);
        f(_session_id, "audio_get_name", audio_get_name);
        f(_session_id, "audio_sound_set_track_position", audio_sound_set_track_position);
        f(_session_id, "audio_sound_get_track_position", audio_sound_get_track_position);
        f(_session_id, "audio_create_stream", audio_create_stream);
        f(_session_id, "audio_destroy_stream", audio_destroy_stream);
        f(_session_id, "audio_create_sync_group", audio_create_sync_group);
        f(_session_id, "audio_destroy_sync_group", audio_destroy_sync_group);
        f(_session_id, "audio_play_in_sync_group", audio_play_in_sync_group);
        f(_session_id, "audio_start_sync_group", audio_start_sync_group);
        f(_session_id, "audio_stop_sync_group", audio_stop_sync_group);
        f(_session_id, "audio_pause_sync_group", audio_pause_sync_group);
        f(_session_id, "audio_resume_sync_group", audio_resume_sync_group);
        f(_session_id, "audio_sync_group_get_track_pos", audio_sync_group_get_track_pos);
        f(_session_id, "audio_sync_group_debug", audio_sync_group_debug);
        f(_session_id, "audio_sync_group_is_playing", audio_sync_group_is_playing);
        f(_session_id, "audio_debug", audio_debug);
        f(_session_id, "audio_group_load", audio_group_load);
        f(_session_id, "audio_group_unload", audio_group_unload);
        f(_session_id, "audio_group_is_loaded", audio_group_is_loaded);
        f(_session_id, "audio_group_load_progress", audio_group_load_progress);
        f(_session_id, "audio_group_name", audio_group_name);
        f(_session_id, "audio_group_stop_all", audio_group_stop_all);
        f(_session_id, "audio_group_set_gain", audio_group_set_gain);
        f(_session_id, "audio_create_buffer_sound", audio_create_buffer_sound);
        f(_session_id, "audio_free_buffer_sound", audio_free_buffer_sound);
        f(_session_id, "audio_create_play_queue", audio_create_play_queue);
        f(_session_id, "audio_free_play_queue", audio_free_play_queue);
        f(_session_id, "audio_queue_sound", audio_queue_sound);
        f(_session_id, "audio_get_recorder_count", audio_get_recorder_count);
        f(_session_id, "audio_get_recorder_info", audio_get_recorder_info);
        f(_session_id, "audio_start_recording", audio_start_recording);
        f(_session_id, "audio_stop_recording", audio_stop_recording);
        f(_session_id, "audio_sound_get_listener_mask", audio_sound_get_listener_mask);
        f(_session_id, "audio_emitter_get_listener_mask", audio_emitter_get_listener_mask);
        f(_session_id, "audio_get_listener_mask", audio_get_listener_mask);
        f(_session_id, "audio_sound_set_listener_mask", audio_sound_set_listener_mask);
        f(_session_id, "audio_emitter_set_listener_mask", audio_emitter_set_listener_mask);
        f(_session_id, "audio_set_listener_mask", audio_set_listener_mask);
        f(_session_id, "audio_get_listener_count", audio_get_listener_count);
        f(_session_id, "audio_get_listener_info", audio_get_listener_info);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        c(_session_id, "audio_falloff_none", audio_falloff_none);
        c(_session_id, "audio_falloff_inverse_distance", audio_falloff_inverse_distance);
        c(_session_id, "audio_falloff_inverse_distance_clamped", audio_falloff_inverse_distance_clamped);
        c(_session_id, "audio_falloff_linear_distance", audio_falloff_linear_distance);
        c(_session_id, "audio_falloff_linear_distance_clamped", audio_falloff_linear_distance_clamped);
        c(_session_id, "audio_falloff_exponent_distance", audio_falloff_exponent_distance);
        c(_session_id, "audio_falloff_exponent_distance_clamped", audio_falloff_exponent_distance_clamped);
        c(_session_id, "audio_mono", audio_mono);
        c(_session_id, "audio_stereo", audio_stereo);
        c(_session_id, "audio_3d", audio_3d);
    }
}

/// @desc Applies the graphics interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_graphics(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "draw_self", draw_self);
        f(_session_id, "draw_sprite", draw_sprite);
        f(_session_id, "draw_sprite_pos", draw_sprite_pos);
        f(_session_id, "draw_sprite_ext", draw_sprite_ext);
        f(_session_id, "draw_sprite_stretched", draw_sprite_stretched);
        f(_session_id, "draw_sprite_stretched_ext", draw_sprite_stretched_ext);
        f(_session_id, "draw_sprite_tiled", draw_sprite_tiled);
        f(_session_id, "draw_sprite_tiled_ext", draw_sprite_tiled_ext);
        f(_session_id, "draw_sprite_part", draw_sprite_part);
        f(_session_id, "draw_sprite_part_ext", draw_sprite_part_ext);
        f(_session_id, "draw_sprite_general", draw_sprite_general);
        f(_session_id, "draw_clear", draw_clear);
        f(_session_id, "draw_clear_alpha", draw_clear_alpha);
        f(_session_id, "draw_point", draw_point);
        f(_session_id, "draw_line", draw_line);
        f(_session_id, "draw_line_width", draw_line_width);
        f(_session_id, "draw_rectangle", draw_rectangle);
        f(_session_id, "draw_roundrect", draw_roundrect);
        f(_session_id, "draw_roundrect_ext", draw_roundrect_ext);
        f(_session_id, "draw_triangle", draw_triangle);
        f(_session_id, "draw_circle", draw_circle);
        f(_session_id, "draw_ellipse", draw_ellipse);
        f(_session_id, "draw_set_circle_precision", draw_set_circle_precision);
        f(_session_id, "draw_arrow", draw_arrow);
        f(_session_id, "draw_button", draw_button);
        f(_session_id, "draw_path", draw_path);
        f(_session_id, "draw_healthbar", draw_healthbar);
        f(_session_id, "draw_getpixel", draw_getpixel);
        f(_session_id, "draw_getpixel_ext", draw_getpixel_ext);
        f(_session_id, "draw_set_colour", draw_set_colour);
        f(_session_id, "draw_set_color", draw_set_color);
        f(_session_id, "draw_set_alpha", draw_set_alpha);
        f(_session_id, "draw_get_colour", draw_get_colour);
        f(_session_id, "draw_get_color", draw_get_color);
        f(_session_id, "draw_get_alpha", draw_get_alpha);
        f(_session_id, "merge_colour", merge_colour);
        f(_session_id, "make_colour_rgb", make_colour_rgb);
        f(_session_id, "make_colour_hsv", make_colour_hsv);
        f(_session_id, "colour_get_red", colour_get_red);
        f(_session_id, "colour_get_green", colour_get_green);
        f(_session_id, "colour_get_blue", colour_get_blue);
        f(_session_id, "colour_get_hue", colour_get_hue);
        f(_session_id, "colour_get_saturation", colour_get_saturation);
        f(_session_id, "colour_get_value", colour_get_value);
        f(_session_id, "merge_color", merge_color);
        f(_session_id, "make_color_rgb", make_color_rgb);
        f(_session_id, "make_color_hsv", make_color_hsv);
        f(_session_id, "color_get_red", color_get_red);
        f(_session_id, "color_get_green", color_get_green);
        f(_session_id, "color_get_blue", color_get_blue);
        f(_session_id, "color_get_hue", color_get_hue);
        f(_session_id, "color_get_saturation", color_get_saturation);
        f(_session_id, "color_get_value", color_get_value);
        f(_session_id, "merge_color", merge_color);
        f(_session_id, "draw_set_font", draw_set_font);
        f(_session_id, "draw_get_font", draw_get_font);
        f(_session_id, "draw_set_halign", draw_set_halign);
        f(_session_id, "draw_get_halign", draw_get_halign);
        f(_session_id, "draw_set_valign", draw_set_valign);
        f(_session_id, "draw_get_valign", draw_get_valign);
        f(_session_id, "draw_text", draw_text);
        f(_session_id, "draw_text_ext", draw_text_ext);
        f(_session_id, "draw_text_transformed", draw_text_transformed);
        f(_session_id, "draw_text_ext_transformed", draw_text_ext_transformed);
        f(_session_id, "draw_text_colour", draw_text_colour);
        f(_session_id, "draw_text_ext_colour", draw_text_ext_colour);
        f(_session_id, "draw_text_transformed_colour", draw_text_transformed_colour);
        f(_session_id, "draw_text_ext_transformed_colour", draw_text_ext_transformed_colour);
        f(_session_id, "draw_text_color", draw_text_color);
        f(_session_id, "draw_text_ext_color", draw_text_ext_color);
        f(_session_id, "draw_text_transformed_color", draw_text_transformed_color);
        f(_session_id, "draw_text_ext_transformed_color", draw_text_ext_transformed_color);
        f(_session_id, "draw_point_colour", draw_point_colour);
        f(_session_id, "draw_line_colour", draw_line_colour);
        f(_session_id, "draw_line_width_colour", draw_line_width_colour);
        f(_session_id, "draw_rectangle_colour", draw_rectangle_colour);
        f(_session_id, "draw_roundrect_colour", draw_roundrect_colour);
        f(_session_id, "draw_roundrect_colour_ext", draw_roundrect_colour_ext);
        f(_session_id, "draw_triangle_colour", draw_triangle_colour);
        f(_session_id, "draw_circle_colour", draw_circle_colour);
        f(_session_id, "draw_ellipse_colour", draw_ellipse_colour);
        f(_session_id, "draw_point_color", draw_point_color);
        f(_session_id, "draw_line_color", draw_line_color);
        f(_session_id, "draw_line_width_color", draw_line_width_color);
        f(_session_id, "draw_rectangle_color", draw_rectangle_color);
        f(_session_id, "draw_roundrect_color", draw_roundrect_color);
        f(_session_id, "draw_roundrect_color_ext", draw_roundrect_color_ext);
        f(_session_id, "draw_triangle_color", draw_triangle_color);
        f(_session_id, "draw_circle_color", draw_circle_color);
        f(_session_id, "draw_ellipse_color", draw_ellipse_color);
        f(_session_id, "draw_primitive_begin", draw_primitive_begin);
        f(_session_id, "draw_vertex", draw_vertex);
        f(_session_id, "draw_vertex_colour", draw_vertex_colour);
        f(_session_id, "draw_vertex_color", draw_vertex_color);
        f(_session_id, "draw_primitive_end", draw_primitive_end);
        f(_session_id, "sprite_get_uvs", sprite_get_uvs);
        f(_session_id, "font_get_uvs", font_get_uvs);
        f(_session_id, "sprite_get_texture", sprite_get_texture);
        f(_session_id, "font_get_texture", font_get_texture);
        f(_session_id, "texture_get_width", texture_get_width);
        f(_session_id, "texture_get_height", texture_get_height);
        f(_session_id, "texture_get_uvs", texture_get_uvs);
        f(_session_id, "draw_primitive_begin_texture", draw_primitive_begin_texture);
        f(_session_id, "draw_vertex_texture", draw_vertex_texture);
        f(_session_id, "draw_vertex_texture_colour", draw_vertex_texture_colour);
        f(_session_id, "draw_vertex_texture_color", draw_vertex_texture_color);
        f(_session_id, "texture_global_scale", texture_global_scale);
        f(_session_id, "surface_create", surface_create);
        f(_session_id, "surface_create_ext", surface_create_ext);
        f(_session_id, "surface_resize", surface_resize);
        f(_session_id, "surface_free", surface_free);
        f(_session_id, "surface_exists", surface_exists);
        f(_session_id, "surface_get_width", surface_get_width);
        f(_session_id, "surface_get_height", surface_get_height);
        f(_session_id, "surface_get_texture", surface_get_texture);
        f(_session_id, "surface_set_target", surface_set_target);
        f(_session_id, "surface_set_target_ext", surface_set_target_ext);
        f(_session_id, "surface_get_target", surface_get_target);
        f(_session_id, "surface_get_target_ext", surface_get_target_ext);
        f(_session_id, "surface_reset_target", surface_reset_target);
        f(_session_id, "surface_depth_disable", surface_depth_disable);
        f(_session_id, "surface_get_depth_disable", surface_get_depth_disable);
        f(_session_id, "draw_surface", draw_surface);
        f(_session_id, "draw_surface_stretched", draw_surface_stretched);
        f(_session_id, "draw_surface_tiled", draw_surface_tiled);
        f(_session_id, "draw_surface_part", draw_surface_part);
        f(_session_id, "draw_surface_ext", draw_surface_ext);
        f(_session_id, "draw_surface_stretched_ext", draw_surface_stretched_ext);
        f(_session_id, "draw_surface_tiled_ext", draw_surface_tiled_ext);
        f(_session_id, "draw_surface_part_ext", draw_surface_part_ext);
        f(_session_id, "draw_surface_general", draw_surface_general);
        f(_session_id, "surface_getpixel", surface_getpixel);
        f(_session_id, "surface_getpixel_ext", surface_getpixel_ext);
        f(_session_id, "surface_save", surface_save);
        f(_session_id, "surface_save_part", surface_save_part);
        f(_session_id, "surface_copy", surface_copy);
        f(_session_id, "surface_copy_part", surface_copy_part);
        f(_session_id, "application_surface_draw_enable", application_surface_draw_enable);
        f(_session_id, "application_get_position", application_get_position);
        f(_session_id, "application_surface_enable", application_surface_enable);
        f(_session_id, "application_surface_is_enabled", application_surface_is_enabled);
        f(_session_id, "draw_highscore", draw_highscore);
        f(_session_id, "sprite_exists", sprite_exists);
        f(_session_id, "sprite_get_name", sprite_get_name);
        f(_session_id, "sprite_get_number", sprite_get_number);
        f(_session_id, "sprite_get_width", sprite_get_width);
        f(_session_id, "sprite_get_height", sprite_get_height);
        f(_session_id, "sprite_get_xoffset", sprite_get_xoffset);
        f(_session_id, "sprite_get_yoffset", sprite_get_yoffset);
        f(_session_id, "sprite_get_bbox_mode", sprite_get_bbox_mode);
        f(_session_id, "sprite_get_bbox_left", sprite_get_bbox_left);
        f(_session_id, "sprite_get_bbox_right", sprite_get_bbox_right);
        f(_session_id, "sprite_get_bbox_top", sprite_get_bbox_top);
        f(_session_id, "sprite_get_bbox_bottom", sprite_get_bbox_bottom);
        f(_session_id, "sprite_set_bbox_mode", sprite_set_bbox_mode);
        f(_session_id, "sprite_set_bbox", sprite_set_bbox);
        f(_session_id, "sprite_save", sprite_save);
        f(_session_id, "sprite_save_strip", sprite_save_strip);
        f(_session_id, "sprite_set_cache_size", sprite_set_cache_size);
        f(_session_id, "sprite_set_cache_size_ext", sprite_set_cache_size_ext);
        f(_session_id, "sprite_get_tpe", sprite_get_tpe);
        f(_session_id, "sprite_prefetch", sprite_prefetch);
        f(_session_id, "sprite_prefetch_multi", sprite_prefetch_multi);
        f(_session_id, "sprite_flush", sprite_flush);
        f(_session_id, "sprite_flush_multi", sprite_flush_multi);
        f(_session_id, "sprite_set_speed", sprite_set_speed);
        f(_session_id, "sprite_get_speed_type", sprite_get_speed_type);
        f(_session_id, "sprite_get_speed", sprite_get_speed);
        f(_session_id, "texture_is_ready", texture_is_ready);
        f(_session_id, "texture_prefetch", texture_prefetch);
        f(_session_id, "texture_flush", texture_flush);
        f(_session_id, "texturegroup_get_textures", texturegroup_get_textures);
        f(_session_id, "texturegroup_get_sprites", texturegroup_get_sprites);
        f(_session_id, "texturegroup_get_fonts", texturegroup_get_fonts);
        f(_session_id, "texturegroup_get_tilesets", texturegroup_get_tilesets);
        f(_session_id, "texture_debug_messages", texture_debug_messages);
        f(_session_id, "font_exists", font_exists);
        f(_session_id, "font_get_name", font_get_name);
        f(_session_id, "font_get_fontname", font_get_fontname);
        f(_session_id, "font_get_bold", font_get_bold);
        f(_session_id, "font_get_italic", font_get_italic);
        f(_session_id, "font_get_first", font_get_first);
        f(_session_id, "font_get_last", font_get_last);
        f(_session_id, "font_get_size", font_get_size);
        f(_session_id, "font_set_cache_size", font_set_cache_size);
        f(_session_id, "sprite_set_offset", sprite_set_offset);
        f(_session_id, "sprite_duplicate", sprite_duplicate);
        f(_session_id, "sprite_assign", sprite_assign);
        f(_session_id, "sprite_merge", sprite_merge);
        f(_session_id, "sprite_add", sprite_add);
        f(_session_id, "sprite_replace", sprite_replace);
        f(_session_id, "sprite_create_from_surface", sprite_create_from_surface);
        f(_session_id, "sprite_add_from_surface", sprite_add_from_surface);
        f(_session_id, "sprite_delete", sprite_delete);
        f(_session_id, "sprite_set_alpha_from_sprite", sprite_set_alpha_from_sprite);
        f(_session_id, "sprite_collision_mask", sprite_collision_mask);
        f(_session_id, "font_add_enable_aa", font_add_enable_aa);
        f(_session_id, "font_add_get_enable_aa", font_add_get_enable_aa);
        f(_session_id, "font_add", font_add);
        f(_session_id, "font_add_sprite", font_add_sprite);
        f(_session_id, "font_add_sprite_ext", font_add_sprite_ext);
        f(_session_id, "font_replace_sprite", font_replace_sprite);
        f(_session_id, "font_replace_sprite_ext", font_replace_sprite_ext);
        f(_session_id, "font_delete", font_delete);
        f(_session_id, "matrix_get", matrix_get);
        f(_session_id, "matrix_set", matrix_set);
        f(_session_id, "matrix_build_identity", matrix_build_identity);
        f(_session_id, "matrix_build", matrix_build);
        f(_session_id, "matrix_build_lookat", matrix_build_lookat);
        f(_session_id, "matrix_build_projection_ortho", matrix_build_projection_ortho);
        f(_session_id, "matrix_build_projection_perspective", matrix_build_projection_perspective);
        f(_session_id, "matrix_build_projection_perspective_fov", matrix_build_projection_perspective_fov);
        f(_session_id, "matrix_multiply", matrix_multiply);
        f(_session_id, "matrix_transform_vertex", matrix_transform_vertex);
        f(_session_id, "matrix_stack_push", matrix_stack_push);
        f(_session_id, "matrix_stack_pop", matrix_stack_pop);
        f(_session_id, "matrix_stack_set", matrix_stack_set);
        f(_session_id, "matrix_stack_clear", matrix_stack_clear);
        f(_session_id, "matrix_stack_top", matrix_stack_top);
        f(_session_id, "matrix_stack_is_empty", matrix_stack_is_empty);
        f(_session_id, "draw_enable_drawevent", draw_enable_drawevent);
        f(_session_id, "draw_enable_swf_aa", draw_enable_swf_aa);
        f(_session_id, "draw_set_swf_aa_level", draw_set_swf_aa_level);
        f(_session_id, "draw_get_swf_aa_level", draw_get_swf_aa_level);
        f(_session_id, "draw_texture_flush", draw_texture_flush);
        f(_session_id, "draw_flush", draw_flush);
        f(_session_id, "gpu_set_blendenable", gpu_set_blendenable);
        f(_session_id, "gpu_set_ztestenable", gpu_set_ztestenable);
        f(_session_id, "gpu_set_zfunc", gpu_set_zfunc);
        f(_session_id, "gpu_set_zwriteenable", gpu_set_zwriteenable);
        f(_session_id, "gpu_set_fog", gpu_set_fog);
        f(_session_id, "gpu_set_cullmode", gpu_set_cullmode);
        f(_session_id, "gpu_set_blendmode", gpu_set_blendmode);
        f(_session_id, "gpu_set_blendmode_ext", gpu_set_blendmode_ext);
        f(_session_id, "gpu_set_blendmode_ext_sepalpha", gpu_set_blendmode_ext_sepalpha);
        f(_session_id, "gpu_set_colorwriteenable", gpu_set_colorwriteenable);
        f(_session_id, "gpu_set_colourwriteenable", gpu_set_colourwriteenable);
        f(_session_id, "gpu_set_alphatestenable", gpu_set_alphatestenable);
        f(_session_id, "gpu_set_alphatestref", gpu_set_alphatestref);
        f(_session_id, "gpu_set_texfilter", gpu_set_texfilter);
        f(_session_id, "gpu_set_texfilter_ext", gpu_set_texfilter_ext);
        f(_session_id, "gpu_set_texrepeat", gpu_set_texrepeat);
        f(_session_id, "gpu_set_texrepeat_ext", gpu_set_texrepeat_ext);
        f(_session_id, "gpu_set_tex_filter", gpu_set_tex_filter);
        f(_session_id, "gpu_set_tex_filter_ext", gpu_set_tex_filter_ext);
        f(_session_id, "gpu_set_tex_repeat", gpu_set_tex_repeat);
        f(_session_id, "gpu_set_tex_repeat_ext", gpu_set_tex_repeat_ext);
        f(_session_id, "gpu_set_tex_mip_filter", gpu_set_tex_mip_filter);
        f(_session_id, "gpu_set_tex_mip_filter_ext", gpu_set_tex_mip_filter_ext);
        f(_session_id, "gpu_set_tex_mip_bias", gpu_set_tex_mip_bias);
        f(_session_id, "gpu_set_tex_mip_bias_ext", gpu_set_tex_mip_bias_ext);
        f(_session_id, "gpu_set_tex_min_mip", gpu_set_tex_min_mip);
        f(_session_id, "gpu_set_tex_min_mip_ext", gpu_set_tex_min_mip_ext);
        f(_session_id, "gpu_set_tex_max_mip", gpu_set_tex_max_mip);
        f(_session_id, "gpu_set_tex_max_mip_ext", gpu_set_tex_max_mip_ext);
        f(_session_id, "gpu_set_tex_max_aniso", gpu_set_tex_max_aniso);
        f(_session_id, "gpu_set_tex_max_aniso_ext", gpu_set_tex_max_aniso_ext);
        f(_session_id, "gpu_set_tex_mip_enable", gpu_set_tex_mip_enable);
        f(_session_id, "gpu_set_tex_mip_enable_ext", gpu_set_tex_mip_enable_ext);
        f(_session_id, "gpu_get_blendenable", gpu_get_blendenable);
        f(_session_id, "gpu_get_ztestenable", gpu_get_ztestenable);
        f(_session_id, "gpu_get_zfunc", gpu_get_zfunc);
        f(_session_id, "gpu_get_zwriteenable", gpu_get_zwriteenable);
        f(_session_id, "gpu_get_fog", gpu_get_fog);
        f(_session_id, "gpu_get_cullmode", gpu_get_cullmode);
        f(_session_id, "gpu_get_blendmode", gpu_get_blendmode);
        f(_session_id, "gpu_get_blendmode_ext", gpu_get_blendmode_ext);
        f(_session_id, "gpu_get_blendmode_ext_sepalpha", gpu_get_blendmode_ext_sepalpha);
        f(_session_id, "gpu_get_blendmode_src", gpu_get_blendmode_src);
        f(_session_id, "gpu_get_blendmode_dest", gpu_get_blendmode_dest);
        f(_session_id, "gpu_get_blendmode_srcalpha", gpu_get_blendmode_srcalpha);
        f(_session_id, "gpu_get_blendmode_destalpha", gpu_get_blendmode_destalpha);
        f(_session_id, "gpu_get_colorwriteenable", gpu_get_colorwriteenable);
        f(_session_id, "gpu_get_colourwriteenable", gpu_get_colourwriteenable);
        f(_session_id, "gpu_get_alphatestenable", gpu_get_alphatestenable);
        f(_session_id, "gpu_get_alphatestref", gpu_get_alphatestref);
        f(_session_id, "gpu_get_texfilter", gpu_get_texfilter);
        f(_session_id, "gpu_get_texfilter_ext", gpu_get_texfilter_ext);
        f(_session_id, "gpu_get_texrepeat", gpu_get_texrepeat);
        f(_session_id, "gpu_get_texrepeat_ext", gpu_get_texrepeat_ext);
        f(_session_id, "gpu_get_tex_filter", gpu_get_tex_filter);
        f(_session_id, "gpu_get_tex_filter_ext", gpu_get_tex_filter_ext);
        f(_session_id, "gpu_get_tex_repeat", gpu_get_tex_repeat);
        f(_session_id, "gpu_get_tex_repeat_ext", gpu_get_tex_repeat_ext);
        f(_session_id, "gpu_get_tex_mip_filter", gpu_get_tex_mip_filter);
        f(_session_id, "gpu_get_tex_mip_filter_ext", gpu_get_tex_mip_filter_ext);
        f(_session_id, "gpu_get_tex_mip_bias", gpu_get_tex_mip_bias);
        f(_session_id, "gpu_get_tex_mip_bias_ext", gpu_get_tex_mip_bias_ext);
        f(_session_id, "gpu_get_tex_min_mip", gpu_get_tex_min_mip);
        f(_session_id, "gpu_get_tex_min_mip_ext", gpu_get_tex_min_mip_ext);
        f(_session_id, "gpu_get_tex_max_mip", gpu_get_tex_max_mip);
        f(_session_id, "gpu_get_tex_max_mip_ext", gpu_get_tex_max_mip_ext);
        f(_session_id, "gpu_get_tex_max_aniso", gpu_get_tex_max_aniso);
        f(_session_id, "gpu_get_tex_max_aniso_ext", gpu_get_tex_max_aniso_ext);
        f(_session_id, "gpu_get_tex_mip_enable", gpu_get_tex_mip_enable);
        f(_session_id, "gpu_get_tex_mip_enable_ext", gpu_get_tex_mip_enable_ext);
        f(_session_id, "gpu_push_state", gpu_push_state);
        f(_session_id, "gpu_pop_state", gpu_pop_state);
        f(_session_id, "gpu_get_state", gpu_get_state);
        f(_session_id, "gpu_set_state", gpu_set_state);
        f(_session_id, "draw_light_define_ambient", draw_light_define_ambient);
        f(_session_id, "draw_light_define_direction", draw_light_define_direction);
        f(_session_id, "draw_light_define_point", draw_light_define_point);
        f(_session_id, "draw_light_enable", draw_light_enable);
        f(_session_id, "draw_set_lighting", draw_set_lighting);
        f(_session_id, "draw_light_get_ambient", draw_light_get_ambient);
        f(_session_id, "draw_light_get", draw_light_get);
        f(_session_id, "draw_get_lighting", draw_get_lighting);
        f(_session_id, "shader_set", shader_set);
        f(_session_id, "shader_get_name", shader_get_name);
        f(_session_id, "shader_reset", shader_reset);
        f(_session_id, "shader_current", shader_current);
        f(_session_id, "shader_is_compiled", shader_is_compiled);
        f(_session_id, "shader_get_sampler_index", shader_get_sampler_index);
        f(_session_id, "shader_get_uniform", shader_get_uniform);
        f(_session_id, "shader_set_uniform_i", shader_set_uniform_i);
        f(_session_id, "shader_set_uniform_i_array", shader_set_uniform_i_array);
        f(_session_id, "shader_set_uniform_f", shader_set_uniform_f);
        f(_session_id, "shader_set_uniform_f_array", shader_set_uniform_f_array);
        f(_session_id, "shader_set_uniform_matrix", shader_set_uniform_matrix);
        f(_session_id, "shader_set_uniform_matrix_array", shader_set_uniform_matrix_array);
        f(_session_id, "shader_enable_corner_id", shader_enable_corner_id);
        f(_session_id, "texture_set_stage", texture_set_stage);
        f(_session_id, "texture_get_texel_width", texture_get_texel_width);
        f(_session_id, "texture_get_texel_height", texture_get_texel_height);
        f(_session_id, "vertex_format_begin", vertex_format_begin);
        f(_session_id, "vertex_format_end", vertex_format_end);
        f(_session_id, "vertex_format_delete", vertex_format_delete);
        f(_session_id, "vertex_format_add_position", vertex_format_add_position);
        f(_session_id, "vertex_format_add_position_3d", vertex_format_add_position_3d);
        f(_session_id, "vertex_format_add_colour", vertex_format_add_colour);
        f(_session_id, "vertex_format_add_color", vertex_format_add_color);
        f(_session_id, "vertex_format_add_normal", vertex_format_add_normal);
        f(_session_id, "vertex_format_add_texcoord", vertex_format_add_texcoord);
        f(_session_id, "vertex_format_add_custom", vertex_format_add_custom);
        f(_session_id, "vertex_create_buffer", vertex_create_buffer);
        f(_session_id, "vertex_create_buffer_ext", vertex_create_buffer_ext);
        f(_session_id, "vertex_delete_buffer", vertex_delete_buffer);
        f(_session_id, "vertex_begin", vertex_begin);
        f(_session_id, "vertex_end", vertex_end);
        f(_session_id, "vertex_position", vertex_position);
        f(_session_id, "vertex_position_3d", vertex_position_3d);
        f(_session_id, "vertex_colour", vertex_colour);
        f(_session_id, "vertex_color", vertex_color);
        f(_session_id, "vertex_argb", vertex_argb);
        f(_session_id, "vertex_texcoord", vertex_texcoord);
        f(_session_id, "vertex_normal", vertex_normal);
        f(_session_id, "vertex_float1", vertex_float1);
        f(_session_id, "vertex_float2", vertex_float2);
        f(_session_id, "vertex_float3", vertex_float3);
        f(_session_id, "vertex_float4", vertex_float4);
        f(_session_id, "vertex_ubyte4", vertex_ubyte4);
        f(_session_id, "vertex_submit", vertex_submit);
        f(_session_id, "vertex_freeze", vertex_freeze);
        f(_session_id, "vertex_get_number", vertex_get_number);
        f(_session_id, "vertex_get_buffer_size", vertex_get_buffer_size);
        f(_session_id, "vertex_create_buffer_from_buffer", vertex_create_buffer_from_buffer);
        f(_session_id, "vertex_create_buffer_from_buffer_ext", vertex_create_buffer_from_buffer_ext);
        f(_session_id, "draw_skeleton", draw_skeleton);
        f(_session_id, "draw_skeleton_time", draw_skeleton_time);
        f(_session_id, "draw_skeleton_instance", draw_skeleton_instance);
        f(_session_id, "draw_skeleton_collision", draw_skeleton_collision);
        f(_session_id, "draw_enable_skeleton_blendmodes", draw_enable_skeleton_blendmodes);
        f(_session_id, "draw_get_enable_skeleton_blendmodes", draw_get_enable_skeleton_blendmodes);
        f(_session_id, "draw_tilemap", draw_tilemap);
        f(_session_id, "draw_tile", draw_tile);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        c(_session_id, "bboxmode_automatic", bboxmode_automatic);
        c(_session_id, "bboxmode_fullimage", bboxmode_fullimage);
        c(_session_id, "bboxmode_manual", bboxmode_manual);
        c(_session_id, "bboxkind_precise", bboxkind_precise);
        c(_session_id, "bboxkind_rectangular", bboxkind_rectangular);
        c(_session_id, "bboxkind_ellipse", bboxkind_ellipse);
        c(_session_id, "bboxkind_diamond", bboxkind_diamond);
        c(_session_id, "c_aqua", c_aqua);
        c(_session_id, "c_black", c_black);
        c(_session_id, "c_blue", c_blue);
        c(_session_id, "c_dkgray", c_dkgray);
        c(_session_id, "c_fuchsia", c_fuchsia);
        c(_session_id, "c_gray", c_gray);
        c(_session_id, "c_green", c_green);
        c(_session_id, "c_lime", c_lime);
        c(_session_id, "c_ltgray", c_ltgray);
        c(_session_id, "c_maroon", c_maroon);
        c(_session_id, "c_navy", c_navy);
        c(_session_id, "c_olive", c_olive);
        c(_session_id, "c_purple", c_purple);
        c(_session_id, "c_red", c_red);
        c(_session_id, "c_silver", c_silver);
        c(_session_id, "c_teal", c_teal);
        c(_session_id, "c_white", c_white);
        c(_session_id, "c_yellow", c_yellow);
        c(_session_id, "c_orange", c_orange);
        c(_session_id, "fa_left", fa_left);
        c(_session_id, "fa_center", fa_center);
        c(_session_id, "fa_right", fa_right);
        c(_session_id, "fa_top", fa_top);
        c(_session_id, "fa_middle", fa_middle);
        c(_session_id, "fa_bottom", fa_bottom);
        c(_session_id, "pr_pointlist", pr_pointlist);
        c(_session_id, "pr_linelist", pr_linelist);
        c(_session_id, "pr_linestrip", pr_linestrip);
        c(_session_id, "pr_trianglelist", pr_trianglelist);
        c(_session_id, "pr_trianglestrip", pr_trianglestrip);
        c(_session_id, "pr_trianglefan", pr_trianglefan);
        c(_session_id, "bm_normal", bm_normal);
        c(_session_id, "bm_add", bm_add);
        c(_session_id, "bm_max", bm_max);
        c(_session_id, "bm_subtract", bm_subtract);
        c(_session_id, "bm_zero", bm_zero);
        c(_session_id, "bm_one", bm_one);
        c(_session_id, "bm_src_colour", bm_src_colour);
        c(_session_id, "bm_inv_src_colour", bm_inv_src_colour);
        c(_session_id, "bm_src_color", bm_src_color);
        c(_session_id, "bm_inv_src_color", bm_inv_src_color);
        c(_session_id, "bm_src_alpha", bm_src_alpha);
        c(_session_id, "bm_inv_src_alpha", bm_inv_src_alpha);
        c(_session_id, "bm_dest_alpha", bm_dest_alpha);
        c(_session_id, "bm_inv_dest_alpha", bm_inv_dest_alpha);
        c(_session_id, "bm_dest_colour", bm_dest_colour);
        c(_session_id, "bm_inv_dest_colour", bm_inv_dest_colour);
        c(_session_id, "bm_dest_color", bm_dest_color);
        c(_session_id, "bm_inv_dest_color", bm_inv_dest_color);
        c(_session_id, "bm_src_alpha_sat", bm_src_alpha_sat);
        c(_session_id, "tf_point", tf_point);
        c(_session_id, "tf_linear", tf_linear);
        c(_session_id, "tf_anisotropic", tf_anisotropic);
        c(_session_id, "mip_off", mip_off);
        c(_session_id, "mip_on", mip_on);
        c(_session_id, "mip_markedonly", mip_markedonly);
        c(_session_id, "spritespeed_framespersecond", spritespeed_framespersecond);
        c(_session_id, "spritespeed_framespergameframe", spritespeed_framespergameframe);
        c(_session_id, "matrix_view", matrix_view);
        c(_session_id, "matrix_projection", matrix_projection);
        c(_session_id, "matrix_world", matrix_world);
        c(_session_id, "cmpfunc_never", cmpfunc_never);
        c(_session_id, "cmpfunc_less", cmpfunc_less);
        c(_session_id, "cmpfunc_equal", cmpfunc_equal);
        c(_session_id, "cmpfunc_lessequal", cmpfunc_lessequal);
        c(_session_id, "cmpfunc_greater", cmpfunc_greater);
        c(_session_id, "cmpfunc_notequal", cmpfunc_notequal);
        c(_session_id, "cmpfunc_greaterequal", cmpfunc_greaterequal);
        c(_session_id, "cmpfunc_always", cmpfunc_always);
        c(_session_id, "cull_noculling", cull_noculling);
        c(_session_id, "cull_clockwise", cull_clockwise);
        c(_session_id, "cull_counterclockwise", cull_counterclockwise);
        c(_session_id, "lighttype_dir", lighttype_dir);
        c(_session_id, "lighttype_point", lighttype_point);
        c(_session_id, "vertex_usage_position", vertex_usage_position);
        c(_session_id, "vertex_usage_colour", vertex_usage_colour);
        c(_session_id, "vertex_usage_color", vertex_usage_color);
        c(_session_id, "vertex_usage_normal", vertex_usage_normal);
        c(_session_id, "vertex_usage_texcoord", vertex_usage_texcoord);
        c(_session_id, "vertex_usage_blendweight", vertex_usage_blendweight);
        c(_session_id, "vertex_usage_blendindices", vertex_usage_blendindices);
        c(_session_id, "vertex_usage_psize", vertex_usage_psize);
        c(_session_id, "vertex_usage_tangent", vertex_usage_tangent);
        c(_session_id, "vertex_usage_binormal", vertex_usage_binormal);
        c(_session_id, "vertex_usage_fog", vertex_usage_fog);
        c(_session_id, "vertex_usage_depth", vertex_usage_depth);
        c(_session_id, "vertex_usage_sample", vertex_usage_sample);
        c(_session_id, "vertex_type_float1", vertex_type_float1);
        c(_session_id, "vertex_type_float2", vertex_type_float2);
        c(_session_id, "vertex_type_float3", vertex_type_float3);
        c(_session_id, "vertex_type_float4", vertex_type_float4);
        c(_session_id, "vertex_type_colour", vertex_type_colour);
        c(_session_id, "vertex_type_color", vertex_type_color);
        c(_session_id, "vertex_type_ubyte4", vertex_type_ubyte4);
    }
}

/// @desc Applies the layers interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_layers(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "layer_get_id", layer_get_id);
        f(_session_id, "layer_get_id_at_depth", layer_get_id_at_depth);
        f(_session_id, "layer_get_depth", layer_get_depth);
        f(_session_id, "layer_create", layer_create);
        f(_session_id, "layer_destroy", layer_destroy);
        f(_session_id, "layer_destroy_instances", layer_destroy_instances);
        f(_session_id, "layer_add_instance", layer_add_instance);
        f(_session_id, "layer_has_instance", layer_has_instance);
        f(_session_id, "layer_set_visible", layer_set_visible);
        f(_session_id, "layer_get_visible", layer_get_visible);
        f(_session_id, "layer_exists", layer_exists);
        f(_session_id, "layer_x", layer_x);
        f(_session_id, "layer_y", layer_y);
        f(_session_id, "layer_get_x", layer_get_x);
        f(_session_id, "layer_get_y", layer_get_y);
        f(_session_id, "layer_hspeed", layer_hspeed);
        f(_session_id, "layer_vspeed", layer_vspeed);
        f(_session_id, "layer_get_hspeed", layer_get_hspeed);
        f(_session_id, "layer_get_vspeed", layer_get_vspeed);
        f(_session_id, "layer_script_begin", layer_script_begin);
        f(_session_id, "layer_script_end", layer_script_end);
        f(_session_id, "layer_shader", layer_shader);
        f(_session_id, "layer_get_script_begin", layer_get_script_begin);
        f(_session_id, "layer_get_script_end", layer_get_script_end);
        f(_session_id, "layer_get_shader", layer_get_shader);
        f(_session_id, "layer_set_target_room", layer_set_target_room);
        f(_session_id, "layer_get_target_room", layer_get_target_room);
        f(_session_id, "layer_reset_target_room", layer_reset_target_room);
        f(_session_id, "layer_get_all", layer_get_all);
        f(_session_id, "layer_get_all_elements", layer_get_all_elements);
        f(_session_id, "layer_get_name", layer_get_name);
        f(_session_id, "layer_depth", layer_depth);
        f(_session_id, "layer_get_element_layer", layer_get_element_layer);
        f(_session_id, "layer_get_element_type", layer_get_element_type);
        f(_session_id, "layer_element_move", layer_element_move);
        f(_session_id, "layer_force_draw_depth", layer_force_draw_depth);
        f(_session_id, "layer_is_draw_depth_forced", layer_is_draw_depth_forced);
        f(_session_id, "layer_get_forced_depth", layer_get_forced_depth);
        f(_session_id, "layer_background_get_id", layer_background_get_id);
        f(_session_id, "layer_background_exists", layer_background_exists);
        f(_session_id, "layer_background_create", layer_background_create);
        f(_session_id, "layer_background_destroy", layer_background_destroy);
        f(_session_id, "layer_background_visible", layer_background_visible);
        f(_session_id, "layer_background_change", layer_background_change);
        f(_session_id, "layer_background_sprite", layer_background_sprite);
        f(_session_id, "layer_background_htiled", layer_background_htiled);
        f(_session_id, "layer_background_vtiled", layer_background_vtiled);
        f(_session_id, "layer_background_stretch", layer_background_stretch);
        f(_session_id, "layer_background_yscale", layer_background_yscale);
        f(_session_id, "layer_background_xscale", layer_background_xscale);
        f(_session_id, "layer_background_blend", layer_background_blend);
        f(_session_id, "layer_background_alpha", layer_background_alpha);
        f(_session_id, "layer_background_index", layer_background_index);
        f(_session_id, "layer_background_speed", layer_background_speed);
        f(_session_id, "layer_background_get_visible", layer_background_get_visible);
        f(_session_id, "layer_background_get_sprite", layer_background_get_sprite);
        f(_session_id, "layer_background_get_htiled", layer_background_get_htiled);
        f(_session_id, "layer_background_get_vtiled", layer_background_get_vtiled);
        f(_session_id, "layer_background_get_stretch", layer_background_get_stretch);
        f(_session_id, "layer_background_get_yscale", layer_background_get_yscale);
        f(_session_id, "layer_background_get_xscale", layer_background_get_xscale);
        f(_session_id, "layer_background_get_blend", layer_background_get_blend);
        f(_session_id, "layer_background_get_alpha", layer_background_get_alpha);
        f(_session_id, "layer_background_get_index", layer_background_get_index);
        f(_session_id, "layer_background_get_speed", layer_background_get_speed);
        f(_session_id, "layer_sprite_get_id", layer_sprite_get_id);
        f(_session_id, "layer_sprite_exists", layer_sprite_exists);
        f(_session_id, "layer_sprite_create", layer_sprite_create);
        f(_session_id, "layer_sprite_destroy", layer_sprite_destroy);
        f(_session_id, "layer_sprite_change", layer_sprite_change);
        f(_session_id, "layer_sprite_index", layer_sprite_index);
        f(_session_id, "layer_sprite_speed", layer_sprite_speed);
        f(_session_id, "layer_sprite_xscale", layer_sprite_xscale);
        f(_session_id, "layer_sprite_yscale", layer_sprite_yscale);
        f(_session_id, "layer_sprite_angle", layer_sprite_angle);
        f(_session_id, "layer_sprite_blend", layer_sprite_blend);
        f(_session_id, "layer_sprite_alpha", layer_sprite_alpha);
        f(_session_id, "layer_sprite_x", layer_sprite_x);
        f(_session_id, "layer_sprite_y", layer_sprite_y);
        f(_session_id, "layer_sprite_get_sprite", layer_sprite_get_sprite);
        f(_session_id, "layer_sprite_get_index", layer_sprite_get_index);
        f(_session_id, "layer_sprite_get_speed", layer_sprite_get_speed);
        f(_session_id, "layer_sprite_get_xscale", layer_sprite_get_xscale);
        f(_session_id, "layer_sprite_get_yscale", layer_sprite_get_yscale);
        f(_session_id, "layer_sprite_get_angle", layer_sprite_get_angle);
        f(_session_id, "layer_sprite_get_blend", layer_sprite_get_blend);
        f(_session_id, "layer_sprite_get_alpha", layer_sprite_get_alpha);
        f(_session_id, "layer_sprite_get_x", layer_sprite_get_x);
        f(_session_id, "layer_sprite_get_y", layer_sprite_get_y);
        f(_session_id, "layer_tilemap_get_id", layer_tilemap_get_id);
        f(_session_id, "layer_tilemap_exists", layer_tilemap_exists);
        f(_session_id, "layer_tilemap_create", layer_tilemap_create);
        f(_session_id, "layer_tilemap_destroy", layer_tilemap_destroy);
        f(_session_id, "tilemap_tileset", tilemap_tileset);
        f(_session_id, "tilemap_x", tilemap_x);
        f(_session_id, "tilemap_y", tilemap_y);
        f(_session_id, "tilemap_set", tilemap_set);
        f(_session_id, "tilemap_set_at_pixel", tilemap_set_at_pixel);
        f(_session_id, "tilemap_get_tileset", tilemap_get_tileset);
        f(_session_id, "tilemap_get_tile_width", tilemap_get_tile_width);
        f(_session_id, "tilemap_get_tile_height", tilemap_get_tile_height);
        f(_session_id, "tilemap_get_width", tilemap_get_width);
        f(_session_id, "tilemap_get_height", tilemap_get_height);
        f(_session_id, "tilemap_set_width", tilemap_set_width);
        f(_session_id, "tilemap_set_height", tilemap_set_height);
        f(_session_id, "tilemap_get_x", tilemap_get_x);
        f(_session_id, "tilemap_get_y", tilemap_get_y);
        f(_session_id, "tilemap_get", tilemap_get);
        f(_session_id, "tilemap_get_at_pixel", tilemap_get_at_pixel);
        f(_session_id, "tilemap_get_cell_x_at_pixel", tilemap_get_cell_x_at_pixel);
        f(_session_id, "tilemap_get_cell_y_at_pixel", tilemap_get_cell_y_at_pixel);
        f(_session_id, "tilemap_clear", tilemap_clear);
        f(_session_id, "tilemap_set_global_mask", tilemap_set_global_mask);
        f(_session_id, "tilemap_get_global_mask", tilemap_get_global_mask);
        f(_session_id, "tilemap_set_mask", tilemap_set_mask);
        f(_session_id, "tilemap_get_mask", tilemap_get_mask);
        f(_session_id, "tilemap_get_frame", tilemap_get_frame);
        f(_session_id, "tile_set_empty", tile_set_empty);
        f(_session_id, "tile_set_index", tile_set_index);
        f(_session_id, "tile_set_flip", tile_set_flip);
        f(_session_id, "tile_set_mirror", tile_set_mirror);
        f(_session_id, "tile_set_rotate", tile_set_rotate);
        f(_session_id, "tile_get_empty", tile_get_empty);
        f(_session_id, "tile_get_index", tile_get_index);
        f(_session_id, "tile_get_flip", tile_get_flip);
        f(_session_id, "tile_get_mirror", tile_get_mirror);
        f(_session_id, "tile_get_rotate", tile_get_rotate);
        f(_session_id, "layer_tile_exists", layer_tile_exists);
        f(_session_id, "layer_tile_create", layer_tile_create);
        f(_session_id, "layer_tile_destroy", layer_tile_destroy);
        f(_session_id, "layer_tile_change", layer_tile_change);
        f(_session_id, "layer_tile_xscale", layer_tile_xscale);
        f(_session_id, "layer_tile_yscale", layer_tile_yscale);
        f(_session_id, "layer_tile_blend", layer_tile_blend);
        f(_session_id, "layer_tile_alpha", layer_tile_alpha);
        f(_session_id, "layer_tile_x", layer_tile_x);
        f(_session_id, "layer_tile_y", layer_tile_y);
        f(_session_id, "layer_tile_region", layer_tile_region);
        f(_session_id, "layer_tile_visible", layer_tile_visible);
        f(_session_id, "layer_tile_get_sprite", layer_tile_get_sprite);
        f(_session_id, "layer_tile_get_xscale", layer_tile_get_xscale);
        f(_session_id, "layer_tile_get_yscale", layer_tile_get_yscale);
        f(_session_id, "layer_tile_get_blend", layer_tile_get_blend);
        f(_session_id, "layer_tile_get_alpha", layer_tile_get_alpha);
        f(_session_id, "layer_tile_get_x", layer_tile_get_x);
        f(_session_id, "layer_tile_get_y", layer_tile_get_y);
        f(_session_id, "layer_tile_get_region", layer_tile_get_region);
        f(_session_id, "layer_tile_get_visible", layer_tile_get_visible);
        f(_session_id, "layer_instance_get_instance", layer_instance_get_instance);
        f(_session_id, "layer_sequence_get_instance", layer_sequence_get_instance);
        f(_session_id, "layer_sequence_create", layer_sequence_create);
        f(_session_id, "layer_sequence_destroy", layer_sequence_destroy);
        f(_session_id, "layer_sequence_exists", layer_sequence_exists);
        f(_session_id, "layer_sequence_x", layer_sequence_x);
        f(_session_id, "layer_sequence_y", layer_sequence_y);
        f(_session_id, "layer_sequence_angle", layer_sequence_angle);
        f(_session_id, "layer_sequence_xscale", layer_sequence_xscale);
        f(_session_id, "layer_sequence_yscale", layer_sequence_yscale);
        f(_session_id, "layer_sequence_headpos", layer_sequence_headpos);
        f(_session_id, "layer_sequence_headdir", layer_sequence_headdir);
        f(_session_id, "layer_sequence_pause", layer_sequence_pause);
        f(_session_id, "layer_sequence_play", layer_sequence_play);
        f(_session_id, "layer_sequence_speedscale", layer_sequence_speedscale);
        f(_session_id, "layer_sequence_get_x", layer_sequence_get_x);
        f(_session_id, "layer_sequence_get_y", layer_sequence_get_y);
        f(_session_id, "layer_sequence_get_angle", layer_sequence_get_angle);
        f(_session_id, "layer_sequence_get_xscale", layer_sequence_get_xscale);
        f(_session_id, "layer_sequence_get_yscale", layer_sequence_get_yscale);
        f(_session_id, "layer_sequence_get_headpos", layer_sequence_get_headpos);
        f(_session_id, "layer_sequence_get_headdir", layer_sequence_get_headdir);
        f(_session_id, "layer_sequence_get_sequence", layer_sequence_get_sequence);
        f(_session_id, "layer_sequence_is_paused", layer_sequence_is_paused);
        f(_session_id, "layer_sequence_is_finished", layer_sequence_is_finished);
        f(_session_id, "layer_sequence_get_speedscale", layer_sequence_get_speedscale);
        f(_session_id, "layer_sequence_get_length", layer_sequence_get_length);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        c(_session_id, "layerelementtype_undefined", layerelementtype_undefined);
        c(_session_id, "layerelementtype_background", layerelementtype_background);
        c(_session_id, "layerelementtype_instance", layerelementtype_instance);
        c(_session_id, "layerelementtype_oldtilemap", layerelementtype_oldtilemap);
        c(_session_id, "layerelementtype_sprite", layerelementtype_sprite);
        c(_session_id, "layerelementtype_tilemap", layerelementtype_tilemap);
        c(_session_id, "layerelementtype_particlesystem", layerelementtype_particlesystem);
        c(_session_id, "layerelementtype_tile", layerelementtype_tile);
        c(_session_id, "layerelementtype_sequence", layerelementtype_sequence);
        c(_session_id, "tile_rotate", tile_rotate);
        c(_session_id, "tile_flip", tile_flip);
        c(_session_id, "tile_mirror", tile_mirror);
        c(_session_id, "tile_index_mask", tile_index_mask);
    }
}

/// @desc Applies the display interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_display(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "display_get_width", display_get_width);
        f(_session_id, "display_get_height", display_get_height);
        f(_session_id, "display_get_orientation", display_get_orientation);
        f(_session_id, "display_get_gui_width", display_get_gui_width);
        f(_session_id, "display_get_gui_height", display_get_gui_height);
        f(_session_id, "display_reset", display_reset);
        f(_session_id, "display_mouse_get_x", display_mouse_get_x);
        f(_session_id, "display_mouse_get_y", display_mouse_get_y);
        f(_session_id, "display_mouse_set", display_mouse_set);
        f(_session_id, "display_set_ui_visibility", display_set_ui_visibility);
        f(_session_id, "window_set_fullscreen", window_set_fullscreen);
        f(_session_id, "window_get_fullscreen", window_get_fullscreen);
        f(_session_id, "window_set_caption", window_set_caption);
        f(_session_id, "window_set_min_width", window_set_min_width);
        f(_session_id, "window_set_max_width", window_set_max_width);
        f(_session_id, "window_set_min_height", window_set_min_height);
        f(_session_id, "window_set_max_height", window_set_max_height);
        f(_session_id, "window_get_visible_rects", window_get_visible_rects);
        f(_session_id, "window_get_caption", window_get_caption);
        f(_session_id, "window_set_cursor", window_set_cursor);
        f(_session_id, "window_get_cursor", window_get_cursor);
        f(_session_id, "window_set_colour", window_set_colour);
        f(_session_id, "window_get_colour", window_get_colour);
        f(_session_id, "window_set_color", window_set_color);
        f(_session_id, "window_get_color", window_get_color);
        f(_session_id, "window_set_position", window_set_position);
        f(_session_id, "window_set_size", window_set_size);
        f(_session_id, "window_set_rectangle", window_set_rectangle);
        f(_session_id, "window_center", window_center);
        f(_session_id, "window_get_x", window_get_x);
        f(_session_id, "window_get_y", window_get_y);
        f(_session_id, "window_get_width", window_get_width);
        f(_session_id, "window_get_height", window_get_height);
        f(_session_id, "window_mouse_get_x", window_mouse_get_x);
        f(_session_id, "window_mouse_get_y", window_mouse_get_y);
        f(_session_id, "window_mouse_set", window_mouse_set);
        f(_session_id, "window_view_mouse_get_x", window_view_mouse_get_x);
        f(_session_id, "window_view_mouse_get_y", window_view_mouse_get_y);
        f(_session_id, "window_views_mouse_get_x", window_views_mouse_get_x);
        f(_session_id, "window_views_mouse_get_y", window_views_mouse_get_y);
        f(_session_id, "window_handle", window_handle);
        f(_session_id, "window_device", window_device);
        f(_session_id, "display_get_dpi_x", display_get_dpi_x);
        f(_session_id, "display_get_dpi_y", display_get_dpi_y);
        f(_session_id, "display_set_gui_size", display_set_gui_size);
        f(_session_id, "display_set_gui_maximise", display_set_gui_maximise);
        f(_session_id, "display_set_gui_maximize", display_set_gui_maximize);
        f(_session_id, "display_set_timing_method", display_set_timing_method);
        f(_session_id, "display_get_timing_method", display_get_timing_method);
        f(_session_id, "display_set_sleep_margin", display_set_sleep_margin);
        f(_session_id, "display_get_sleep_margin", display_get_sleep_margin);
        f(_session_id, "window_has_focus", window_has_focus);
        f(_session_id, "camera_create", camera_create);
        f(_session_id, "camera_create_view", camera_create_view);
        f(_session_id, "camera_destroy", camera_destroy);
        f(_session_id, "camera_apply", camera_apply);
        f(_session_id, "camera_get_active", camera_get_active);
        f(_session_id, "camera_get_default", camera_get_default);
        f(_session_id, "camera_set_default", camera_set_default);
        f(_session_id, "camera_set_view_mat", camera_set_view_mat);
        f(_session_id, "camera_set_proj_mat", camera_set_proj_mat);
        f(_session_id, "camera_set_update_script", camera_set_update_script);
        f(_session_id, "camera_set_begin_script", camera_set_begin_script);
        f(_session_id, "camera_set_end_script", camera_set_end_script);
        f(_session_id, "camera_set_view_pos", camera_set_view_pos);
        f(_session_id, "camera_set_view_size", camera_set_view_size);
        f(_session_id, "camera_set_view_speed", camera_set_view_speed);
        f(_session_id, "camera_set_view_border", camera_set_view_border);
        f(_session_id, "camera_set_view_angle", camera_set_view_angle);
        f(_session_id, "camera_set_view_target", camera_set_view_target);
        f(_session_id, "camera_get_view_mat", camera_get_view_mat);
        f(_session_id, "camera_get_proj_mat", camera_get_proj_mat);
        f(_session_id, "camera_get_update_script", camera_get_update_script);
        f(_session_id, "camera_get_begin_script", camera_get_begin_script);
        f(_session_id, "camera_get_end_script", camera_get_end_script);
        f(_session_id, "camera_get_view_x", camera_get_view_x);
        f(_session_id, "camera_get_view_y", camera_get_view_y);
        f(_session_id, "camera_get_view_width", camera_get_view_width);
        f(_session_id, "camera_get_view_height", camera_get_view_height);
        f(_session_id, "camera_get_view_speed_x", camera_get_view_speed_x);
        f(_session_id, "camera_get_view_speed_y", camera_get_view_speed_y);
        f(_session_id, "camera_get_view_border_x", camera_get_view_border_x);
        f(_session_id, "camera_get_view_border_y", camera_get_view_border_y);
        f(_session_id, "camera_get_view_angle", camera_get_view_angle);
        f(_session_id, "camera_get_view_target", camera_get_view_target);
        f(_session_id, "view_get_camera", view_get_camera);
        f(_session_id, "view_get_visible", view_get_visible);
        f(_session_id, "view_get_xport", view_get_xport);
        f(_session_id, "view_get_yport", view_get_yport);
        f(_session_id, "view_get_wport", view_get_wport);
        f(_session_id, "view_get_hport", view_get_hport);
        f(_session_id, "view_get_surface_id", view_get_surface_id);
        f(_session_id, "view_set_camera", view_set_camera);
        f(_session_id, "view_set_visible", view_set_visible);
        f(_session_id, "view_set_xport", view_set_xport);
        f(_session_id, "view_set_yport", view_set_yport);
        f(_session_id, "view_set_wport", view_set_wport);
        f(_session_id, "view_set_hport", view_set_hport);
        f(_session_id, "view_set_surface_id", view_set_surface_id);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        c(_session_id, "cr_default", cr_default);
        c(_session_id, "cr_none", cr_none);
        c(_session_id, "cr_arrow", cr_arrow);
        c(_session_id, "cr_cross", cr_cross);
        c(_session_id, "cr_beam", cr_beam);
        c(_session_id, "cr_size_nesw", cr_size_nesw);
        c(_session_id, "cr_size_ns", cr_size_ns);
        c(_session_id, "cr_size_nwse", cr_size_nwse);
        c(_session_id, "cr_size_we", cr_size_we);
        c(_session_id, "cr_uparrow", cr_uparrow);
        c(_session_id, "cr_hourglass", cr_hourglass);
        c(_session_id, "cr_drag", cr_drag);
        c(_session_id, "cr_appstart", cr_appstart);
        c(_session_id, "cr_handpoint", cr_handpoint);
        c(_session_id, "cr_size_all", cr_size_all);
        c(_session_id, "display_landscape", display_landscape);
        c(_session_id, "display_landscape_flipped", display_landscape_flipped);
        c(_session_id, "display_portrait", display_portrait);
        c(_session_id, "display_portrait_flipped", display_portrait_flipped);
        c(_session_id, "tm_sleep", tm_sleep);
        c(_session_id, "tm_countvsyncs", tm_countvsyncs);
    }
}

/// @desc Applies the debug interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_debug(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "show_debug_message", show_debug_message);
        f(_session_id, "show_debug_overlay", show_debug_overlay);
        f(_session_id, "debug_event", debug_event);
        f(_session_id, "debug_get_callstack", debug_get_callstack);
        f(_session_id, "show_message", show_message);
        f(_session_id, "show_message_async", show_message_async);
        f(_session_id, "show_question", show_question);
        f(_session_id, "show_question_async", show_question_async);
        f(_session_id, "show_error", show_error);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        
    }
}

/// @desc Applies the files interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_files(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "screen_save", screen_save);
        f(_session_id, "screen_save_part", screen_save_part);
        f(_session_id, "gif_open", gif_open);
        f(_session_id, "gif_add_surface", gif_add_surface);
        f(_session_id, "gif_save", gif_save);
        f(_session_id, "gif_save_buffer", gif_save_buffer);
        f(_session_id, "file_text_open_from_string", file_text_open_from_string);
        f(_session_id, "file_text_open_read", file_text_open_read);
        f(_session_id, "file_text_open_write", file_text_open_write);
        f(_session_id, "file_text_open_append", file_text_open_append);
        f(_session_id, "file_text_close", file_text_close);
        f(_session_id, "file_text_write_string", file_text_write_string);
        f(_session_id, "file_text_write_real", file_text_write_real);
        f(_session_id, "file_text_writeln", file_text_writeln);
        f(_session_id, "file_text_read_string", file_text_read_string);
        f(_session_id, "file_text_read_real", file_text_read_real);
        f(_session_id, "file_text_readln", file_text_readln);
        f(_session_id, "file_text_eof", file_text_eof);
        f(_session_id, "file_text_eoln", file_text_eoln);
        f(_session_id, "file_exists", file_exists);
        f(_session_id, "file_delete", file_delete);
        f(_session_id, "file_rename", file_rename);
        f(_session_id, "file_copy", file_copy);
        f(_session_id, "file_find_first", file_find_first);
        f(_session_id, "file_find_next", file_find_next);
        f(_session_id, "file_find_close", file_find_close);
        f(_session_id, "file_attributes", file_attributes);
        f(_session_id, "file_bin_open", file_bin_open);
        f(_session_id, "file_bin_rewrite", file_bin_rewrite);
        f(_session_id, "file_bin_close", file_bin_close);
        f(_session_id, "file_bin_position", file_bin_position);
        f(_session_id, "file_bin_size", file_bin_size);
        f(_session_id, "file_bin_seek", file_bin_seek);
        f(_session_id, "file_bin_write_byte", file_bin_write_byte);
        f(_session_id, "file_bin_read_byte", file_bin_read_byte);
        f(_session_id, "parameter_count", parameter_count);
        f(_session_id, "parameter_string", parameter_string);
        f(_session_id, "ini_open_from_string", ini_open_from_string);
        f(_session_id, "ini_open", ini_open);
        f(_session_id, "ini_close", ini_close);
        f(_session_id, "ini_read_string", ini_read_string);
        f(_session_id, "ini_read_real", ini_read_real);
        f(_session_id, "ini_write_string", ini_write_string);
        f(_session_id, "ini_write_real", ini_write_real);
        f(_session_id, "ini_key_exists", ini_key_exists);
        f(_session_id, "ini_section_exists", ini_section_exists);
        f(_session_id, "ini_key_delete", ini_key_delete);
        f(_session_id, "ini_section_delete", ini_section_delete);
        f(_session_id, "cloud_file_save", cloud_file_save);
        f(_session_id, "cloud_string_save", cloud_string_save);
        f(_session_id, "cloud_synchronise", cloud_synchronise);
        f(_session_id, "http_get", http_get);
        f(_session_id, "http_get_file", http_get_file);
        f(_session_id, "http_post_string", http_post_string);
        f(_session_id, "http_request", http_request);
        f(_session_id, "http_get_request_crossorigin", http_get_request_crossorigin);
        f(_session_id, "http_set_request_crossorigin", http_set_request_crossorigin);
        f(_session_id, "json_encode", json_encode);
        f(_session_id, "json_decode", json_decode);
        f(_session_id, "json_stringify", json_stringify);
        f(_session_id, "json_parse", json_parse);
        f(_session_id, "zip_unzip", zip_unzip);
        f(_session_id, "load_csv", load_csv);
        f(_session_id, "base64_encode", base64_encode);
        f(_session_id, "base64_decode", base64_decode);
        f(_session_id, "md5_string_unicode", md5_string_unicode);
        f(_session_id, "md5_string_utf8", md5_string_utf8);
        f(_session_id, "md5_file", md5_file);
        f(_session_id, "sha1_string_unicode", sha1_string_unicode);
        f(_session_id, "sha1_string_utf8", sha1_string_utf8);
        f(_session_id, "sha1_file", sha1_file);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        c(_session_id, "fa_readonly", fa_readonly);
        c(_session_id, "fa_hidden", fa_hidden);
        c(_session_id, "fa_sysfile", fa_sysfile);
        c(_session_id, "fa_volumeid", fa_volumeid);
        c(_session_id, "fa_directory", fa_directory);
        c(_session_id, "fa_archive", fa_archive);
    }
}

/// @desc Applies the particles interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_particles(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "effect_create_below", effect_create_below);
        f(_session_id, "effect_create_above", effect_create_above);
        f(_session_id, "effect_clear", effect_clear);
        f(_session_id, "part_type_create", part_type_create);
        f(_session_id, "part_type_destroy", part_type_destroy);
        f(_session_id, "part_type_exists", part_type_exists);
        f(_session_id, "part_type_clear", part_type_clear);
        f(_session_id, "part_type_shape", part_type_shape);
        f(_session_id, "part_type_sprite", part_type_sprite);
        f(_session_id, "part_type_size", part_type_size);
        f(_session_id, "part_type_scale", part_type_scale);
        f(_session_id, "part_type_orientation", part_type_orientation);
        f(_session_id, "part_type_life", part_type_life);
        f(_session_id, "part_type_step", part_type_step);
        f(_session_id, "part_type_death", part_type_death);
        f(_session_id, "part_type_speed", part_type_speed);
        f(_session_id, "part_type_direction", part_type_direction);
        f(_session_id, "part_type_gravity", part_type_gravity);
        f(_session_id, "part_type_colour1", part_type_colour1);
        f(_session_id, "part_type_colour2", part_type_colour2);
        f(_session_id, "part_type_colour3", part_type_colour3);
        f(_session_id, "part_type_colour_mix", part_type_colour_mix);
        f(_session_id, "part_type_colour_rgb", part_type_colour_rgb);
        f(_session_id, "part_type_colour_hsv", part_type_colour_hsv);
        f(_session_id, "part_type_color1", part_type_color1);
        f(_session_id, "part_type_color2", part_type_color2);
        f(_session_id, "part_type_color3", part_type_color3);
        f(_session_id, "part_type_color_mix", part_type_color_mix);
        f(_session_id, "part_type_color_rgb", part_type_color_rgb);
        f(_session_id, "part_type_color_hsv", part_type_color_hsv);
        f(_session_id, "part_type_alpha1", part_type_alpha1);
        f(_session_id, "part_type_alpha2", part_type_alpha2);
        f(_session_id, "part_type_alpha3", part_type_alpha3);
        f(_session_id, "part_type_blend", part_type_blend);
        f(_session_id, "part_system_create", part_system_create);
        f(_session_id, "part_system_create_layer", part_system_create_layer);
        f(_session_id, "part_system_destroy", part_system_destroy);
        f(_session_id, "part_system_exists", part_system_exists);
        f(_session_id, "part_system_clear", part_system_clear);
        f(_session_id, "part_system_draw_order", part_system_draw_order);
        f(_session_id, "part_system_depth", part_system_depth);
        f(_session_id, "part_system_position", part_system_position);
        f(_session_id, "part_system_automatic_update", part_system_automatic_update);
        f(_session_id, "part_system_automatic_draw", part_system_automatic_draw);
        f(_session_id, "part_system_update", part_system_update);
        f(_session_id, "part_system_drawit", part_system_drawit);
        f(_session_id, "part_system_get_layer", part_system_get_layer);
        f(_session_id, "part_system_layer", part_system_layer);
        f(_session_id, "part_particles_create", part_particles_create);
        f(_session_id, "part_particles_create_colour", part_particles_create_colour);
        f(_session_id, "part_particles_create_color", part_particles_create_color);
        f(_session_id, "part_particles_clear", part_particles_clear);
        f(_session_id, "part_particles_count", part_particles_count);
        f(_session_id, "part_emitter_create", part_emitter_create);
        f(_session_id, "part_emitter_destroy", part_emitter_destroy);
        f(_session_id, "part_emitter_destroy_all", part_emitter_destroy_all);
        f(_session_id, "part_emitter_exists", part_emitter_exists);
        f(_session_id, "part_emitter_clear", part_emitter_clear);
        f(_session_id, "part_emitter_region", part_emitter_region);
        f(_session_id, "part_emitter_burst", part_emitter_burst);
        f(_session_id, "part_emitter_stream", part_emitter_stream);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        c(_session_id, "ef_explosion", ef_explosion);
        c(_session_id, "ef_ring", ef_ring);
        c(_session_id, "ef_ellipse", ef_ellipse);
        c(_session_id, "ef_firework", ef_firework);
        c(_session_id, "ef_smoke", ef_smoke);
        c(_session_id, "ef_smokeup", ef_smokeup);
        c(_session_id, "ef_star", ef_star);
        c(_session_id, "ef_spark", ef_spark);
        c(_session_id, "ef_flare", ef_flare);
        c(_session_id, "ef_cloud", ef_cloud);
        c(_session_id, "ef_rain", ef_rain);
        c(_session_id, "ef_snow", ef_snow);
        c(_session_id, "pt_shape_pixel", pt_shape_pixel);
        c(_session_id, "pt_shape_disk", pt_shape_disk);
        c(_session_id, "pt_shape_square", pt_shape_square);
        c(_session_id, "pt_shape_line", pt_shape_line);
        c(_session_id, "pt_shape_star", pt_shape_star);
        c(_session_id, "pt_shape_circle", pt_shape_circle);
        c(_session_id, "pt_shape_ring", pt_shape_ring);
        c(_session_id, "pt_shape_sphere", pt_shape_sphere);
        c(_session_id, "pt_shape_flare", pt_shape_flare);
        c(_session_id, "pt_shape_spark", pt_shape_spark);
        c(_session_id, "pt_shape_explosion", pt_shape_explosion);
        c(_session_id, "pt_shape_cloud", pt_shape_cloud);
        c(_session_id, "pt_shape_smoke", pt_shape_smoke);
        c(_session_id, "pt_shape_snow", pt_shape_snow);
        c(_session_id, "ps_distr_linear", ps_distr_linear);
        c(_session_id, "ps_distr_gaussian", ps_distr_gaussian);
        c(_session_id, "ps_distr_invgaussian", ps_distr_invgaussian);
        c(_session_id, "ps_shape_rectangle", ps_shape_rectangle);
        c(_session_id, "ps_shape_ellipse", ps_shape_ellipse);
        c(_session_id, "ps_shape_diamond", ps_shape_diamond);
        c(_session_id, "ps_shape_line", ps_shape_line);
    }
}

/// @desc Applies the device interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
/// @param {real} [mode] Whether to include functions, constants, or both.
function catspeak_ext_session_add_gml_device(_session_id, _mode) {
    if (_mode == undefined) {
        _mode = CATSPEAK_EXT_GML_ALL;
    }
    if (_mode & CATSPEAK_EXT_GML_FUNCTIONS) {
        var f = catspeak_session_add_function;
        f(_session_id, "clipboard_has_text", clipboard_has_text);
        f(_session_id, "clipboard_set_text", clipboard_set_text);
        f(_session_id, "clipboard_get_text", clipboard_get_text);
        f(_session_id, "date_current_datetime", date_current_datetime);
        f(_session_id, "date_create_datetime", date_create_datetime);
        f(_session_id, "date_valid_datetime", date_valid_datetime);
        f(_session_id, "date_inc_year", date_inc_year);
        f(_session_id, "date_inc_month", date_inc_month);
        f(_session_id, "date_inc_week", date_inc_week);
        f(_session_id, "date_inc_day", date_inc_day);
        f(_session_id, "date_inc_hour", date_inc_hour);
        f(_session_id, "date_inc_minute", date_inc_minute);
        f(_session_id, "date_inc_second", date_inc_second);
        f(_session_id, "date_get_year", date_get_year);
        f(_session_id, "date_get_month", date_get_month);
        f(_session_id, "date_get_week", date_get_week);
        f(_session_id, "date_get_day", date_get_day);
        f(_session_id, "date_get_hour", date_get_hour);
        f(_session_id, "date_get_minute", date_get_minute);
        f(_session_id, "date_get_second", date_get_second);
        f(_session_id, "date_get_weekday", date_get_weekday);
        f(_session_id, "date_get_day_of_year", date_get_day_of_year);
        f(_session_id, "date_get_hour_of_year", date_get_hour_of_year);
        f(_session_id, "date_get_minute_of_year", date_get_minute_of_year);
        f(_session_id, "date_get_second_of_year", date_get_second_of_year);
        f(_session_id, "date_year_span", date_year_span);
        f(_session_id, "date_month_span", date_month_span);
        f(_session_id, "date_week_span", date_week_span);
        f(_session_id, "date_day_span", date_day_span);
        f(_session_id, "date_hour_span", date_hour_span);
        f(_session_id, "date_minute_span", date_minute_span);
        f(_session_id, "date_second_span", date_second_span);
        f(_session_id, "date_compare_datetime", date_compare_datetime);
        f(_session_id, "date_compare_date", date_compare_date);
        f(_session_id, "date_compare_time", date_compare_time);
        f(_session_id, "date_date_of", date_date_of);
        f(_session_id, "date_time_of", date_time_of);
        f(_session_id, "date_datetime_string", date_datetime_string);
        f(_session_id, "date_date_string", date_date_string);
        f(_session_id, "date_time_string", date_time_string);
        f(_session_id, "date_days_in_month", date_days_in_month);
        f(_session_id, "date_days_in_year", date_days_in_year);
        f(_session_id, "date_leap_year", date_leap_year);
        f(_session_id, "date_is_today", date_is_today);
        f(_session_id, "date_set_timezone", date_set_timezone);
        f(_session_id, "date_get_timezone", date_get_timezone);
        f(_session_id, "browser_input_capture", browser_input_capture);
        f(_session_id, "os_get_config", os_get_config);
        f(_session_id, "os_get_info", os_get_info);
        f(_session_id, "os_get_language", os_get_language);
        f(_session_id, "os_get_region", os_get_region);
        f(_session_id, "os_check_permission", os_check_permission);
        f(_session_id, "os_request_permission", os_request_permission);
        f(_session_id, "os_lock_orientation", os_lock_orientation);
        f(_session_id, "os_is_paused", os_is_paused);
        f(_session_id, "code_is_compiled", code_is_compiled);
        f(_session_id, "os_is_network_connected", os_is_network_connected);
        f(_session_id, "os_powersave_enable", os_powersave_enable);
    }
    if (_mode & CATSPEAK_EXT_GML_CONSTANTS) {
        var c = catspeak_session_add_constant;
        c(_session_id, "GM_build_date", GM_build_date);
        c(_session_id, "GM_version", GM_version);
        c(_session_id, "GM_runtime_version", GM_runtime_version);
        c(_session_id, "timezone_local", timezone_local);
        c(_session_id, "timezone_utc", timezone_utc);
        c(_session_id, "os_windows", os_windows);
        c(_session_id, "os_macosx", os_macosx);
        c(_session_id, "os_ios", os_ios);
        c(_session_id, "os_android", os_android);
        c(_session_id, "os_linux", os_linux);
        c(_session_id, "os_unknown", os_unknown);
        c(_session_id, "os_winphone", os_winphone);
        c(_session_id, "os_win8native", os_win8native);
        c(_session_id, "os_psvita", os_psvita);
        c(_session_id, "os_ps4", os_ps4);
        c(_session_id, "os_xboxone", os_xboxone);
        c(_session_id, "os_ps3", os_ps3);
        c(_session_id, "os_uwp", os_uwp);
        c(_session_id, "os_tvos", os_tvos);
        c(_session_id, "os_switch", os_switch);
        c(_session_id, "browser_not_a_browser", browser_not_a_browser);
        c(_session_id, "browser_unknown", browser_unknown);
        c(_session_id, "browser_ie", browser_ie);
        c(_session_id, "browser_firefox", browser_firefox);
        c(_session_id, "browser_chrome", browser_chrome);
        c(_session_id, "browser_safari", browser_safari);
        c(_session_id, "browser_safari_mobile", browser_safari_mobile);
        c(_session_id, "browser_opera", browser_opera);
        c(_session_id, "browser_tizen", browser_tizen);
        c(_session_id, "browser_edge", browser_edge);
        c(_session_id, "browser_windows_store", browser_windows_store);
        c(_session_id, "browser_ie_mobile", browser_ie_mobile);
        c(_session_id, "device_ios_unknown", device_ios_unknown);
        c(_session_id, "device_ios_iphone", device_ios_iphone);
        c(_session_id, "device_ios_iphone_retina", device_ios_iphone_retina);
        c(_session_id, "device_ios_ipad", device_ios_ipad);
        c(_session_id, "device_ios_ipad_retina", device_ios_ipad_retina);
        c(_session_id, "device_ios_iphone5", device_ios_iphone5);
        c(_session_id, "device_ios_iphone6", device_ios_iphone6);
        c(_session_id, "device_ios_iphone6plus", device_ios_iphone6plus);
        c(_session_id, "device_emulator", device_emulator);
        c(_session_id, "device_tablet", device_tablet);
        c(_session_id, "os_permission_denied_dont_request", os_permission_denied_dont_request);
        c(_session_id, "os_permission_denied", os_permission_denied);
        c(_session_id, "os_permission_granted", os_permission_granted);
    }
}

