/* Catspeak GML Interface
 * ----------------------
 * Kat @katsaii
 */

/// @desc Applies a GML interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
function catspeak_ext_session_add_gml_operators(_class) {
    var f = catspeak_session_add_function;
    var c = catspeak_session_add_constant;
    f("+", function(_l, _r) { return _l + _r; });
    f("-", function(_l, _r) { return _r == undefined ? -_l : _l - _r; });
    f("*", function(_l, _r) { return _l * _r; });
    f("/", function(_l, _r) { return _l / _r; });
    f("%", function(_l, _r) { return _l % _r; });
    f("div", function(_l, _r) { return _l div _r; });
    f("|", function(_l, _r) { return _l | _r; });
    f("&", function(_l, _r) { return _l & _r; });
    f("^", function(_l, _r) { return _l ^ _r; });
    f("~", function(_x) { return ~_x; });
    f("<<", function(_l, _r) { return _l << _r; });
    f(">>", function(_l, _r) { return _l >> _r; });
    f("||", function(_l, _r) { return _l || _r; });
    f("&&", function(_l, _r) { return _l && _r; });
    f("^^", function(_l, _r) { return _l ^^ _r; });
    f("!", function(_x) { return !_x; });
    f("==", function(_l, _r) { return _l == _r; });
    f("!=", function(_l, _r) { return _l != _r; });
    f(">=", function(_l, _r) { return _l >= _r; });
    f("<=", function(_l, _r) { return _l <= _r; });
    f(">", function(_l, _r) { return _l > _r; });
    f("<", function(_l, _r) { return _l < _r; });
    f("!!", function(_x) { return is_numeric(_x) && _x; });
}

/// @desc Applies a GML interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
function catspeak_ext_session_add_gml_instances(_class) {
    var f = catspeak_session_add_function;
    var c = catspeak_session_add_constant;
    c("all", all);
    c("noone", noone);
    c("global", global);
    c("phy_joint_anchor_1_x", phy_joint_anchor_1_x);
    c("phy_joint_anchor_1_y", phy_joint_anchor_1_y);
    c("phy_joint_anchor_2_x", phy_joint_anchor_2_x);
    c("phy_joint_anchor_2_y", phy_joint_anchor_2_y);
    c("phy_joint_reaction_force_x", phy_joint_reaction_force_x);
    c("phy_joint_reaction_force_y", phy_joint_reaction_force_y);
    c("phy_joint_reaction_torque", phy_joint_reaction_torque);
    c("phy_joint_motor_speed", phy_joint_motor_speed);
    c("phy_joint_angle", phy_joint_angle);
    c("phy_joint_motor_torque", phy_joint_motor_torque);
    c("phy_joint_max_motor_torque", phy_joint_max_motor_torque);
    c("phy_joint_translation", phy_joint_translation);
    c("phy_joint_speed", phy_joint_speed);
    c("phy_joint_motor_force", phy_joint_motor_force);
    c("phy_joint_max_motor_force", phy_joint_max_motor_force);
    c("phy_joint_length_1", phy_joint_length_1);
    c("phy_joint_length_2", phy_joint_length_2);
    c("phy_joint_damping_ratio", phy_joint_damping_ratio);
    c("phy_joint_frequency", phy_joint_frequency);
    c("phy_joint_lower_angle_limit", phy_joint_lower_angle_limit);
    c("phy_joint_upper_angle_limit", phy_joint_upper_angle_limit);
    c("phy_joint_angle_limits", phy_joint_angle_limits);
    c("phy_joint_max_length", phy_joint_max_length);
    c("phy_joint_max_torque", phy_joint_max_torque);
    c("phy_joint_max_force", phy_joint_max_force);
    c("phy_debug_render_aabb", phy_debug_render_aabb);
    c("phy_debug_render_collision_pairs", phy_debug_render_collision_pairs);
    c("phy_debug_render_coms", phy_debug_render_coms);
    c("phy_debug_render_core_shapes", phy_debug_render_core_shapes);
    c("phy_debug_render_joints", phy_debug_render_joints);
    c("phy_debug_render_obb", phy_debug_render_obb);
    c("phy_debug_render_shapes", phy_debug_render_shapes);
    c("phy_particle_flag_water", phy_particle_flag_water);
    c("phy_particle_flag_zombie", phy_particle_flag_zombie);
    c("phy_particle_flag_wall", phy_particle_flag_wall);
    c("phy_particle_flag_spring", phy_particle_flag_spring);
    c("phy_particle_flag_elastic", phy_particle_flag_elastic);
    c("phy_particle_flag_viscous", phy_particle_flag_viscous);
    c("phy_particle_flag_powder", phy_particle_flag_powder);
    c("phy_particle_flag_tensile", phy_particle_flag_tensile);
    c("phy_particle_flag_colourmixing", phy_particle_flag_colourmixing);
    c("phy_particle_flag_colormixing", phy_particle_flag_colormixing);
    c("phy_particle_group_flag_solid", phy_particle_group_flag_solid);
    c("phy_particle_group_flag_rigid", phy_particle_group_flag_rigid);
    c("phy_particle_data_flag_typeflags", phy_particle_data_flag_typeflags);
    c("phy_particle_data_flag_position", phy_particle_data_flag_position);
    c("phy_particle_data_flag_velocity", phy_particle_data_flag_velocity);
    c("phy_particle_data_flag_colour", phy_particle_data_flag_colour);
    c("phy_particle_data_flag_category", phy_particle_data_flag_category);
    f("point_distance_3d", point_distance_3d);
    f("point_distance", point_distance);
    f("point_direction", point_direction);
    f("motion_set", motion_set);
    f("motion_add", motion_add);
    f("place_free", place_free);
    f("place_empty", place_empty);
    f("place_meeting", place_meeting);
    f("place_snapped", place_snapped);
    f("move_random", move_random);
    f("move_snap", move_snap);
    f("move_towards_point", move_towards_point);
    f("move_contact_solid", move_contact_solid);
    f("move_contact_all", move_contact_all);
    f("move_outside_solid", move_outside_solid);
    f("move_outside_all", move_outside_all);
    f("move_bounce_solid", move_bounce_solid);
    f("move_bounce_all", move_bounce_all);
    f("move_wrap", move_wrap);
    f("distance_to_point", distance_to_point);
    f("distance_to_object", distance_to_object);
    f("position_empty", position_empty);
    f("position_meeting", position_meeting);
    f("collision_point", collision_point);
    f("collision_rectangle", collision_rectangle);
    f("collision_circle", collision_circle);
    f("collision_ellipse", collision_ellipse);
    f("collision_line", collision_line);
    f("collision_point_list", collision_point_list);
    f("collision_rectangle_list", collision_rectangle_list);
    f("collision_circle_list", collision_circle_list);
    f("collision_ellipse_list", collision_ellipse_list);
    f("collision_line_list", collision_line_list);
    f("instance_position_list", instance_position_list);
    f("instance_place_list", instance_place_list);
    f("point_in_rectangle", point_in_rectangle);
    f("point_in_triangle", point_in_triangle);
    f("point_in_circle", point_in_circle);
    f("rectangle_in_rectangle", rectangle_in_rectangle);
    f("rectangle_in_triangle", rectangle_in_triangle);
    f("rectangle_in_circle", rectangle_in_circle);
    f("instance_find", instance_find);
    f("instance_exists", instance_exists);
    f("instance_number", instance_number);
    f("instance_position", instance_position);
    f("instance_nearest", instance_nearest);
    f("instance_furthest", instance_furthest);
    f("instance_place", instance_place);
    f("instance_create_depth", instance_create_depth);
    f("instance_create_layer", instance_create_layer);
    f("instance_copy", instance_copy);
    f("instance_change", instance_change);
    f("instance_destroy", instance_destroy);
    f("position_destroy", position_destroy);
    f("position_change", position_change);
    f("instance_id_get", instance_id_get);
    f("instance_deactivate_all", instance_deactivate_all);
    f("instance_deactivate_object", instance_deactivate_object);
    f("instance_deactivate_region", instance_deactivate_region);
    f("instance_activate_all", instance_activate_all);
    f("instance_activate_object", instance_activate_object);
    f("instance_activate_region", instance_activate_region);
    f("object_exists", object_exists);
    f("object_get_name", object_get_name);
    f("object_get_sprite", object_get_sprite);
    f("object_get_solid", object_get_solid);
    f("object_get_visible", object_get_visible);
    f("object_get_persistent", object_get_persistent);
    f("object_get_mask", object_get_mask);
    f("object_get_parent", object_get_parent);
    f("object_get_physics", object_get_physics);
    f("object_is_ancestor", object_is_ancestor);
    f("object_set_sprite", object_set_sprite);
    f("object_set_solid", object_set_solid);
    f("object_set_visible", object_set_visible);
    f("object_set_persistent", object_set_persistent);
    f("object_set_mask", object_set_mask);
    f("physics_world_create", physics_world_create);
    f("physics_world_gravity", physics_world_gravity);
    f("physics_world_update_speed", physics_world_update_speed);
    f("physics_world_update_iterations", physics_world_update_iterations);
    f("physics_world_draw_debug", physics_world_draw_debug);
    f("physics_pause_enable", physics_pause_enable);
    f("physics_fixture_create", physics_fixture_create);
    f("physics_fixture_set_kinematic", physics_fixture_set_kinematic);
    f("physics_fixture_set_density", physics_fixture_set_density);
    f("physics_fixture_set_awake", physics_fixture_set_awake);
    f("physics_fixture_set_restitution", physics_fixture_set_restitution);
    f("physics_fixture_set_friction", physics_fixture_set_friction);
    f("physics_fixture_set_collision_group", physics_fixture_set_collision_group);
    f("physics_fixture_set_sensor", physics_fixture_set_sensor);
    f("physics_fixture_set_linear_damping", physics_fixture_set_linear_damping);
    f("physics_fixture_set_angular_damping", physics_fixture_set_angular_damping);
    f("physics_fixture_set_circle_shape", physics_fixture_set_circle_shape);
    f("physics_fixture_set_box_shape", physics_fixture_set_box_shape);
    f("physics_fixture_set_edge_shape", physics_fixture_set_edge_shape);
    f("physics_fixture_set_polygon_shape", physics_fixture_set_polygon_shape);
    f("physics_fixture_set_chain_shape", physics_fixture_set_chain_shape);
    f("physics_fixture_add_point", physics_fixture_add_point);
    f("physics_fixture_bind", physics_fixture_bind);
    f("physics_fixture_bind_ext", physics_fixture_bind_ext);
    f("physics_fixture_delete", physics_fixture_delete);
    f("physics_apply_force", physics_apply_force);
    f("physics_apply_impulse", physics_apply_impulse);
    f("physics_apply_angular_impulse", physics_apply_angular_impulse);
    f("physics_apply_local_force", physics_apply_local_force);
    f("physics_apply_local_impulse", physics_apply_local_impulse);
    f("physics_apply_torque", physics_apply_torque);
    f("physics_mass_properties", physics_mass_properties);
    f("physics_draw_debug", physics_draw_debug);
    f("physics_test_overlap", physics_test_overlap);
    f("physics_remove_fixture", physics_remove_fixture);
    f("physics_set_friction", physics_set_friction);
    f("physics_set_density", physics_set_density);
    f("physics_set_restitution", physics_set_restitution);
    f("physics_get_friction", physics_get_friction);
    f("physics_get_density", physics_get_density);
    f("physics_get_restitution", physics_get_restitution);
    f("physics_joint_distance_create", physics_joint_distance_create);
    f("physics_joint_rope_create", physics_joint_rope_create);
    f("physics_joint_revolute_create", physics_joint_revolute_create);
    f("physics_joint_prismatic_create", physics_joint_prismatic_create);
    f("physics_joint_pulley_create", physics_joint_pulley_create);
    f("physics_joint_wheel_create", physics_joint_wheel_create);
    f("physics_joint_weld_create", physics_joint_weld_create);
    f("physics_joint_friction_create", physics_joint_friction_create);
    f("physics_joint_gear_create", physics_joint_gear_create);
    f("physics_joint_enable_motor", physics_joint_enable_motor);
    f("physics_joint_get_value", physics_joint_get_value);
    f("physics_joint_set_value", physics_joint_set_value);
    f("physics_joint_delete", physics_joint_delete);
    f("physics_particle_create", physics_particle_create);
    f("physics_particle_delete", physics_particle_delete);
    f("physics_particle_delete_region_circle", physics_particle_delete_region_circle);
    f("physics_particle_delete_region_box", physics_particle_delete_region_box);
    f("physics_particle_delete_region_poly", physics_particle_delete_region_poly);
    f("physics_particle_set_flags", physics_particle_set_flags);
    f("physics_particle_set_category_flags", physics_particle_set_category_flags);
    f("physics_particle_draw", physics_particle_draw);
    f("physics_particle_draw_ext", physics_particle_draw_ext);
    f("physics_particle_count", physics_particle_count);
    f("physics_particle_get_data", physics_particle_get_data);
    f("physics_particle_get_data_particle", physics_particle_get_data_particle);
    f("physics_particle_group_begin", physics_particle_group_begin);
    f("physics_particle_group_circle", physics_particle_group_circle);
    f("physics_particle_group_box", physics_particle_group_box);
    f("physics_particle_group_polygon", physics_particle_group_polygon);
    f("physics_particle_group_add_point", physics_particle_group_add_point);
    f("physics_particle_group_end", physics_particle_group_end);
    f("physics_particle_group_join", physics_particle_group_join);
    f("physics_particle_group_delete", physics_particle_group_delete);
    f("physics_particle_group_count", physics_particle_group_count);
    f("physics_particle_group_get_data", physics_particle_group_get_data);
    f("physics_particle_group_get_mass", physics_particle_group_get_mass);
    f("physics_particle_group_get_inertia", physics_particle_group_get_inertia);
    f("physics_particle_group_get_centre_x", physics_particle_group_get_centre_x);
    f("physics_particle_group_get_centre_y", physics_particle_group_get_centre_y);
    f("physics_particle_group_get_vel_x", physics_particle_group_get_vel_x);
    f("physics_particle_group_get_vel_y", physics_particle_group_get_vel_y);
    f("physics_particle_group_get_ang_vel", physics_particle_group_get_ang_vel);
    f("physics_particle_group_get_x", physics_particle_group_get_x);
    f("physics_particle_group_get_y", physics_particle_group_get_y);
    f("physics_particle_group_get_angle", physics_particle_group_get_angle);
    f("physics_particle_set_group_flags", physics_particle_set_group_flags);
    f("physics_particle_get_group_flags", physics_particle_get_group_flags);
    f("physics_particle_get_max_count", physics_particle_get_max_count);
    f("physics_particle_get_radius", physics_particle_get_radius);
    f("physics_particle_get_density", physics_particle_get_density);
    f("physics_particle_get_damping", physics_particle_get_damping);
    f("physics_particle_get_gravity_scale", physics_particle_get_gravity_scale);
    f("physics_particle_set_max_count", physics_particle_set_max_count);
    f("physics_particle_set_radius", physics_particle_set_radius);
    f("physics_particle_set_density", physics_particle_set_density);
    f("physics_particle_set_damping", physics_particle_set_damping);
    f("physics_particle_set_gravity_scale", physics_particle_set_gravity_scale);
    f("instance_activate_layer", instance_activate_layer);
    f("instance_deactivate_layer", instance_deactivate_layer);
}

/// @desc Applies a GML interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
function catspeak_ext_session_add_gml_pointers(_class) {
    var f = catspeak_session_add_function;
    var c = catspeak_session_add_constant;
    c("pointer_invalid", pointer_invalid);
    c("pointer_null", pointer_null);
    f("weak_ref_create", weak_ref_create);
    f("weak_ref_alive", weak_ref_alive);
    f("weak_ref_any_alive", weak_ref_any_alive);
    f("ptr", ptr);
}

/// @desc Applies a GML interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
function catspeak_ext_session_add_gml_unsafe(_class) {
    var f = catspeak_session_add_function;
    var c = catspeak_session_add_constant;
    c("gamespeed_fps", gamespeed_fps);
    c("gamespeed_microseconds", gamespeed_microseconds);
    c("ev_create", ev_create);
    c("ev_destroy", ev_destroy);
    c("ev_step", ev_step);
    c("ev_alarm", ev_alarm);
    c("ev_keyboard", ev_keyboard);
    c("ev_mouse", ev_mouse);
    c("ev_collision", ev_collision);
    c("ev_other", ev_other);
    c("ev_draw", ev_draw);
    c("ev_draw_begin", ev_draw_begin);
    c("ev_draw_end", ev_draw_end);
    c("ev_draw_pre", ev_draw_pre);
    c("ev_draw_post", ev_draw_post);
    c("ev_keypress", ev_keypress);
    c("ev_keyrelease", ev_keyrelease);
    c("ev_trigger", ev_trigger);
    c("ev_left_button", ev_left_button);
    c("ev_right_button", ev_right_button);
    c("ev_middle_button", ev_middle_button);
    c("ev_no_button", ev_no_button);
    c("ev_left_press", ev_left_press);
    c("ev_right_press", ev_right_press);
    c("ev_middle_press", ev_middle_press);
    c("ev_left_release", ev_left_release);
    c("ev_right_release", ev_right_release);
    c("ev_middle_release", ev_middle_release);
    c("ev_mouse_enter", ev_mouse_enter);
    c("ev_mouse_leave", ev_mouse_leave);
    c("ev_mouse_wheel_up", ev_mouse_wheel_up);
    c("ev_mouse_wheel_down", ev_mouse_wheel_down);
    c("ev_global_left_button", ev_global_left_button);
    c("ev_global_right_button", ev_global_right_button);
    c("ev_global_middle_button", ev_global_middle_button);
    c("ev_global_left_press", ev_global_left_press);
    c("ev_global_right_press", ev_global_right_press);
    c("ev_global_middle_press", ev_global_middle_press);
    c("ev_global_left_release", ev_global_left_release);
    c("ev_global_right_release", ev_global_right_release);
    c("ev_global_middle_release", ev_global_middle_release);
    c("ev_joystick1_left", ev_joystick1_left);
    c("ev_joystick1_right", ev_joystick1_right);
    c("ev_joystick1_up", ev_joystick1_up);
    c("ev_joystick1_down", ev_joystick1_down);
    c("ev_joystick1_button1", ev_joystick1_button1);
    c("ev_joystick1_button2", ev_joystick1_button2);
    c("ev_joystick1_button3", ev_joystick1_button3);
    c("ev_joystick1_button4", ev_joystick1_button4);
    c("ev_joystick1_button5", ev_joystick1_button5);
    c("ev_joystick1_button6", ev_joystick1_button6);
    c("ev_joystick1_button7", ev_joystick1_button7);
    c("ev_joystick1_button8", ev_joystick1_button8);
    c("ev_joystick2_left", ev_joystick2_left);
    c("ev_joystick2_right", ev_joystick2_right);
    c("ev_joystick2_up", ev_joystick2_up);
    c("ev_joystick2_down", ev_joystick2_down);
    c("ev_joystick2_button1", ev_joystick2_button1);
    c("ev_joystick2_button2", ev_joystick2_button2);
    c("ev_joystick2_button3", ev_joystick2_button3);
    c("ev_joystick2_button4", ev_joystick2_button4);
    c("ev_joystick2_button5", ev_joystick2_button5);
    c("ev_joystick2_button6", ev_joystick2_button6);
    c("ev_joystick2_button7", ev_joystick2_button7);
    c("ev_joystick2_button8", ev_joystick2_button8);
    c("ev_outside", ev_outside);
    c("ev_boundary", ev_boundary);
    c("ev_game_start", ev_game_start);
    c("ev_game_end", ev_game_end);
    c("ev_room_start", ev_room_start);
    c("ev_room_end", ev_room_end);
    c("ev_no_more_lives", ev_no_more_lives);
    c("ev_animation_end", ev_animation_end);
    c("ev_end_of_path", ev_end_of_path);
    c("ev_no_more_health", ev_no_more_health);
    c("ev_user0", ev_user0);
    c("ev_user1", ev_user1);
    c("ev_user2", ev_user2);
    c("ev_user3", ev_user3);
    c("ev_user4", ev_user4);
    c("ev_user5", ev_user5);
    c("ev_user6", ev_user6);
    c("ev_user7", ev_user7);
    c("ev_user8", ev_user8);
    c("ev_user9", ev_user9);
    c("ev_user10", ev_user10);
    c("ev_user11", ev_user11);
    c("ev_user12", ev_user12);
    c("ev_user13", ev_user13);
    c("ev_user14", ev_user14);
    c("ev_user15", ev_user15);
    c("ev_outside_view0", ev_outside_view0);
    c("ev_outside_view1", ev_outside_view1);
    c("ev_outside_view2", ev_outside_view2);
    c("ev_outside_view3", ev_outside_view3);
    c("ev_outside_view4", ev_outside_view4);
    c("ev_outside_view5", ev_outside_view5);
    c("ev_outside_view6", ev_outside_view6);
    c("ev_outside_view7", ev_outside_view7);
    c("ev_boundary_view0", ev_boundary_view0);
    c("ev_boundary_view1", ev_boundary_view1);
    c("ev_boundary_view2", ev_boundary_view2);
    c("ev_boundary_view3", ev_boundary_view3);
    c("ev_boundary_view4", ev_boundary_view4);
    c("ev_boundary_view5", ev_boundary_view5);
    c("ev_boundary_view6", ev_boundary_view6);
    c("ev_boundary_view7", ev_boundary_view7);
    c("ev_animation_update", ev_animation_update);
    c("ev_animation_event", ev_animation_event);
    c("ev_web_image_load", ev_web_image_load);
    c("ev_web_sound_load", ev_web_sound_load);
    c("ev_web_async", ev_web_async);
    c("ev_dialog_async", ev_dialog_async);
    c("ev_web_iap", ev_web_iap);
    c("ev_web_cloud", ev_web_cloud);
    c("ev_web_networking", ev_web_networking);
    c("ev_web_steam", ev_web_steam);
    c("ev_social", ev_social);
    c("ev_push_notification", ev_push_notification);
    c("ev_async_save_load", ev_async_save_load);
    c("ev_audio_recording", ev_audio_recording);
    c("ev_audio_playback", ev_audio_playback);
    c("ev_system_event", ev_system_event);
    c("ev_broadcast_message", ev_broadcast_message);
    c("ev_step_normal", ev_step_normal);
    c("ev_step_begin", ev_step_begin);
    c("ev_step_end", ev_step_end);
    c("ev_gui", ev_gui);
    c("ev_gui_begin", ev_gui_begin);
    c("ev_gui_end", ev_gui_end);
    c("ev_cleanup", ev_cleanup);
    c("ev_gesture", ev_gesture);
    c("ev_gesture_tap", ev_gesture_tap);
    c("ev_gesture_double_tap", ev_gesture_double_tap);
    c("ev_gesture_drag_start", ev_gesture_drag_start);
    c("ev_gesture_dragging", ev_gesture_dragging);
    c("ev_gesture_drag_end", ev_gesture_drag_end);
    c("ev_gesture_flick", ev_gesture_flick);
    c("ev_gesture_pinch_start", ev_gesture_pinch_start);
    c("ev_gesture_pinch_in", ev_gesture_pinch_in);
    c("ev_gesture_pinch_out", ev_gesture_pinch_out);
    c("ev_gesture_pinch_end", ev_gesture_pinch_end);
    c("ev_gesture_rotate_start", ev_gesture_rotate_start);
    c("ev_gesture_rotating", ev_gesture_rotating);
    c("ev_gesture_rotate_end", ev_gesture_rotate_end);
    c("ev_global_gesture_tap", ev_global_gesture_tap);
    c("ev_global_gesture_double_tap", ev_global_gesture_double_tap);
    c("ev_global_gesture_drag_start", ev_global_gesture_drag_start);
    c("ev_global_gesture_dragging", ev_global_gesture_dragging);
    c("ev_global_gesture_drag_end", ev_global_gesture_drag_end);
    c("ev_global_gesture_flick", ev_global_gesture_flick);
    c("ev_global_gesture_pinch_start", ev_global_gesture_pinch_start);
    c("ev_global_gesture_pinch_in", ev_global_gesture_pinch_in);
    c("ev_global_gesture_pinch_out", ev_global_gesture_pinch_out);
    c("ev_global_gesture_pinch_end", ev_global_gesture_pinch_end);
    c("ev_global_gesture_rotate_start", ev_global_gesture_rotate_start);
    c("ev_global_gesture_rotating", ev_global_gesture_rotating);
    c("ev_global_gesture_rotate_end", ev_global_gesture_rotate_end);
    c("ty_real", ty_real);
    c("ty_string", ty_string);
    c("dll_cdecl", dll_cdecl);
    c("dll_stdcall", dll_stdcall);
    c("of_challenge_win", of_challenge_win);
    c("of_challenge_lose", of_challenge_lose);
    c("of_challenge_tie", of_challenge_tie);
    c("leaderboard_type_number", leaderboard_type_number);
    c("leaderboard_type_time_mins_secs", leaderboard_type_time_mins_secs);
    c("iap_ev_storeload", iap_ev_storeload);
    c("iap_ev_product", iap_ev_product);
    c("iap_ev_purchase", iap_ev_purchase);
    c("iap_ev_consume", iap_ev_consume);
    c("iap_ev_restore", iap_ev_restore);
    c("iap_storeload_ok", iap_storeload_ok);
    c("iap_storeload_failed", iap_storeload_failed);
    c("iap_status_uninitialised", iap_status_uninitialised);
    c("iap_status_unavailable", iap_status_unavailable);
    c("iap_status_loading", iap_status_loading);
    c("iap_status_available", iap_status_available);
    c("iap_status_processing", iap_status_processing);
    c("iap_status_restoring", iap_status_restoring);
    c("iap_failed", iap_failed);
    c("iap_unavailable", iap_unavailable);
    c("iap_available", iap_available);
    c("iap_purchased", iap_purchased);
    c("iap_canceled", iap_canceled);
    c("iap_refunded", iap_refunded);
    c("achievement_our_info", achievement_our_info);
    c("achievement_friends_info", achievement_friends_info);
    c("achievement_leaderboard_info", achievement_leaderboard_info);
    c("achievement_achievement_info", achievement_achievement_info);
    c("achievement_filter_all_players", achievement_filter_all_players);
    c("achievement_filter_friends_only", achievement_filter_friends_only);
    c("achievement_filter_favorites_only", achievement_filter_favorites_only);
    c("achievement_type_achievement_challenge", achievement_type_achievement_challenge);
    c("achievement_type_score_challenge", achievement_type_score_challenge);
    c("achievement_pic_loaded", achievement_pic_loaded);
    c("achievement_show_ui", achievement_show_ui);
    c("achievement_show_profile", achievement_show_profile);
    c("achievement_show_leaderboard", achievement_show_leaderboard);
    c("achievement_show_achievement", achievement_show_achievement);
    c("achievement_show_bank", achievement_show_bank);
    c("achievement_show_friend_picker", achievement_show_friend_picker);
    c("achievement_show_purchase_prompt", achievement_show_purchase_prompt);
    c("network_socket_tcp", network_socket_tcp);
    c("network_socket_udp", network_socket_udp);
    c("network_socket_ws", network_socket_ws);
    c("network_socket_bluetooth", network_socket_bluetooth);
    c("network_type_connect", network_type_connect);
    c("network_type_disconnect", network_type_disconnect);
    c("network_type_data", network_type_data);
    c("network_type_non_blocking_connect", network_type_non_blocking_connect);
    c("network_config_connect_timeout", network_config_connect_timeout);
    c("network_config_use_non_blocking_socket", network_config_use_non_blocking_socket);
    c("network_config_enable_reliable_udp", network_config_enable_reliable_udp);
    c("network_config_disable_reliable_udp", network_config_disable_reliable_udp);
    c("network_config_avoid_time_wait", network_config_avoid_time_wait);
    c("ov_friends", ov_friends);
    c("ov_community", ov_community);
    c("ov_players", ov_players);
    c("ov_settings", ov_settings);
    c("ov_gamegroup", ov_gamegroup);
    c("ov_achievements", ov_achievements);
    c("lb_sort_none", lb_sort_none);
    c("lb_sort_ascending", lb_sort_ascending);
    c("lb_sort_descending", lb_sort_descending);
    c("lb_disp_none", lb_disp_none);
    c("lb_disp_numeric", lb_disp_numeric);
    c("lb_disp_time_sec", lb_disp_time_sec);
    c("lb_disp_time_ms", lb_disp_time_ms);
    c("ugc_result_success", ugc_result_success);
    c("ugc_filetype_community", ugc_filetype_community);
    c("ugc_filetype_microtrans", ugc_filetype_microtrans);
    c("ugc_visibility_public", ugc_visibility_public);
    c("ugc_visibility_friends_only", ugc_visibility_friends_only);
    c("ugc_visibility_private", ugc_visibility_private);
    c("ugc_query_RankedByVote", ugc_query_RankedByVote);
    c("ugc_query_RankedByPublicationDate", ugc_query_RankedByPublicationDate);
    c("ugc_query_AcceptedForGameRankedByAcceptanceDate", ugc_query_AcceptedForGameRankedByAcceptanceDate);
    c("ugc_query_RankedByTrend", ugc_query_RankedByTrend);
    c("ugc_query_FavoritedByFriendsRankedByPublicationDate", ugc_query_FavoritedByFriendsRankedByPublicationDate);
    c("ugc_query_CreatedByFriendsRankedByPublicationDate", ugc_query_CreatedByFriendsRankedByPublicationDate);
    c("ugc_query_RankedByNumTimesReported", ugc_query_RankedByNumTimesReported);
    c("ugc_query_CreatedByFollowedUsersRankedByPublicationDate", ugc_query_CreatedByFollowedUsersRankedByPublicationDate);
    c("ugc_query_NotYetRated", ugc_query_NotYetRated);
    c("ugc_query_RankedByTotalVotesAsc", ugc_query_RankedByTotalVotesAsc);
    c("ugc_query_RankedByVotesUp", ugc_query_RankedByVotesUp);
    c("ugc_query_RankedByTextSearch", ugc_query_RankedByTextSearch);
    c("ugc_sortorder_CreationOrderDesc", ugc_sortorder_CreationOrderDesc);
    c("ugc_sortorder_CreationOrderAsc", ugc_sortorder_CreationOrderAsc);
    c("ugc_sortorder_TitleAsc", ugc_sortorder_TitleAsc);
    c("ugc_sortorder_LastUpdatedDesc", ugc_sortorder_LastUpdatedDesc);
    c("ugc_sortorder_SubscriptionDateDesc", ugc_sortorder_SubscriptionDateDesc);
    c("ugc_sortorder_VoteScoreDesc", ugc_sortorder_VoteScoreDesc);
    c("ugc_sortorder_ForModeration", ugc_sortorder_ForModeration);
    c("ugc_list_Published", ugc_list_Published);
    c("ugc_list_VotedOn", ugc_list_VotedOn);
    c("ugc_list_VotedUp", ugc_list_VotedUp);
    c("ugc_list_VotedDown", ugc_list_VotedDown);
    c("ugc_list_WillVoteLater", ugc_list_WillVoteLater);
    c("ugc_list_Favorited", ugc_list_Favorited);
    c("ugc_list_Subscribed", ugc_list_Subscribed);
    c("ugc_list_UsedOrPlayed", ugc_list_UsedOrPlayed);
    c("ugc_list_Followed", ugc_list_Followed);
    c("ugc_match_Items", ugc_match_Items);
    c("ugc_match_Items_Mtx", ugc_match_Items_Mtx);
    c("ugc_match_Items_ReadyToUse", ugc_match_Items_ReadyToUse);
    c("ugc_match_Collections", ugc_match_Collections);
    c("ugc_match_Artwork", ugc_match_Artwork);
    c("ugc_match_Videos", ugc_match_Videos);
    c("ugc_match_Screenshots", ugc_match_Screenshots);
    c("ugc_match_AllGuides", ugc_match_AllGuides);
    c("ugc_match_WebGuides", ugc_match_WebGuides);
    c("ugc_match_IntegratedGuides", ugc_match_IntegratedGuides);
    c("ugc_match_UsableInGame", ugc_match_UsableInGame);
    c("ugc_match_ControllerBindings", ugc_match_ControllerBindings);
    f("exception_unhandled_handler", exception_unhandled_handler);
    f("variable_global_exists", variable_global_exists);
    f("variable_global_get", variable_global_get);
    f("variable_global_set", variable_global_set);
    f("variable_instance_exists", variable_instance_exists);
    f("variable_instance_get", variable_instance_get);
    f("variable_instance_set", variable_instance_set);
    f("variable_instance_get_names", variable_instance_get_names);
    f("variable_instance_names_count", variable_instance_names_count);
    f("variable_struct_exists", variable_struct_exists);
    f("variable_struct_get", variable_struct_get);
    f("variable_struct_set", variable_struct_set);
    f("variable_struct_get_names", variable_struct_get_names);
    f("variable_struct_names_count", variable_struct_names_count);
    f("variable_struct_remove", variable_struct_remove);
    f("game_set_speed", game_set_speed);
    f("game_get_speed", game_get_speed);
    f("room_goto", room_goto);
    f("room_goto_previous", room_goto_previous);
    f("room_goto_next", room_goto_next);
    f("room_previous", room_previous);
    f("room_next", room_next);
    f("room_restart", room_restart);
    f("game_end", game_end);
    f("game_restart", game_restart);
    f("game_load", game_load);
    f("game_save", game_save);
    f("game_save_buffer", game_save_buffer);
    f("game_load_buffer", game_load_buffer);
    f("event_perform", event_perform);
    f("event_user", event_user);
    f("event_perform_object", event_perform_object);
    f("event_inherited", event_inherited);
    f("get_integer", get_integer);
    f("get_string", get_string);
    f("get_integer_async", get_integer_async);
    f("get_string_async", get_string_async);
    f("get_login_async", get_login_async);
    f("get_open_filename", get_open_filename);
    f("get_save_filename", get_save_filename);
    f("get_open_filename_ext", get_open_filename_ext);
    f("get_save_filename_ext", get_save_filename_ext);
    f("highscore_clear", highscore_clear);
    f("highscore_add", highscore_add);
    f("highscore_value", highscore_value);
    f("highscore_name", highscore_name);
    f("room_exists", room_exists);
    f("room_get_name", room_get_name);
    f("room_set_width", room_set_width);
    f("room_set_height", room_set_height);
    f("room_set_persistent", room_set_persistent);
    f("room_set_viewport", room_set_viewport);
    f("room_get_viewport", room_get_viewport);
    f("room_set_view_enabled", room_set_view_enabled);
    f("room_add", room_add);
    f("room_duplicate", room_duplicate);
    f("room_assign", room_assign);
    f("room_instance_add", room_instance_add);
    f("room_instance_clear", room_instance_clear);
    f("room_get_camera", room_get_camera);
    f("room_set_camera", room_set_camera);
    f("external_call", external_call);
    f("external_define", external_define);
    f("external_free", external_free);
    f("shop_leave_rating", shop_leave_rating);
    f("get_timer", get_timer);
    f("achievement_login", achievement_login);
    f("achievement_logout", achievement_logout);
    f("achievement_post", achievement_post);
    f("achievement_increment", achievement_increment);
    f("achievement_post_score", achievement_post_score);
    f("achievement_available", achievement_available);
    f("achievement_show_achievements", achievement_show_achievements);
    f("achievement_show_leaderboards", achievement_show_leaderboards);
    f("achievement_load_friends", achievement_load_friends);
    f("achievement_load_leaderboard", achievement_load_leaderboard);
    f("achievement_send_challenge", achievement_send_challenge);
    f("achievement_load_progress", achievement_load_progress);
    f("achievement_reset", achievement_reset);
    f("achievement_login_status", achievement_login_status);
    f("achievement_get_pic", achievement_get_pic);
    f("achievement_show_challenge_notifications", achievement_show_challenge_notifications);
    f("achievement_get_challenges", achievement_get_challenges);
    f("achievement_event", achievement_event);
    f("achievement_show", achievement_show);
    f("achievement_get_info", achievement_get_info);
    f("iap_activate", iap_activate);
    f("iap_status", iap_status);
    f("iap_enumerate_products", iap_enumerate_products);
    f("iap_restore_all", iap_restore_all);
    f("iap_acquire", iap_acquire);
    f("iap_consume", iap_consume);
    f("iap_product_details", iap_product_details);
    f("iap_purchase_details", iap_purchase_details);
    f("uwp_livetile_tile_clear", uwp_livetile_tile_clear);
    f("uwp_livetile_badge_notification", uwp_livetile_badge_notification);
    f("uwp_livetile_badge_clear", uwp_livetile_badge_clear);
    f("uwp_livetile_queue_enable", uwp_livetile_queue_enable);
    f("uwp_secondarytile_pin", uwp_secondarytile_pin);
    f("uwp_secondarytile_badge_notification", uwp_secondarytile_badge_notification);
    f("uwp_secondarytile_delete", uwp_secondarytile_delete);
    f("uwp_secondarytile_badge_clear", uwp_secondarytile_badge_clear);
    f("uwp_secondarytile_tile_clear", uwp_secondarytile_tile_clear);
    f("uwp_livetile_notification_begin", uwp_livetile_notification_begin);
    f("uwp_livetile_notification_secondary_begin", uwp_livetile_notification_secondary_begin);
    f("uwp_livetile_notification_expiry", uwp_livetile_notification_expiry);
    f("uwp_livetile_notification_tag", uwp_livetile_notification_tag);
    f("uwp_livetile_notification_text_add", uwp_livetile_notification_text_add);
    f("uwp_livetile_notification_image_add", uwp_livetile_notification_image_add);
    f("uwp_livetile_notification_end", uwp_livetile_notification_end);
    f("uwp_livetile_notification_template_add", uwp_livetile_notification_template_add);
    f("uwp_appbar_enable", uwp_appbar_enable);
    f("uwp_appbar_add_element", uwp_appbar_add_element);
    f("uwp_appbar_remove_element", uwp_appbar_remove_element);
    f("uwp_device_touchscreen_available", uwp_device_touchscreen_available);
    f("winphone_license_trial_version", winphone_license_trial_version);
    f("winphone_tile_title", winphone_tile_title);
    f("winphone_tile_count", winphone_tile_count);
    f("winphone_tile_back_title", winphone_tile_back_title);
    f("winphone_tile_back_content", winphone_tile_back_content);
    f("winphone_tile_back_content_wide", winphone_tile_back_content_wide);
    f("winphone_tile_front_image", winphone_tile_front_image);
    f("winphone_tile_front_image_small", winphone_tile_front_image_small);
    f("winphone_tile_front_image_wide", winphone_tile_front_image_wide);
    f("winphone_tile_back_image", winphone_tile_back_image);
    f("winphone_tile_back_image_wide", winphone_tile_back_image_wide);
    f("winphone_tile_background_colour", winphone_tile_background_colour);
    f("winphone_tile_background_color", winphone_tile_background_color);
    f("winphone_tile_icon_image", winphone_tile_icon_image);
    f("winphone_tile_small_icon_image", winphone_tile_small_icon_image);
    f("winphone_tile_wide_content", winphone_tile_wide_content);
    f("winphone_tile_cycle_images", winphone_tile_cycle_images);
    f("winphone_tile_small_background_image", winphone_tile_small_background_image);
    f("network_create_socket", network_create_socket);
    f("network_create_socket_ext", network_create_socket_ext);
    f("network_create_server", network_create_server);
    f("network_create_server_raw", network_create_server_raw);
    f("network_connect", network_connect);
    f("network_connect_raw", network_connect_raw);
    f("network_connect_async", network_connect_async);
    f("network_connect_raw_async", network_connect_raw_async);
    f("network_send_packet", network_send_packet);
    f("network_send_raw", network_send_raw);
    f("network_send_broadcast", network_send_broadcast);
    f("network_send_udp", network_send_udp);
    f("network_send_udp_raw", network_send_udp_raw);
    f("network_set_timeout", network_set_timeout);
    f("network_set_config", network_set_config);
    f("network_resolve", network_resolve);
    f("network_destroy", network_destroy);
    f("steam_activate_overlay", steam_activate_overlay);
    f("steam_is_overlay_enabled", steam_is_overlay_enabled);
    f("steam_is_overlay_activated", steam_is_overlay_activated);
    f("steam_get_persona_name", steam_get_persona_name);
    f("steam_initialised", steam_initialised);
    f("steam_is_cloud_enabled_for_app", steam_is_cloud_enabled_for_app);
    f("steam_is_cloud_enabled_for_account", steam_is_cloud_enabled_for_account);
    f("steam_file_persisted", steam_file_persisted);
    f("steam_get_quota_total", steam_get_quota_total);
    f("steam_get_quota_free", steam_get_quota_free);
    f("steam_file_write", steam_file_write);
    f("steam_file_write_file", steam_file_write_file);
    f("steam_file_read", steam_file_read);
    f("steam_file_delete", steam_file_delete);
    f("steam_file_exists", steam_file_exists);
    f("steam_file_size", steam_file_size);
    f("steam_file_share", steam_file_share);
    f("steam_is_screenshot_requested", steam_is_screenshot_requested);
    f("steam_send_screenshot", steam_send_screenshot);
    f("steam_is_user_logged_on", steam_is_user_logged_on);
    f("steam_get_user_steam_id", steam_get_user_steam_id);
    f("steam_user_owns_dlc", steam_user_owns_dlc);
    f("steam_user_installed_dlc", steam_user_installed_dlc);
    f("steam_set_achievement", steam_set_achievement);
    f("steam_get_achievement", steam_get_achievement);
    f("steam_clear_achievement", steam_clear_achievement);
    f("steam_set_stat_int", steam_set_stat_int);
    f("steam_set_stat_float", steam_set_stat_float);
    f("steam_set_stat_avg_rate", steam_set_stat_avg_rate);
    f("steam_get_stat_int", steam_get_stat_int);
    f("steam_get_stat_float", steam_get_stat_float);
    f("steam_get_stat_avg_rate", steam_get_stat_avg_rate);
    f("steam_reset_all_stats", steam_reset_all_stats);
    f("steam_reset_all_stats_achievements", steam_reset_all_stats_achievements);
    f("steam_stats_ready", steam_stats_ready);
    f("steam_create_leaderboard", steam_create_leaderboard);
    f("steam_upload_score", steam_upload_score);
    f("steam_upload_score_ext", steam_upload_score_ext);
    f("steam_download_scores_around_user", steam_download_scores_around_user);
    f("steam_download_scores", steam_download_scores);
    f("steam_download_friends_scores", steam_download_friends_scores);
    f("steam_upload_score_buffer", steam_upload_score_buffer);
    f("steam_upload_score_buffer_ext", steam_upload_score_buffer_ext);
    f("steam_current_game_language", steam_current_game_language);
    f("steam_available_languages", steam_available_languages);
    f("steam_activate_overlay_browser", steam_activate_overlay_browser);
    f("steam_activate_overlay_user", steam_activate_overlay_user);
    f("steam_activate_overlay_store", steam_activate_overlay_store);
    f("steam_get_user_persona_name", steam_get_user_persona_name);
    f("steam_get_app_id", steam_get_app_id);
    f("steam_get_user_account_id", steam_get_user_account_id);
    f("steam_ugc_download", steam_ugc_download);
    f("steam_ugc_create_item", steam_ugc_create_item);
    f("steam_ugc_start_item_update", steam_ugc_start_item_update);
    f("steam_ugc_set_item_title", steam_ugc_set_item_title);
    f("steam_ugc_set_item_description", steam_ugc_set_item_description);
    f("steam_ugc_set_item_visibility", steam_ugc_set_item_visibility);
    f("steam_ugc_set_item_tags", steam_ugc_set_item_tags);
    f("steam_ugc_set_item_content", steam_ugc_set_item_content);
    f("steam_ugc_set_item_preview", steam_ugc_set_item_preview);
    f("steam_ugc_submit_item_update", steam_ugc_submit_item_update);
    f("steam_ugc_get_item_update_progress", steam_ugc_get_item_update_progress);
    f("steam_ugc_subscribe_item", steam_ugc_subscribe_item);
    f("steam_ugc_unsubscribe_item", steam_ugc_unsubscribe_item);
    f("steam_ugc_num_subscribed_items", steam_ugc_num_subscribed_items);
    f("steam_ugc_get_subscribed_items", steam_ugc_get_subscribed_items);
    f("steam_ugc_get_item_install_info", steam_ugc_get_item_install_info);
    f("steam_ugc_get_item_update_info", steam_ugc_get_item_update_info);
    f("steam_ugc_request_item_details", steam_ugc_request_item_details);
    f("steam_ugc_create_query_user", steam_ugc_create_query_user);
    f("steam_ugc_create_query_user_ex", steam_ugc_create_query_user_ex);
    f("steam_ugc_create_query_all", steam_ugc_create_query_all);
    f("steam_ugc_create_query_all_ex", steam_ugc_create_query_all_ex);
    f("steam_ugc_query_set_cloud_filename_filter", steam_ugc_query_set_cloud_filename_filter);
    f("steam_ugc_query_set_match_any_tag", steam_ugc_query_set_match_any_tag);
    f("steam_ugc_query_set_search_text", steam_ugc_query_set_search_text);
    f("steam_ugc_query_set_ranked_by_trend_days", steam_ugc_query_set_ranked_by_trend_days);
    f("steam_ugc_query_add_required_tag", steam_ugc_query_add_required_tag);
    f("steam_ugc_query_add_excluded_tag", steam_ugc_query_add_excluded_tag);
    f("steam_ugc_query_set_return_long_description", steam_ugc_query_set_return_long_description);
    f("steam_ugc_query_set_return_total_only", steam_ugc_query_set_return_total_only);
    f("steam_ugc_query_set_allow_cached_response", steam_ugc_query_set_allow_cached_response);
    f("steam_ugc_send_query", steam_ugc_send_query);
    f("push_local_notification", push_local_notification);
    f("push_get_first_local_notification", push_get_first_local_notification);
    f("push_get_next_local_notification", push_get_next_local_notification);
    f("push_cancel_local_notification", push_cancel_local_notification);
    f("push_get_application_badge_number", push_get_application_badge_number);
    f("push_set_application_badge_number", push_set_application_badge_number);
    f("gc_collect", gc_collect);
    f("gc_enable", gc_enable);
    f("gc_is_enabled", gc_is_enabled);
    f("gc_get_stats", gc_get_stats);
    f("gc_target_frame_time", gc_target_frame_time);
    f("gc_get_target_frame_time", gc_get_target_frame_time);
}

/// @desc Applies a GML interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
function catspeak_ext_session_add_gml_introspection(_class) {
    var f = catspeak_session_add_function;
    var c = catspeak_session_add_constant;
    c("asset_object", asset_object);
    c("asset_unknown", asset_unknown);
    c("asset_sprite", asset_sprite);
    c("asset_sound", asset_sound);
    c("asset_room", asset_room);
    c("asset_path", asset_path);
    c("asset_script", asset_script);
    c("asset_font", asset_font);
    c("asset_timeline", asset_timeline);
    c("asset_tiles", asset_tiles);
    c("asset_shader", asset_shader);
    c("asset_sequence", asset_sequence);
    c("asset_animationcurve", asset_animationcurve);
    f("is_real", is_real);
    f("is_numeric", is_numeric);
    f("is_string", is_string);
    f("is_array", is_array);
    f("is_undefined", is_undefined);
    f("is_int32", is_int32);
    f("is_int64", is_int64);
    f("is_ptr", is_ptr);
    f("is_vec3", is_vec3);
    f("is_vec4", is_vec4);
    f("is_bool", is_bool);
    f("is_nan", is_nan);
    f("is_infinity", is_infinity);
    f("is_struct", is_struct);
    f("is_method", is_method);
    f("typeof", typeof);
    f("instanceof", instanceof);
    f("asset_get_index", asset_get_index);
    f("asset_get_type", asset_get_type);
    f("tag_get_asset_ids", tag_get_asset_ids);
    f("tag_get_assets", tag_get_assets);
    f("asset_get_tags", asset_get_tags);
    f("asset_add_tags", asset_add_tags);
    f("asset_remove_tags", asset_remove_tags);
    f("asset_has_tags", asset_has_tags);
    f("asset_has_any_tag", asset_has_any_tag);
    f("asset_clear_tags", asset_clear_tags);
    f("extension_get_string", extension_get_string);
}

/// @desc Applies a GML interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
function catspeak_ext_session_add_gml_maths(_class) {
    var f = catspeak_session_add_function;
    var c = catspeak_session_add_constant;
    c("undefined", undefined);
    c("true", true);
    c("false", false);
    c("pi", pi);
    c("NaN", NaN);
    c("infinity", infinity);
    c("matrix_view", matrix_view);
    c("matrix_projection", matrix_projection);
    c("matrix_world", matrix_world);
    f("abs", abs);
    f("round", round);
    f("floor", floor);
    f("ceil", ceil);
    f("sign", sign);
    f("frac", frac);
    f("sqrt", sqrt);
    f("sqr", sqr);
    f("exp", exp);
    f("ln", ln);
    f("log2", log2);
    f("log10", log10);
    f("sin", sin);
    f("cos", cos);
    f("tan", tan);
    f("arcsin", arcsin);
    f("arccos", arccos);
    f("arctan", arctan);
    f("arctan2", arctan2);
    f("dsin", dsin);
    f("dcos", dcos);
    f("dtan", dtan);
    f("darcsin", darcsin);
    f("darccos", darccos);
    f("darctan", darctan);
    f("darctan2", darctan2);
    f("degtorad", degtorad);
    f("power", power);
    f("logn", logn);
    f("min", min);
    f("max", max);
    f("mean", mean);
    f("median", median);
    f("clamp", clamp);
    f("lerp", lerp);
    f("dot_product", dot_product);
    f("dot_product_3d", dot_product_3d);
    f("dot_product_normalised", dot_product_normalised);
    f("dot_product_3d_normalised", dot_product_3d_normalised);
    f("dot_product_normalized", dot_product_normalized);
    f("dot_product_3d_normalized", dot_product_3d_normalized);
    f("math_set_epsilon", math_set_epsilon);
    f("math_get_epsilon", math_get_epsilon);
    f("point_distance_3d", point_distance_3d);
    f("point_distance", point_distance);
    f("point_direction", point_direction);
    f("lengthdir_x", lengthdir_x);
    f("lengthdir_y", lengthdir_y);
    f("real", real);
    f("bool", bool);
    f("int64", int64);
    f("point_in_rectangle", point_in_rectangle);
    f("point_in_triangle", point_in_triangle);
    f("point_in_circle", point_in_circle);
    f("matrix_get", matrix_get);
    f("matrix_set", matrix_set);
    f("matrix_build_identity", matrix_build_identity);
    f("matrix_build", matrix_build);
    f("matrix_build_lookat", matrix_build_lookat);
    f("matrix_build_projection_ortho", matrix_build_projection_ortho);
    f("matrix_build_projection_perspective", matrix_build_projection_perspective);
    f("matrix_build_projection_perspective_fov", matrix_build_projection_perspective_fov);
    f("matrix_multiply", matrix_multiply);
    f("matrix_transform_vertex", matrix_transform_vertex);
    f("matrix_stack_push", matrix_stack_push);
    f("matrix_stack_pop", matrix_stack_pop);
    f("matrix_stack_set", matrix_stack_set);
    f("matrix_stack_clear", matrix_stack_clear);
    f("matrix_stack_top", matrix_stack_top);
    f("matrix_stack_is_empty", matrix_stack_is_empty);
}

/// @desc Applies a GML interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
function catspeak_ext_session_add_gml_animation(_class) {
    var f = catspeak_session_add_function;
    var c = catspeak_session_add_constant;
    c("path_action_stop", path_action_stop);
    c("path_action_restart", path_action_restart);
    c("path_action_continue", path_action_continue);
    c("path_action_reverse", path_action_reverse);
    c("seqtracktype_graphic", seqtracktype_graphic);
    c("seqtracktype_audio", seqtracktype_audio);
    c("seqtracktype_real", seqtracktype_real);
    c("seqtracktype_color", seqtracktype_color);
    c("seqtracktype_colour", seqtracktype_colour);
    c("seqtracktype_bool", seqtracktype_bool);
    c("seqtracktype_string", seqtracktype_string);
    c("seqtracktype_sequence", seqtracktype_sequence);
    c("seqtracktype_clipmask", seqtracktype_clipmask);
    c("seqtracktype_clipmask_mask", seqtracktype_clipmask_mask);
    c("seqtracktype_clipmask_subject", seqtracktype_clipmask_subject);
    c("seqtracktype_group", seqtracktype_group);
    c("seqtracktype_empty", seqtracktype_empty);
    c("seqtracktype_spriteframes", seqtracktype_spriteframes);
    c("seqtracktype_instance", seqtracktype_instance);
    c("seqtracktype_message", seqtracktype_message);
    c("seqtracktype_moment", seqtracktype_moment);
    c("seqplay_oneshot", seqplay_oneshot);
    c("seqplay_loop", seqplay_loop);
    c("seqplay_pingpong", seqplay_pingpong);
    c("seqdir_right", seqdir_right);
    c("seqdir_left", seqdir_left);
    c("seqinterpolation_assign", seqinterpolation_assign);
    c("seqinterpolation_lerp", seqinterpolation_lerp);
    c("seqaudiokey_loop", seqaudiokey_loop);
    c("seqaudiokey_oneshot", seqaudiokey_oneshot);
    c("animcurvetype_linear", animcurvetype_linear);
    c("animcurvetype_catmullrom", animcurvetype_catmullrom);
    f("path_start", path_start);
    f("path_end", path_end);
    f("mp_linear_step", mp_linear_step);
    f("mp_potential_step", mp_potential_step);
    f("mp_linear_step_object", mp_linear_step_object);
    f("mp_potential_step_object", mp_potential_step_object);
    f("mp_potential_settings", mp_potential_settings);
    f("mp_linear_path", mp_linear_path);
    f("mp_potential_path", mp_potential_path);
    f("mp_linear_path_object", mp_linear_path_object);
    f("mp_potential_path_object", mp_potential_path_object);
    f("mp_grid_create", mp_grid_create);
    f("mp_grid_destroy", mp_grid_destroy);
    f("mp_grid_clear_all", mp_grid_clear_all);
    f("mp_grid_clear_cell", mp_grid_clear_cell);
    f("mp_grid_clear_rectangle", mp_grid_clear_rectangle);
    f("mp_grid_add_cell", mp_grid_add_cell);
    f("mp_grid_get_cell", mp_grid_get_cell);
    f("mp_grid_add_rectangle", mp_grid_add_rectangle);
    f("mp_grid_add_instances", mp_grid_add_instances);
    f("mp_grid_path", mp_grid_path);
    f("mp_grid_draw", mp_grid_draw);
    f("mp_grid_to_ds_grid", mp_grid_to_ds_grid);
    f("path_exists", path_exists);
    f("path_get_name", path_get_name);
    f("path_get_length", path_get_length);
    f("path_get_kind", path_get_kind);
    f("path_get_closed", path_get_closed);
    f("path_get_precision", path_get_precision);
    f("path_get_number", path_get_number);
    f("path_get_point_x", path_get_point_x);
    f("path_get_point_y", path_get_point_y);
    f("path_get_point_speed", path_get_point_speed);
    f("path_get_x", path_get_x);
    f("path_get_y", path_get_y);
    f("path_get_speed", path_get_speed);
    f("timeline_add", timeline_add);
    f("timeline_delete", timeline_delete);
    f("timeline_clear", timeline_clear);
    f("timeline_exists", timeline_exists);
    f("timeline_get_name", timeline_get_name);
    f("timeline_moment_clear", timeline_moment_clear);
    f("timeline_moment_add_script", timeline_moment_add_script);
    f("timeline_size", timeline_size);
    f("timeline_max_moment", timeline_max_moment);
    f("path_set_kind", path_set_kind);
    f("path_set_closed", path_set_closed);
    f("path_set_precision", path_set_precision);
    f("path_add", path_add);
    f("path_assign", path_assign);
    f("path_duplicate", path_duplicate);
    f("path_append", path_append);
    f("path_delete", path_delete);
    f("path_add_point", path_add_point);
    f("path_insert_point", path_insert_point);
    f("path_change_point", path_change_point);
    f("path_delete_point", path_delete_point);
    f("path_clear_points", path_clear_points);
    f("path_reverse", path_reverse);
    f("path_mirror", path_mirror);
    f("path_flip", path_flip);
    f("path_rotate", path_rotate);
    f("path_rescale", path_rescale);
    f("path_shift", path_shift);
    f("skeleton_animation_set", skeleton_animation_set);
    f("skeleton_animation_get", skeleton_animation_get);
    f("skeleton_animation_mix", skeleton_animation_mix);
    f("skeleton_animation_set_ext", skeleton_animation_set_ext);
    f("skeleton_animation_get_ext", skeleton_animation_get_ext);
    f("skeleton_animation_get_duration", skeleton_animation_get_duration);
    f("skeleton_animation_get_frames", skeleton_animation_get_frames);
    f("skeleton_animation_clear", skeleton_animation_clear);
    f("skeleton_skin_set", skeleton_skin_set);
    f("skeleton_skin_get", skeleton_skin_get);
    f("skeleton_attachment_set", skeleton_attachment_set);
    f("skeleton_attachment_get", skeleton_attachment_get);
    f("skeleton_attachment_create", skeleton_attachment_create);
    f("skeleton_attachment_create_colour", skeleton_attachment_create_colour);
    f("skeleton_attachment_create_color", skeleton_attachment_create_color);
    f("skeleton_collision_draw_set", skeleton_collision_draw_set);
    f("skeleton_bone_data_get", skeleton_bone_data_get);
    f("skeleton_bone_data_set", skeleton_bone_data_set);
    f("skeleton_bone_state_get", skeleton_bone_state_get);
    f("skeleton_bone_state_set", skeleton_bone_state_set);
    f("skeleton_slot_colour_set", skeleton_slot_colour_set);
    f("skeleton_slot_color_set", skeleton_slot_color_set);
    f("skeleton_slot_colour_get", skeleton_slot_colour_get);
    f("skeleton_slot_color_get", skeleton_slot_color_get);
    f("skeleton_slot_alpha_get", skeleton_slot_alpha_get);
    f("skeleton_find_slot", skeleton_find_slot);
    f("skeleton_get_minmax", skeleton_get_minmax);
    f("skeleton_get_num_bounds", skeleton_get_num_bounds);
    f("skeleton_get_bounds", skeleton_get_bounds);
    f("skeleton_animation_get_frame", skeleton_animation_get_frame);
    f("skeleton_animation_set_frame", skeleton_animation_set_frame);
    f("skeleton_animation_list", skeleton_animation_list);
    f("skeleton_skin_list", skeleton_skin_list);
    f("skeleton_bone_list", skeleton_bone_list);
    f("skeleton_slot_list", skeleton_slot_list);
    f("skeleton_slot_data", skeleton_slot_data);
    f("skeleton_slot_data_instance", skeleton_slot_data_instance);
    f("sequence_exists", sequence_exists);
    f("animcurve_get", animcurve_get);
    f("animcurve_get_channel", animcurve_get_channel);
    f("animcurve_get_channel_index", animcurve_get_channel_index);
    f("animcurve_channel_evaluate", animcurve_channel_evaluate);
    f("sequence_create", sequence_create);
    f("sequence_destroy", sequence_destroy);
    f("sequence_exists", sequence_exists);
    f("sequence_get", sequence_get);
    f("sequence_keyframe_new", sequence_keyframe_new);
    f("sequence_keyframedata_new", sequence_keyframedata_new);
    f("sequence_track_new", sequence_track_new);
    f("sequence_get_objects", sequence_get_objects);
    f("sequence_instance_override_object", sequence_instance_override_object);
    f("animcurve_create", animcurve_create);
    f("animcurve_destroy", animcurve_destroy);
    f("animcurve_exists", animcurve_exists);
    f("animcurve_channel_new", animcurve_channel_new);
    f("animcurve_point_new", animcurve_point_new);
}

/// @desc Applies a GML interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
function catspeak_ext_session_add_gml_collections(_class) {
    var f = catspeak_session_add_function;
    var c = catspeak_session_add_constant;
    c("path_action_stop", path_action_stop);
    c("path_action_restart", path_action_restart);
    c("path_action_continue", path_action_continue);
    c("path_action_reverse", path_action_reverse);
    c("ds_type_map", ds_type_map);
    c("ds_type_list", ds_type_list);
    c("ds_type_stack", ds_type_stack);
    c("ds_type_queue", ds_type_queue);
    c("ds_type_grid", ds_type_grid);
    c("ds_type_priority", ds_type_priority);
    c("buffer_fixed", buffer_fixed);
    c("buffer_grow", buffer_grow);
    c("buffer_wrap", buffer_wrap);
    c("buffer_fast", buffer_fast);
    c("buffer_vbuffer", buffer_vbuffer);
    c("buffer_u8", buffer_u8);
    c("buffer_s8", buffer_s8);
    c("buffer_u16", buffer_u16);
    c("buffer_s16", buffer_s16);
    c("buffer_u32", buffer_u32);
    c("buffer_s32", buffer_s32);
    c("buffer_u64", buffer_u64);
    c("buffer_f16", buffer_f16);
    c("buffer_f32", buffer_f32);
    c("buffer_f64", buffer_f64);
    c("buffer_bool", buffer_bool);
    c("buffer_text", buffer_text);
    c("buffer_string", buffer_string);
    c("buffer_seek_start", buffer_seek_start);
    c("buffer_seek_relative", buffer_seek_relative);
    c("buffer_seek_end", buffer_seek_end);
    f("array_length", array_length);
    f("array_equals", array_equals);
    f("array_create", array_create);
    f("array_copy", array_copy);
    f("array_resize", array_resize);
    f("array_get", array_get);
    f("array_set", array_set);
    f("array_push", array_push);
    f("array_pop", array_pop);
    f("array_insert", array_insert);
    f("array_delete", array_delete);
    f("array_sort", array_sort);
    f("path_start", path_start);
    f("path_end", path_end);
    f("mp_linear_step", mp_linear_step);
    f("mp_potential_step", mp_potential_step);
    f("mp_linear_step_object", mp_linear_step_object);
    f("mp_potential_step_object", mp_potential_step_object);
    f("mp_potential_settings", mp_potential_settings);
    f("mp_linear_path", mp_linear_path);
    f("mp_potential_path", mp_potential_path);
    f("mp_linear_path_object", mp_linear_path_object);
    f("mp_potential_path_object", mp_potential_path_object);
    f("mp_grid_create", mp_grid_create);
    f("mp_grid_destroy", mp_grid_destroy);
    f("mp_grid_clear_all", mp_grid_clear_all);
    f("mp_grid_clear_cell", mp_grid_clear_cell);
    f("mp_grid_clear_rectangle", mp_grid_clear_rectangle);
    f("mp_grid_add_cell", mp_grid_add_cell);
    f("mp_grid_get_cell", mp_grid_get_cell);
    f("mp_grid_add_rectangle", mp_grid_add_rectangle);
    f("mp_grid_add_instances", mp_grid_add_instances);
    f("mp_grid_path", mp_grid_path);
    f("mp_grid_draw", mp_grid_draw);
    f("mp_grid_to_ds_grid", mp_grid_to_ds_grid);
    f("highscore_clear", highscore_clear);
    f("highscore_add", highscore_add);
    f("highscore_value", highscore_value);
    f("highscore_name", highscore_name);
    f("path_exists", path_exists);
    f("path_get_name", path_get_name);
    f("path_get_length", path_get_length);
    f("path_get_kind", path_get_kind);
    f("path_get_closed", path_get_closed);
    f("path_get_precision", path_get_precision);
    f("path_get_number", path_get_number);
    f("path_get_point_x", path_get_point_x);
    f("path_get_point_y", path_get_point_y);
    f("path_get_point_speed", path_get_point_speed);
    f("path_get_x", path_get_x);
    f("path_get_y", path_get_y);
    f("path_get_speed", path_get_speed);
    f("path_set_kind", path_set_kind);
    f("path_set_closed", path_set_closed);
    f("path_set_precision", path_set_precision);
    f("path_add", path_add);
    f("path_assign", path_assign);
    f("path_duplicate", path_duplicate);
    f("path_append", path_append);
    f("path_delete", path_delete);
    f("path_add_point", path_add_point);
    f("path_insert_point", path_insert_point);
    f("path_change_point", path_change_point);
    f("path_delete_point", path_delete_point);
    f("path_clear_points", path_clear_points);
    f("path_reverse", path_reverse);
    f("path_mirror", path_mirror);
    f("path_flip", path_flip);
    f("path_rotate", path_rotate);
    f("path_rescale", path_rescale);
    f("path_shift", path_shift);
    f("ds_set_precision", ds_set_precision);
    f("ds_exists", ds_exists);
    f("ds_stack_create", ds_stack_create);
    f("ds_stack_destroy", ds_stack_destroy);
    f("ds_stack_clear", ds_stack_clear);
    f("ds_stack_copy", ds_stack_copy);
    f("ds_stack_size", ds_stack_size);
    f("ds_stack_empty", ds_stack_empty);
    f("ds_stack_push", ds_stack_push);
    f("ds_stack_pop", ds_stack_pop);
    f("ds_stack_top", ds_stack_top);
    f("ds_stack_write", ds_stack_write);
    f("ds_stack_read", ds_stack_read);
    f("ds_queue_create", ds_queue_create);
    f("ds_queue_destroy", ds_queue_destroy);
    f("ds_queue_clear", ds_queue_clear);
    f("ds_queue_copy", ds_queue_copy);
    f("ds_queue_size", ds_queue_size);
    f("ds_queue_empty", ds_queue_empty);
    f("ds_queue_enqueue", ds_queue_enqueue);
    f("ds_queue_dequeue", ds_queue_dequeue);
    f("ds_queue_head", ds_queue_head);
    f("ds_queue_tail", ds_queue_tail);
    f("ds_queue_write", ds_queue_write);
    f("ds_queue_read", ds_queue_read);
    f("ds_list_create", ds_list_create);
    f("ds_list_destroy", ds_list_destroy);
    f("ds_list_clear", ds_list_clear);
    f("ds_list_copy", ds_list_copy);
    f("ds_list_size", ds_list_size);
    f("ds_list_empty", ds_list_empty);
    f("ds_list_add", ds_list_add);
    f("ds_list_insert", ds_list_insert);
    f("ds_list_replace", ds_list_replace);
    f("ds_list_delete", ds_list_delete);
    f("ds_list_find_index", ds_list_find_index);
    f("ds_list_find_value", ds_list_find_value);
    f("ds_list_is_map", ds_list_is_map);
    f("ds_list_is_list", ds_list_is_list);
    f("ds_list_mark_as_list", ds_list_mark_as_list);
    f("ds_list_mark_as_map", ds_list_mark_as_map);
    f("ds_list_sort", ds_list_sort);
    f("ds_list_shuffle", ds_list_shuffle);
    f("ds_list_write", ds_list_write);
    f("ds_list_read", ds_list_read);
    f("ds_list_set", ds_list_set);
    f("ds_map_create", ds_map_create);
    f("ds_map_destroy", ds_map_destroy);
    f("ds_map_clear", ds_map_clear);
    f("ds_map_copy", ds_map_copy);
    f("ds_map_size", ds_map_size);
    f("ds_map_empty", ds_map_empty);
    f("ds_map_add", ds_map_add);
    f("ds_map_add_list", ds_map_add_list);
    f("ds_map_add_map", ds_map_add_map);
    f("ds_map_replace", ds_map_replace);
    f("ds_map_replace_map", ds_map_replace_map);
    f("ds_map_replace_list", ds_map_replace_list);
    f("ds_map_delete", ds_map_delete);
    f("ds_map_exists", ds_map_exists);
    f("ds_map_values_to_array", ds_map_values_to_array);
    f("ds_map_keys_to_array", ds_map_keys_to_array);
    f("ds_map_find_value", ds_map_find_value);
    f("ds_map_is_map", ds_map_is_map);
    f("ds_map_is_list", ds_map_is_list);
    f("ds_map_find_previous", ds_map_find_previous);
    f("ds_map_find_next", ds_map_find_next);
    f("ds_map_find_first", ds_map_find_first);
    f("ds_map_find_last", ds_map_find_last);
    f("ds_map_write", ds_map_write);
    f("ds_map_read", ds_map_read);
    f("ds_map_secure_save", ds_map_secure_save);
    f("ds_map_secure_load", ds_map_secure_load);
    f("ds_map_secure_load_buffer", ds_map_secure_load_buffer);
    f("ds_map_secure_save_buffer", ds_map_secure_save_buffer);
    f("ds_map_set", ds_map_set);
    f("ds_priority_create", ds_priority_create);
    f("ds_priority_destroy", ds_priority_destroy);
    f("ds_priority_clear", ds_priority_clear);
    f("ds_priority_copy", ds_priority_copy);
    f("ds_priority_size", ds_priority_size);
    f("ds_priority_empty", ds_priority_empty);
    f("ds_priority_add", ds_priority_add);
    f("ds_priority_change_priority", ds_priority_change_priority);
    f("ds_priority_find_priority", ds_priority_find_priority);
    f("ds_priority_delete_value", ds_priority_delete_value);
    f("ds_priority_delete_min", ds_priority_delete_min);
    f("ds_priority_find_min", ds_priority_find_min);
    f("ds_priority_delete_max", ds_priority_delete_max);
    f("ds_priority_find_max", ds_priority_find_max);
    f("ds_priority_write", ds_priority_write);
    f("ds_priority_read", ds_priority_read);
    f("ds_grid_create", ds_grid_create);
    f("ds_grid_destroy", ds_grid_destroy);
    f("ds_grid_copy", ds_grid_copy);
    f("ds_grid_resize", ds_grid_resize);
    f("ds_grid_width", ds_grid_width);
    f("ds_grid_height", ds_grid_height);
    f("ds_grid_clear", ds_grid_clear);
    f("ds_grid_set", ds_grid_set);
    f("ds_grid_add", ds_grid_add);
    f("ds_grid_multiply", ds_grid_multiply);
    f("ds_grid_set_region", ds_grid_set_region);
    f("ds_grid_add_region", ds_grid_add_region);
    f("ds_grid_multiply_region", ds_grid_multiply_region);
    f("ds_grid_set_disk", ds_grid_set_disk);
    f("ds_grid_add_disk", ds_grid_add_disk);
    f("ds_grid_multiply_disk", ds_grid_multiply_disk);
    f("ds_grid_set_grid_region", ds_grid_set_grid_region);
    f("ds_grid_add_grid_region", ds_grid_add_grid_region);
    f("ds_grid_multiply_grid_region", ds_grid_multiply_grid_region);
    f("ds_grid_get", ds_grid_get);
    f("ds_grid_get_sum", ds_grid_get_sum);
    f("ds_grid_get_max", ds_grid_get_max);
    f("ds_grid_get_min", ds_grid_get_min);
    f("ds_grid_get_mean", ds_grid_get_mean);
    f("ds_grid_get_disk_sum", ds_grid_get_disk_sum);
    f("ds_grid_get_disk_min", ds_grid_get_disk_min);
    f("ds_grid_get_disk_max", ds_grid_get_disk_max);
    f("ds_grid_get_disk_mean", ds_grid_get_disk_mean);
    f("ds_grid_value_exists", ds_grid_value_exists);
    f("ds_grid_value_x", ds_grid_value_x);
    f("ds_grid_value_y", ds_grid_value_y);
    f("ds_grid_value_disk_exists", ds_grid_value_disk_exists);
    f("ds_grid_value_disk_x", ds_grid_value_disk_x);
    f("ds_grid_value_disk_y", ds_grid_value_disk_y);
    f("ds_grid_shuffle", ds_grid_shuffle);
    f("ds_grid_write", ds_grid_write);
    f("ds_grid_read", ds_grid_read);
    f("ds_grid_sort", ds_grid_sort);
    f("ds_grid_set", ds_grid_set);
    f("ds_grid_get", ds_grid_get);
    f("buffer_create", buffer_create);
    f("buffer_write", buffer_write);
    f("buffer_read", buffer_read);
    f("buffer_seek", buffer_seek);
    f("buffer_get_surface", buffer_get_surface);
    f("buffer_set_surface", buffer_set_surface);
    f("buffer_delete", buffer_delete);
    f("buffer_exists", buffer_exists);
    f("buffer_get_type", buffer_get_type);
    f("buffer_get_alignment", buffer_get_alignment);
    f("buffer_poke", buffer_poke);
    f("buffer_peek", buffer_peek);
    f("buffer_save", buffer_save);
    f("buffer_save_ext", buffer_save_ext);
    f("buffer_load", buffer_load);
    f("buffer_load_ext", buffer_load_ext);
    f("buffer_load_partial", buffer_load_partial);
    f("buffer_copy", buffer_copy);
    f("buffer_fill", buffer_fill);
    f("buffer_get_size", buffer_get_size);
    f("buffer_tell", buffer_tell);
    f("buffer_resize", buffer_resize);
    f("buffer_md5", buffer_md5);
    f("buffer_sha1", buffer_sha1);
    f("buffer_crc32", buffer_crc32);
    f("buffer_base64_encode", buffer_base64_encode);
    f("buffer_base64_decode", buffer_base64_decode);
    f("buffer_base64_decode_ext", buffer_base64_decode_ext);
    f("buffer_sizeof", buffer_sizeof);
    f("buffer_get_address", buffer_get_address);
    f("buffer_create_from_vertex_buffer", buffer_create_from_vertex_buffer);
    f("buffer_create_from_vertex_buffer_ext", buffer_create_from_vertex_buffer_ext);
    f("buffer_copy_from_vertex_buffer", buffer_copy_from_vertex_buffer);
    f("buffer_async_group_begin", buffer_async_group_begin);
    f("buffer_async_group_option", buffer_async_group_option);
    f("buffer_async_group_end", buffer_async_group_end);
    f("buffer_load_async", buffer_load_async);
    f("buffer_save_async", buffer_save_async);
    f("buffer_compress", buffer_compress);
    f("buffer_decompress", buffer_decompress);
}

/// @desc Applies a GML interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
function catspeak_ext_session_add_gml_random(_class) {
    var f = catspeak_session_add_function;
    var c = catspeak_session_add_constant;
    
    f("random", random);
    f("random_range", random_range);
    f("irandom", irandom);
    f("irandom_range", irandom_range);
    f("random_set_seed", random_set_seed);
    f("random_get_seed", random_get_seed);
    f("randomize", randomize);
    f("randomise", randomise);
    f("choose", choose);
}

/// @desc Applies a GML interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
function catspeak_ext_session_add_gml_strings(_class) {
    var f = catspeak_session_add_function;
    var c = catspeak_session_add_constant;
    
    f("string", string);
    f("string_format", string_format);
    f("chr", chr);
    f("ansi_char", ansi_char);
    f("ord", ord);
    f("string_length", string_length);
    f("string_byte_length", string_byte_length);
    f("string_pos", string_pos);
    f("string_pos_ext", string_pos_ext);
    f("string_last_pos", string_last_pos);
    f("string_last_pos_ext", string_last_pos_ext);
    f("string_copy", string_copy);
    f("string_char_at", string_char_at);
    f("string_ord_at", string_ord_at);
    f("string_byte_at", string_byte_at);
    f("string_set_byte_at", string_set_byte_at);
    f("string_delete", string_delete);
    f("string_insert", string_insert);
    f("string_lower", string_lower);
    f("string_upper", string_upper);
    f("string_repeat", string_repeat);
    f("string_letters", string_letters);
    f("string_digits", string_digits);
    f("string_lettersdigits", string_lettersdigits);
    f("string_replace", string_replace);
    f("string_replace_all", string_replace_all);
    f("string_count", string_count);
    f("string_hash_to_newline", string_hash_to_newline);
    f("string_width", string_width);
    f("string_height", string_height);
    f("string_width_ext", string_width_ext);
    f("string_height_ext", string_height_ext);
}

/// @desc Applies a GML interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
function catspeak_ext_session_add_gml_scripts(_class) {
    var f = catspeak_session_add_function;
    var c = catspeak_session_add_constant;
    
    f("method", method);
    f("method_get_index", method_get_index);
    f("method_get_self", method_get_self);
    f("script_exists", script_exists);
    f("script_get_name", script_get_name);
    f("script_execute", script_execute);
    f("script_execute_ext", script_execute_ext);
}

/// @desc Applies a GML interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
function catspeak_ext_session_add_gml_input(_class) {
    var f = catspeak_session_add_function;
    var c = catspeak_session_add_constant;
    c("timezone_local", timezone_local);
    c("timezone_utc", timezone_utc);
    c("vk_nokey", vk_nokey);
    c("vk_anykey", vk_anykey);
    c("vk_enter", vk_enter);
    c("vk_return", vk_return);
    c("vk_shift", vk_shift);
    c("vk_control", vk_control);
    c("vk_alt", vk_alt);
    c("vk_escape", vk_escape);
    c("vk_space", vk_space);
    c("vk_backspace", vk_backspace);
    c("vk_tab", vk_tab);
    c("vk_pause", vk_pause);
    c("vk_printscreen", vk_printscreen);
    c("vk_left", vk_left);
    c("vk_right", vk_right);
    c("vk_up", vk_up);
    c("vk_down", vk_down);
    c("vk_home", vk_home);
    c("vk_end", vk_end);
    c("vk_delete", vk_delete);
    c("vk_insert", vk_insert);
    c("vk_pageup", vk_pageup);
    c("vk_pagedown", vk_pagedown);
    c("vk_f1", vk_f1);
    c("vk_f2", vk_f2);
    c("vk_f3", vk_f3);
    c("vk_f4", vk_f4);
    c("vk_f5", vk_f5);
    c("vk_f6", vk_f6);
    c("vk_f7", vk_f7);
    c("vk_f8", vk_f8);
    c("vk_f9", vk_f9);
    c("vk_f10", vk_f10);
    c("vk_f11", vk_f11);
    c("vk_f12", vk_f12);
    c("vk_numpad0", vk_numpad0);
    c("vk_numpad1", vk_numpad1);
    c("vk_numpad2", vk_numpad2);
    c("vk_numpad3", vk_numpad3);
    c("vk_numpad4", vk_numpad4);
    c("vk_numpad5", vk_numpad5);
    c("vk_numpad6", vk_numpad6);
    c("vk_numpad7", vk_numpad7);
    c("vk_numpad8", vk_numpad8);
    c("vk_numpad9", vk_numpad9);
    c("vk_divide", vk_divide);
    c("vk_multiply", vk_multiply);
    c("vk_subtract", vk_subtract);
    c("vk_add", vk_add);
    c("vk_decimal", vk_decimal);
    c("vk_lshift", vk_lshift);
    c("vk_lcontrol", vk_lcontrol);
    c("vk_lalt", vk_lalt);
    c("vk_rshift", vk_rshift);
    c("vk_rcontrol", vk_rcontrol);
    c("vk_ralt", vk_ralt);
    c("mb_any", mb_any);
    c("mb_none", mb_none);
    c("mb_left", mb_left);
    c("mb_right", mb_right);
    c("mb_middle", mb_middle);
    c("gp_face1", gp_face1);
    c("gp_face2", gp_face2);
    c("gp_face3", gp_face3);
    c("gp_face4", gp_face4);
    c("gp_shoulderl", gp_shoulderl);
    c("gp_shoulderr", gp_shoulderr);
    c("gp_shoulderlb", gp_shoulderlb);
    c("gp_shoulderrb", gp_shoulderrb);
    c("gp_select", gp_select);
    c("gp_start", gp_start);
    c("gp_stickl", gp_stickl);
    c("gp_stickr", gp_stickr);
    c("gp_padu", gp_padu);
    c("gp_padd", gp_padd);
    c("gp_padl", gp_padl);
    c("gp_padr", gp_padr);
    c("gp_axislh", gp_axislh);
    c("gp_axislv", gp_axislv);
    c("gp_axisrh", gp_axisrh);
    c("gp_axisrv", gp_axisrv);
    c("kbv_type_default", kbv_type_default);
    c("kbv_type_ascii", kbv_type_ascii);
    c("kbv_type_url", kbv_type_url);
    c("kbv_type_email", kbv_type_email);
    c("kbv_type_numbers", kbv_type_numbers);
    c("kbv_type_phone", kbv_type_phone);
    c("kbv_type_phone_name", kbv_type_phone_name);
    c("kbv_returnkey_default", kbv_returnkey_default);
    c("kbv_returnkey_go", kbv_returnkey_go);
    c("kbv_returnkey_google", kbv_returnkey_google);
    c("kbv_returnkey_join", kbv_returnkey_join);
    c("kbv_returnkey_next", kbv_returnkey_next);
    c("kbv_returnkey_route", kbv_returnkey_route);
    c("kbv_returnkey_search", kbv_returnkey_search);
    c("kbv_returnkey_send", kbv_returnkey_send);
    c("kbv_returnkey_yahoo", kbv_returnkey_yahoo);
    c("kbv_returnkey_done", kbv_returnkey_done);
    c("kbv_returnkey_continue", kbv_returnkey_continue);
    c("kbv_returnkey_emergency", kbv_returnkey_emergency);
    c("kbv_autocapitalize_none", kbv_autocapitalize_none);
    c("kbv_autocapitalize_words", kbv_autocapitalize_words);
    c("kbv_autocapitalize_sentences", kbv_autocapitalize_sentences);
    c("kbv_autocapitalize_characters", kbv_autocapitalize_characters);
    f("clipboard_has_text", clipboard_has_text);
    f("clipboard_set_text", clipboard_set_text);
    f("clipboard_get_text", clipboard_get_text);
    f("date_current_datetime", date_current_datetime);
    f("date_create_datetime", date_create_datetime);
    f("date_valid_datetime", date_valid_datetime);
    f("date_inc_year", date_inc_year);
    f("date_inc_month", date_inc_month);
    f("date_inc_week", date_inc_week);
    f("date_inc_day", date_inc_day);
    f("date_inc_hour", date_inc_hour);
    f("date_inc_minute", date_inc_minute);
    f("date_inc_second", date_inc_second);
    f("date_get_year", date_get_year);
    f("date_get_month", date_get_month);
    f("date_get_week", date_get_week);
    f("date_get_day", date_get_day);
    f("date_get_hour", date_get_hour);
    f("date_get_minute", date_get_minute);
    f("date_get_second", date_get_second);
    f("date_get_weekday", date_get_weekday);
    f("date_get_day_of_year", date_get_day_of_year);
    f("date_get_hour_of_year", date_get_hour_of_year);
    f("date_get_minute_of_year", date_get_minute_of_year);
    f("date_get_second_of_year", date_get_second_of_year);
    f("date_year_span", date_year_span);
    f("date_month_span", date_month_span);
    f("date_week_span", date_week_span);
    f("date_day_span", date_day_span);
    f("date_hour_span", date_hour_span);
    f("date_minute_span", date_minute_span);
    f("date_second_span", date_second_span);
    f("date_compare_datetime", date_compare_datetime);
    f("date_compare_date", date_compare_date);
    f("date_compare_time", date_compare_time);
    f("date_date_of", date_date_of);
    f("date_time_of", date_time_of);
    f("date_datetime_string", date_datetime_string);
    f("date_date_string", date_date_string);
    f("date_time_string", date_time_string);
    f("date_days_in_month", date_days_in_month);
    f("date_days_in_year", date_days_in_year);
    f("date_leap_year", date_leap_year);
    f("date_is_today", date_is_today);
    f("date_set_timezone", date_set_timezone);
    f("date_get_timezone", date_get_timezone);
    f("keyboard_set_map", keyboard_set_map);
    f("keyboard_get_map", keyboard_get_map);
    f("keyboard_unset_map", keyboard_unset_map);
    f("keyboard_check", keyboard_check);
    f("keyboard_check_pressed", keyboard_check_pressed);
    f("keyboard_check_released", keyboard_check_released);
    f("keyboard_check_direct", keyboard_check_direct);
    f("keyboard_get_numlock", keyboard_get_numlock);
    f("keyboard_set_numlock", keyboard_set_numlock);
    f("keyboard_key_press", keyboard_key_press);
    f("keyboard_key_release", keyboard_key_release);
    f("keyboard_clear", keyboard_clear);
    f("io_clear", io_clear);
    f("mouse_check_button", mouse_check_button);
    f("mouse_check_button_pressed", mouse_check_button_pressed);
    f("mouse_check_button_released", mouse_check_button_released);
    f("mouse_wheel_up", mouse_wheel_up);
    f("mouse_wheel_down", mouse_wheel_down);
    f("mouse_clear", mouse_clear);
    f("clickable_add", clickable_add);
    f("clickable_add_ext", clickable_add_ext);
    f("clickable_change", clickable_change);
    f("clickable_change_ext", clickable_change_ext);
    f("clickable_delete", clickable_delete);
    f("clickable_exists", clickable_exists);
    f("clickable_set_style", clickable_set_style);
    f("virtual_key_add", virtual_key_add);
    f("virtual_key_hide", virtual_key_hide);
    f("virtual_key_delete", virtual_key_delete);
    f("virtual_key_show", virtual_key_show);
    f("gamepad_is_supported", gamepad_is_supported);
    f("gamepad_get_device_count", gamepad_get_device_count);
    f("gamepad_is_connected", gamepad_is_connected);
    f("gamepad_get_description", gamepad_get_description);
    f("gamepad_get_button_threshold", gamepad_get_button_threshold);
    f("gamepad_set_button_threshold", gamepad_set_button_threshold);
    f("gamepad_get_axis_deadzone", gamepad_get_axis_deadzone);
    f("gamepad_set_axis_deadzone", gamepad_set_axis_deadzone);
    f("gamepad_button_count", gamepad_button_count);
    f("gamepad_button_check", gamepad_button_check);
    f("gamepad_button_check_pressed", gamepad_button_check_pressed);
    f("gamepad_button_check_released", gamepad_button_check_released);
    f("gamepad_button_value", gamepad_button_value);
    f("gamepad_axis_count", gamepad_axis_count);
    f("gamepad_axis_value", gamepad_axis_value);
    f("gamepad_set_vibration", gamepad_set_vibration);
    f("gamepad_set_colour", gamepad_set_colour);
    f("gamepad_set_color", gamepad_set_color);
    f("gamepad_hat_count", gamepad_hat_count);
    f("gamepad_hat_value", gamepad_hat_value);
    f("gamepad_remove_mapping", gamepad_remove_mapping);
    f("gamepad_test_mapping", gamepad_test_mapping);
    f("gamepad_get_mapping", gamepad_get_mapping);
    f("gamepad_get_guid", gamepad_get_guid);
    f("gamepad_set_option", gamepad_set_option);
    f("gamepad_get_option", gamepad_get_option);
    f("gesture_drag_time", gesture_drag_time);
    f("gesture_drag_distance", gesture_drag_distance);
    f("gesture_flick_speed", gesture_flick_speed);
    f("gesture_double_tap_time", gesture_double_tap_time);
    f("gesture_double_tap_distance", gesture_double_tap_distance);
    f("gesture_pinch_distance", gesture_pinch_distance);
    f("gesture_pinch_angle_towards", gesture_pinch_angle_towards);
    f("gesture_pinch_angle_away", gesture_pinch_angle_away);
    f("gesture_rotate_time", gesture_rotate_time);
    f("gesture_rotate_angle", gesture_rotate_angle);
    f("gesture_tap_count", gesture_tap_count);
    f("gesture_get_drag_time", gesture_get_drag_time);
    f("gesture_get_drag_distance", gesture_get_drag_distance);
    f("gesture_get_flick_speed", gesture_get_flick_speed);
    f("gesture_get_double_tap_time", gesture_get_double_tap_time);
    f("gesture_get_double_tap_distance", gesture_get_double_tap_distance);
    f("gesture_get_pinch_distance", gesture_get_pinch_distance);
    f("gesture_get_pinch_angle_towards", gesture_get_pinch_angle_towards);
    f("gesture_get_pinch_angle_away", gesture_get_pinch_angle_away);
    f("gesture_get_rotate_time", gesture_get_rotate_time);
    f("gesture_get_rotate_angle", gesture_get_rotate_angle);
    f("gesture_get_tap_count", gesture_get_tap_count);
    f("keyboard_virtual_show", keyboard_virtual_show);
    f("keyboard_virtual_hide", keyboard_virtual_hide);
    f("keyboard_virtual_status", keyboard_virtual_status);
    f("keyboard_virtual_height", keyboard_virtual_height);
}

/// @desc Applies a GML interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
function catspeak_ext_session_add_gml_audio(_class) {
    var f = catspeak_session_add_function;
    var c = catspeak_session_add_constant;
    c("audio_falloff_none", audio_falloff_none);
    c("audio_falloff_inverse_distance", audio_falloff_inverse_distance);
    c("audio_falloff_inverse_distance_clamped", audio_falloff_inverse_distance_clamped);
    c("audio_falloff_linear_distance", audio_falloff_linear_distance);
    c("audio_falloff_linear_distance_clamped", audio_falloff_linear_distance_clamped);
    c("audio_falloff_exponent_distance", audio_falloff_exponent_distance);
    c("audio_falloff_exponent_distance_clamped", audio_falloff_exponent_distance_clamped);
    c("audio_mono", audio_mono);
    c("audio_stereo", audio_stereo);
    c("audio_3d", audio_3d);
    f("audio_listener_position", audio_listener_position);
    f("audio_listener_velocity", audio_listener_velocity);
    f("audio_listener_orientation", audio_listener_orientation);
    f("audio_emitter_position", audio_emitter_position);
    f("audio_emitter_create", audio_emitter_create);
    f("audio_emitter_free", audio_emitter_free);
    f("audio_emitter_exists", audio_emitter_exists);
    f("audio_emitter_pitch", audio_emitter_pitch);
    f("audio_emitter_velocity", audio_emitter_velocity);
    f("audio_emitter_falloff", audio_emitter_falloff);
    f("audio_emitter_gain", audio_emitter_gain);
    f("audio_play_sound", audio_play_sound);
    f("audio_play_sound_on", audio_play_sound_on);
    f("audio_play_sound_at", audio_play_sound_at);
    f("audio_stop_sound", audio_stop_sound);
    f("audio_resume_sound", audio_resume_sound);
    f("audio_pause_sound", audio_pause_sound);
    f("audio_channel_num", audio_channel_num);
    f("audio_sound_length", audio_sound_length);
    f("audio_get_type", audio_get_type);
    f("audio_falloff_set_model", audio_falloff_set_model);
    f("audio_master_gain", audio_master_gain);
    f("audio_sound_gain", audio_sound_gain);
    f("audio_sound_pitch", audio_sound_pitch);
    f("audio_stop_all", audio_stop_all);
    f("audio_resume_all", audio_resume_all);
    f("audio_pause_all", audio_pause_all);
    f("audio_is_playing", audio_is_playing);
    f("audio_is_paused", audio_is_paused);
    f("audio_exists", audio_exists);
    f("audio_system_is_available", audio_system_is_available);
    f("audio_sound_is_playable", audio_sound_is_playable);
    f("audio_emitter_get_gain", audio_emitter_get_gain);
    f("audio_emitter_get_pitch", audio_emitter_get_pitch);
    f("audio_emitter_get_x", audio_emitter_get_x);
    f("audio_emitter_get_y", audio_emitter_get_y);
    f("audio_emitter_get_z", audio_emitter_get_z);
    f("audio_emitter_get_vx", audio_emitter_get_vx);
    f("audio_emitter_get_vy", audio_emitter_get_vy);
    f("audio_emitter_get_vz", audio_emitter_get_vz);
    f("audio_listener_set_position", audio_listener_set_position);
    f("audio_listener_set_velocity", audio_listener_set_velocity);
    f("audio_listener_set_orientation", audio_listener_set_orientation);
    f("audio_listener_get_data", audio_listener_get_data);
    f("audio_set_master_gain", audio_set_master_gain);
    f("audio_get_master_gain", audio_get_master_gain);
    f("audio_sound_get_gain", audio_sound_get_gain);
    f("audio_sound_get_pitch", audio_sound_get_pitch);
    f("audio_get_name", audio_get_name);
    f("audio_sound_set_track_position", audio_sound_set_track_position);
    f("audio_sound_get_track_position", audio_sound_get_track_position);
    f("audio_create_stream", audio_create_stream);
    f("audio_destroy_stream", audio_destroy_stream);
    f("audio_create_sync_group", audio_create_sync_group);
    f("audio_destroy_sync_group", audio_destroy_sync_group);
    f("audio_play_in_sync_group", audio_play_in_sync_group);
    f("audio_start_sync_group", audio_start_sync_group);
    f("audio_stop_sync_group", audio_stop_sync_group);
    f("audio_pause_sync_group", audio_pause_sync_group);
    f("audio_resume_sync_group", audio_resume_sync_group);
    f("audio_sync_group_get_track_pos", audio_sync_group_get_track_pos);
    f("audio_sync_group_debug", audio_sync_group_debug);
    f("audio_sync_group_is_playing", audio_sync_group_is_playing);
    f("audio_debug", audio_debug);
    f("audio_group_load", audio_group_load);
    f("audio_group_unload", audio_group_unload);
    f("audio_group_is_loaded", audio_group_is_loaded);
    f("audio_group_load_progress", audio_group_load_progress);
    f("audio_group_name", audio_group_name);
    f("audio_group_stop_all", audio_group_stop_all);
    f("audio_group_set_gain", audio_group_set_gain);
    f("audio_create_buffer_sound", audio_create_buffer_sound);
    f("audio_free_buffer_sound", audio_free_buffer_sound);
    f("audio_create_play_queue", audio_create_play_queue);
    f("audio_free_play_queue", audio_free_play_queue);
    f("audio_queue_sound", audio_queue_sound);
    f("audio_get_recorder_count", audio_get_recorder_count);
    f("audio_get_recorder_info", audio_get_recorder_info);
    f("audio_start_recording", audio_start_recording);
    f("audio_stop_recording", audio_stop_recording);
    f("audio_sound_get_listener_mask", audio_sound_get_listener_mask);
    f("audio_emitter_get_listener_mask", audio_emitter_get_listener_mask);
    f("audio_get_listener_mask", audio_get_listener_mask);
    f("audio_sound_set_listener_mask", audio_sound_set_listener_mask);
    f("audio_emitter_set_listener_mask", audio_emitter_set_listener_mask);
    f("audio_set_listener_mask", audio_set_listener_mask);
    f("audio_get_listener_count", audio_get_listener_count);
    f("audio_get_listener_info", audio_get_listener_info);
}

/// @desc Applies a GML interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
function catspeak_ext_session_add_gml_graphics(_class) {
    var f = catspeak_session_add_function;
    var c = catspeak_session_add_constant;
    c("bboxmode_automatic", bboxmode_automatic);
    c("bboxmode_fullimage", bboxmode_fullimage);
    c("bboxmode_manual", bboxmode_manual);
    c("bboxkind_precise", bboxkind_precise);
    c("bboxkind_rectangular", bboxkind_rectangular);
    c("bboxkind_ellipse", bboxkind_ellipse);
    c("bboxkind_diamond", bboxkind_diamond);
    c("c_aqua", c_aqua);
    c("c_black", c_black);
    c("c_blue", c_blue);
    c("c_dkgray", c_dkgray);
    c("c_fuchsia", c_fuchsia);
    c("c_gray", c_gray);
    c("c_green", c_green);
    c("c_lime", c_lime);
    c("c_ltgray", c_ltgray);
    c("c_maroon", c_maroon);
    c("c_navy", c_navy);
    c("c_olive", c_olive);
    c("c_purple", c_purple);
    c("c_red", c_red);
    c("c_silver", c_silver);
    c("c_teal", c_teal);
    c("c_white", c_white);
    c("c_yellow", c_yellow);
    c("c_orange", c_orange);
    c("fa_left", fa_left);
    c("fa_center", fa_center);
    c("fa_right", fa_right);
    c("fa_top", fa_top);
    c("fa_middle", fa_middle);
    c("fa_bottom", fa_bottom);
    c("pr_pointlist", pr_pointlist);
    c("pr_linelist", pr_linelist);
    c("pr_linestrip", pr_linestrip);
    c("pr_trianglelist", pr_trianglelist);
    c("pr_trianglestrip", pr_trianglestrip);
    c("pr_trianglefan", pr_trianglefan);
    c("bm_normal", bm_normal);
    c("bm_add", bm_add);
    c("bm_max", bm_max);
    c("bm_subtract", bm_subtract);
    c("bm_zero", bm_zero);
    c("bm_one", bm_one);
    c("bm_src_colour", bm_src_colour);
    c("bm_inv_src_colour", bm_inv_src_colour);
    c("bm_src_color", bm_src_color);
    c("bm_inv_src_color", bm_inv_src_color);
    c("bm_src_alpha", bm_src_alpha);
    c("bm_inv_src_alpha", bm_inv_src_alpha);
    c("bm_dest_alpha", bm_dest_alpha);
    c("bm_inv_dest_alpha", bm_inv_dest_alpha);
    c("bm_dest_colour", bm_dest_colour);
    c("bm_inv_dest_colour", bm_inv_dest_colour);
    c("bm_dest_color", bm_dest_color);
    c("bm_inv_dest_color", bm_inv_dest_color);
    c("bm_src_alpha_sat", bm_src_alpha_sat);
    c("tf_point", tf_point);
    c("tf_linear", tf_linear);
    c("tf_anisotropic", tf_anisotropic);
    c("mip_off", mip_off);
    c("mip_on", mip_on);
    c("mip_markedonly", mip_markedonly);
    c("spritespeed_framespersecond", spritespeed_framespersecond);
    c("spritespeed_framespergameframe", spritespeed_framespergameframe);
    c("cmpfunc_never", cmpfunc_never);
    c("cmpfunc_less", cmpfunc_less);
    c("cmpfunc_equal", cmpfunc_equal);
    c("cmpfunc_lessequal", cmpfunc_lessequal);
    c("cmpfunc_greater", cmpfunc_greater);
    c("cmpfunc_notequal", cmpfunc_notequal);
    c("cmpfunc_greaterequal", cmpfunc_greaterequal);
    c("cmpfunc_always", cmpfunc_always);
    c("cull_noculling", cull_noculling);
    c("cull_clockwise", cull_clockwise);
    c("cull_counterclockwise", cull_counterclockwise);
    c("lighttype_dir", lighttype_dir);
    c("lighttype_point", lighttype_point);
    c("vertex_usage_position", vertex_usage_position);
    c("vertex_usage_colour", vertex_usage_colour);
    c("vertex_usage_color", vertex_usage_color);
    c("vertex_usage_normal", vertex_usage_normal);
    c("vertex_usage_texcoord", vertex_usage_texcoord);
    c("vertex_usage_blendweight", vertex_usage_blendweight);
    c("vertex_usage_blendindices", vertex_usage_blendindices);
    c("vertex_usage_psize", vertex_usage_psize);
    c("vertex_usage_tangent", vertex_usage_tangent);
    c("vertex_usage_binormal", vertex_usage_binormal);
    c("vertex_usage_fog", vertex_usage_fog);
    c("vertex_usage_depth", vertex_usage_depth);
    c("vertex_usage_sample", vertex_usage_sample);
    c("vertex_type_float1", vertex_type_float1);
    c("vertex_type_float2", vertex_type_float2);
    c("vertex_type_float3", vertex_type_float3);
    c("vertex_type_float4", vertex_type_float4);
    c("vertex_type_colour", vertex_type_colour);
    c("vertex_type_color", vertex_type_color);
    c("vertex_type_ubyte4", vertex_type_ubyte4);
    f("draw_self", draw_self);
    f("draw_sprite", draw_sprite);
    f("draw_sprite_pos", draw_sprite_pos);
    f("draw_sprite_ext", draw_sprite_ext);
    f("draw_sprite_stretched", draw_sprite_stretched);
    f("draw_sprite_stretched_ext", draw_sprite_stretched_ext);
    f("draw_sprite_tiled", draw_sprite_tiled);
    f("draw_sprite_tiled_ext", draw_sprite_tiled_ext);
    f("draw_sprite_part", draw_sprite_part);
    f("draw_sprite_part_ext", draw_sprite_part_ext);
    f("draw_sprite_general", draw_sprite_general);
    f("draw_clear", draw_clear);
    f("draw_clear_alpha", draw_clear_alpha);
    f("draw_point", draw_point);
    f("draw_line", draw_line);
    f("draw_line_width", draw_line_width);
    f("draw_rectangle", draw_rectangle);
    f("draw_roundrect", draw_roundrect);
    f("draw_roundrect_ext", draw_roundrect_ext);
    f("draw_triangle", draw_triangle);
    f("draw_circle", draw_circle);
    f("draw_ellipse", draw_ellipse);
    f("draw_set_circle_precision", draw_set_circle_precision);
    f("draw_arrow", draw_arrow);
    f("draw_button", draw_button);
    f("draw_path", draw_path);
    f("draw_healthbar", draw_healthbar);
    f("draw_getpixel", draw_getpixel);
    f("draw_getpixel_ext", draw_getpixel_ext);
    f("draw_set_colour", draw_set_colour);
    f("draw_set_color", draw_set_color);
    f("draw_set_alpha", draw_set_alpha);
    f("draw_get_colour", draw_get_colour);
    f("draw_get_color", draw_get_color);
    f("draw_get_alpha", draw_get_alpha);
    f("merge_colour", merge_colour);
    f("make_colour_rgb", make_colour_rgb);
    f("make_colour_hsv", make_colour_hsv);
    f("colour_get_red", colour_get_red);
    f("colour_get_green", colour_get_green);
    f("colour_get_blue", colour_get_blue);
    f("colour_get_hue", colour_get_hue);
    f("colour_get_saturation", colour_get_saturation);
    f("colour_get_value", colour_get_value);
    f("merge_color", merge_color);
    f("make_color_rgb", make_color_rgb);
    f("make_color_hsv", make_color_hsv);
    f("color_get_red", color_get_red);
    f("color_get_green", color_get_green);
    f("color_get_blue", color_get_blue);
    f("color_get_hue", color_get_hue);
    f("color_get_saturation", color_get_saturation);
    f("color_get_value", color_get_value);
    f("merge_color", merge_color);
    f("draw_set_font", draw_set_font);
    f("draw_get_font", draw_get_font);
    f("draw_set_halign", draw_set_halign);
    f("draw_get_halign", draw_get_halign);
    f("draw_set_valign", draw_set_valign);
    f("draw_get_valign", draw_get_valign);
    f("draw_text", draw_text);
    f("draw_text_ext", draw_text_ext);
    f("draw_text_transformed", draw_text_transformed);
    f("draw_text_ext_transformed", draw_text_ext_transformed);
    f("draw_text_colour", draw_text_colour);
    f("draw_text_ext_colour", draw_text_ext_colour);
    f("draw_text_transformed_colour", draw_text_transformed_colour);
    f("draw_text_ext_transformed_colour", draw_text_ext_transformed_colour);
    f("draw_text_color", draw_text_color);
    f("draw_text_ext_color", draw_text_ext_color);
    f("draw_text_transformed_color", draw_text_transformed_color);
    f("draw_text_ext_transformed_color", draw_text_ext_transformed_color);
    f("draw_point_colour", draw_point_colour);
    f("draw_line_colour", draw_line_colour);
    f("draw_line_width_colour", draw_line_width_colour);
    f("draw_rectangle_colour", draw_rectangle_colour);
    f("draw_roundrect_colour", draw_roundrect_colour);
    f("draw_roundrect_colour_ext", draw_roundrect_colour_ext);
    f("draw_triangle_colour", draw_triangle_colour);
    f("draw_circle_colour", draw_circle_colour);
    f("draw_ellipse_colour", draw_ellipse_colour);
    f("draw_point_color", draw_point_color);
    f("draw_line_color", draw_line_color);
    f("draw_line_width_color", draw_line_width_color);
    f("draw_rectangle_color", draw_rectangle_color);
    f("draw_roundrect_color", draw_roundrect_color);
    f("draw_roundrect_color_ext", draw_roundrect_color_ext);
    f("draw_triangle_color", draw_triangle_color);
    f("draw_circle_color", draw_circle_color);
    f("draw_ellipse_color", draw_ellipse_color);
    f("draw_primitive_begin", draw_primitive_begin);
    f("draw_vertex", draw_vertex);
    f("draw_vertex_colour", draw_vertex_colour);
    f("draw_vertex_color", draw_vertex_color);
    f("draw_primitive_end", draw_primitive_end);
    f("sprite_get_uvs", sprite_get_uvs);
    f("font_get_uvs", font_get_uvs);
    f("sprite_get_texture", sprite_get_texture);
    f("font_get_texture", font_get_texture);
    f("texture_get_width", texture_get_width);
    f("texture_get_height", texture_get_height);
    f("texture_get_uvs", texture_get_uvs);
    f("draw_primitive_begin_texture", draw_primitive_begin_texture);
    f("draw_vertex_texture", draw_vertex_texture);
    f("draw_vertex_texture_colour", draw_vertex_texture_colour);
    f("draw_vertex_texture_color", draw_vertex_texture_color);
    f("texture_global_scale", texture_global_scale);
    f("surface_create", surface_create);
    f("surface_create_ext", surface_create_ext);
    f("surface_resize", surface_resize);
    f("surface_free", surface_free);
    f("surface_exists", surface_exists);
    f("surface_get_width", surface_get_width);
    f("surface_get_height", surface_get_height);
    f("surface_get_texture", surface_get_texture);
    f("surface_set_target", surface_set_target);
    f("surface_set_target_ext", surface_set_target_ext);
    f("surface_get_target", surface_get_target);
    f("surface_get_target_ext", surface_get_target_ext);
    f("surface_reset_target", surface_reset_target);
    f("surface_depth_disable", surface_depth_disable);
    f("surface_get_depth_disable", surface_get_depth_disable);
    f("draw_surface", draw_surface);
    f("draw_surface_stretched", draw_surface_stretched);
    f("draw_surface_tiled", draw_surface_tiled);
    f("draw_surface_part", draw_surface_part);
    f("draw_surface_ext", draw_surface_ext);
    f("draw_surface_stretched_ext", draw_surface_stretched_ext);
    f("draw_surface_tiled_ext", draw_surface_tiled_ext);
    f("draw_surface_part_ext", draw_surface_part_ext);
    f("draw_surface_general", draw_surface_general);
    f("surface_getpixel", surface_getpixel);
    f("surface_getpixel_ext", surface_getpixel_ext);
    f("surface_save", surface_save);
    f("surface_save_part", surface_save_part);
    f("surface_copy", surface_copy);
    f("surface_copy_part", surface_copy_part);
    f("application_surface_draw_enable", application_surface_draw_enable);
    f("application_get_position", application_get_position);
    f("application_surface_enable", application_surface_enable);
    f("application_surface_is_enabled", application_surface_is_enabled);
    f("draw_highscore", draw_highscore);
    f("sprite_exists", sprite_exists);
    f("sprite_get_name", sprite_get_name);
    f("sprite_get_number", sprite_get_number);
    f("sprite_get_width", sprite_get_width);
    f("sprite_get_height", sprite_get_height);
    f("sprite_get_xoffset", sprite_get_xoffset);
    f("sprite_get_yoffset", sprite_get_yoffset);
    f("sprite_get_bbox_mode", sprite_get_bbox_mode);
    f("sprite_get_bbox_left", sprite_get_bbox_left);
    f("sprite_get_bbox_right", sprite_get_bbox_right);
    f("sprite_get_bbox_top", sprite_get_bbox_top);
    f("sprite_get_bbox_bottom", sprite_get_bbox_bottom);
    f("sprite_set_bbox_mode", sprite_set_bbox_mode);
    f("sprite_set_bbox", sprite_set_bbox);
    f("sprite_save", sprite_save);
    f("sprite_save_strip", sprite_save_strip);
    f("sprite_set_cache_size", sprite_set_cache_size);
    f("sprite_set_cache_size_ext", sprite_set_cache_size_ext);
    f("sprite_get_tpe", sprite_get_tpe);
    f("sprite_prefetch", sprite_prefetch);
    f("sprite_prefetch_multi", sprite_prefetch_multi);
    f("sprite_flush", sprite_flush);
    f("sprite_flush_multi", sprite_flush_multi);
    f("sprite_set_speed", sprite_set_speed);
    f("sprite_get_speed_type", sprite_get_speed_type);
    f("sprite_get_speed", sprite_get_speed);
    f("texture_is_ready", texture_is_ready);
    f("texture_prefetch", texture_prefetch);
    f("texture_flush", texture_flush);
    f("texturegroup_get_textures", texturegroup_get_textures);
    f("texturegroup_get_sprites", texturegroup_get_sprites);
    f("texturegroup_get_fonts", texturegroup_get_fonts);
    f("texturegroup_get_tilesets", texturegroup_get_tilesets);
    f("texture_debug_messages", texture_debug_messages);
    f("font_exists", font_exists);
    f("font_get_name", font_get_name);
    f("font_get_fontname", font_get_fontname);
    f("font_get_bold", font_get_bold);
    f("font_get_italic", font_get_italic);
    f("font_get_first", font_get_first);
    f("font_get_last", font_get_last);
    f("font_get_size", font_get_size);
    f("font_set_cache_size", font_set_cache_size);
    f("sprite_set_offset", sprite_set_offset);
    f("sprite_duplicate", sprite_duplicate);
    f("sprite_assign", sprite_assign);
    f("sprite_merge", sprite_merge);
    f("sprite_add", sprite_add);
    f("sprite_replace", sprite_replace);
    f("sprite_create_from_surface", sprite_create_from_surface);
    f("sprite_add_from_surface", sprite_add_from_surface);
    f("sprite_delete", sprite_delete);
    f("sprite_set_alpha_from_sprite", sprite_set_alpha_from_sprite);
    f("sprite_collision_mask", sprite_collision_mask);
    f("font_add_enable_aa", font_add_enable_aa);
    f("font_add_get_enable_aa", font_add_get_enable_aa);
    f("font_add", font_add);
    f("font_add_sprite", font_add_sprite);
    f("font_add_sprite_ext", font_add_sprite_ext);
    f("font_replace_sprite", font_replace_sprite);
    f("font_replace_sprite_ext", font_replace_sprite_ext);
    f("font_delete", font_delete);
    f("draw_enable_drawevent", draw_enable_drawevent);
    f("draw_enable_swf_aa", draw_enable_swf_aa);
    f("draw_set_swf_aa_level", draw_set_swf_aa_level);
    f("draw_get_swf_aa_level", draw_get_swf_aa_level);
    f("draw_texture_flush", draw_texture_flush);
    f("draw_flush", draw_flush);
    f("gpu_set_blendenable", gpu_set_blendenable);
    f("gpu_set_ztestenable", gpu_set_ztestenable);
    f("gpu_set_zfunc", gpu_set_zfunc);
    f("gpu_set_zwriteenable", gpu_set_zwriteenable);
    f("gpu_set_fog", gpu_set_fog);
    f("gpu_set_cullmode", gpu_set_cullmode);
    f("gpu_set_blendmode", gpu_set_blendmode);
    f("gpu_set_blendmode_ext", gpu_set_blendmode_ext);
    f("gpu_set_blendmode_ext_sepalpha", gpu_set_blendmode_ext_sepalpha);
    f("gpu_set_colorwriteenable", gpu_set_colorwriteenable);
    f("gpu_set_colourwriteenable", gpu_set_colourwriteenable);
    f("gpu_set_alphatestenable", gpu_set_alphatestenable);
    f("gpu_set_alphatestref", gpu_set_alphatestref);
    f("gpu_set_texfilter", gpu_set_texfilter);
    f("gpu_set_texfilter_ext", gpu_set_texfilter_ext);
    f("gpu_set_texrepeat", gpu_set_texrepeat);
    f("gpu_set_texrepeat_ext", gpu_set_texrepeat_ext);
    f("gpu_set_tex_filter", gpu_set_tex_filter);
    f("gpu_set_tex_filter_ext", gpu_set_tex_filter_ext);
    f("gpu_set_tex_repeat", gpu_set_tex_repeat);
    f("gpu_set_tex_repeat_ext", gpu_set_tex_repeat_ext);
    f("gpu_set_tex_mip_filter", gpu_set_tex_mip_filter);
    f("gpu_set_tex_mip_filter_ext", gpu_set_tex_mip_filter_ext);
    f("gpu_set_tex_mip_bias", gpu_set_tex_mip_bias);
    f("gpu_set_tex_mip_bias_ext", gpu_set_tex_mip_bias_ext);
    f("gpu_set_tex_min_mip", gpu_set_tex_min_mip);
    f("gpu_set_tex_min_mip_ext", gpu_set_tex_min_mip_ext);
    f("gpu_set_tex_max_mip", gpu_set_tex_max_mip);
    f("gpu_set_tex_max_mip_ext", gpu_set_tex_max_mip_ext);
    f("gpu_set_tex_max_aniso", gpu_set_tex_max_aniso);
    f("gpu_set_tex_max_aniso_ext", gpu_set_tex_max_aniso_ext);
    f("gpu_set_tex_mip_enable", gpu_set_tex_mip_enable);
    f("gpu_set_tex_mip_enable_ext", gpu_set_tex_mip_enable_ext);
    f("gpu_get_blendenable", gpu_get_blendenable);
    f("gpu_get_ztestenable", gpu_get_ztestenable);
    f("gpu_get_zfunc", gpu_get_zfunc);
    f("gpu_get_zwriteenable", gpu_get_zwriteenable);
    f("gpu_get_fog", gpu_get_fog);
    f("gpu_get_cullmode", gpu_get_cullmode);
    f("gpu_get_blendmode", gpu_get_blendmode);
    f("gpu_get_blendmode_ext", gpu_get_blendmode_ext);
    f("gpu_get_blendmode_ext_sepalpha", gpu_get_blendmode_ext_sepalpha);
    f("gpu_get_blendmode_src", gpu_get_blendmode_src);
    f("gpu_get_blendmode_dest", gpu_get_blendmode_dest);
    f("gpu_get_blendmode_srcalpha", gpu_get_blendmode_srcalpha);
    f("gpu_get_blendmode_destalpha", gpu_get_blendmode_destalpha);
    f("gpu_get_colorwriteenable", gpu_get_colorwriteenable);
    f("gpu_get_colourwriteenable", gpu_get_colourwriteenable);
    f("gpu_get_alphatestenable", gpu_get_alphatestenable);
    f("gpu_get_alphatestref", gpu_get_alphatestref);
    f("gpu_get_texfilter", gpu_get_texfilter);
    f("gpu_get_texfilter_ext", gpu_get_texfilter_ext);
    f("gpu_get_texrepeat", gpu_get_texrepeat);
    f("gpu_get_texrepeat_ext", gpu_get_texrepeat_ext);
    f("gpu_get_tex_filter", gpu_get_tex_filter);
    f("gpu_get_tex_filter_ext", gpu_get_tex_filter_ext);
    f("gpu_get_tex_repeat", gpu_get_tex_repeat);
    f("gpu_get_tex_repeat_ext", gpu_get_tex_repeat_ext);
    f("gpu_get_tex_mip_filter", gpu_get_tex_mip_filter);
    f("gpu_get_tex_mip_filter_ext", gpu_get_tex_mip_filter_ext);
    f("gpu_get_tex_mip_bias", gpu_get_tex_mip_bias);
    f("gpu_get_tex_mip_bias_ext", gpu_get_tex_mip_bias_ext);
    f("gpu_get_tex_min_mip", gpu_get_tex_min_mip);
    f("gpu_get_tex_min_mip_ext", gpu_get_tex_min_mip_ext);
    f("gpu_get_tex_max_mip", gpu_get_tex_max_mip);
    f("gpu_get_tex_max_mip_ext", gpu_get_tex_max_mip_ext);
    f("gpu_get_tex_max_aniso", gpu_get_tex_max_aniso);
    f("gpu_get_tex_max_aniso_ext", gpu_get_tex_max_aniso_ext);
    f("gpu_get_tex_mip_enable", gpu_get_tex_mip_enable);
    f("gpu_get_tex_mip_enable_ext", gpu_get_tex_mip_enable_ext);
    f("gpu_push_state", gpu_push_state);
    f("gpu_pop_state", gpu_pop_state);
    f("gpu_get_state", gpu_get_state);
    f("gpu_set_state", gpu_set_state);
    f("draw_light_define_ambient", draw_light_define_ambient);
    f("draw_light_define_direction", draw_light_define_direction);
    f("draw_light_define_point", draw_light_define_point);
    f("draw_light_enable", draw_light_enable);
    f("draw_set_lighting", draw_set_lighting);
    f("draw_light_get_ambient", draw_light_get_ambient);
    f("draw_light_get", draw_light_get);
    f("draw_get_lighting", draw_get_lighting);
    f("shader_set", shader_set);
    f("shader_get_name", shader_get_name);
    f("shader_reset", shader_reset);
    f("shader_current", shader_current);
    f("shader_is_compiled", shader_is_compiled);
    f("shader_get_sampler_index", shader_get_sampler_index);
    f("shader_get_uniform", shader_get_uniform);
    f("shader_set_uniform_i", shader_set_uniform_i);
    f("shader_set_uniform_i_array", shader_set_uniform_i_array);
    f("shader_set_uniform_f", shader_set_uniform_f);
    f("shader_set_uniform_f_array", shader_set_uniform_f_array);
    f("shader_set_uniform_matrix", shader_set_uniform_matrix);
    f("shader_set_uniform_matrix_array", shader_set_uniform_matrix_array);
    f("shader_enable_corner_id", shader_enable_corner_id);
    f("texture_set_stage", texture_set_stage);
    f("texture_get_texel_width", texture_get_texel_width);
    f("texture_get_texel_height", texture_get_texel_height);
    f("vertex_format_begin", vertex_format_begin);
    f("vertex_format_end", vertex_format_end);
    f("vertex_format_delete", vertex_format_delete);
    f("vertex_format_add_position", vertex_format_add_position);
    f("vertex_format_add_position_3d", vertex_format_add_position_3d);
    f("vertex_format_add_colour", vertex_format_add_colour);
    f("vertex_format_add_color", vertex_format_add_color);
    f("vertex_format_add_normal", vertex_format_add_normal);
    f("vertex_format_add_texcoord", vertex_format_add_texcoord);
    f("vertex_format_add_custom", vertex_format_add_custom);
    f("vertex_create_buffer", vertex_create_buffer);
    f("vertex_create_buffer_ext", vertex_create_buffer_ext);
    f("vertex_delete_buffer", vertex_delete_buffer);
    f("vertex_begin", vertex_begin);
    f("vertex_end", vertex_end);
    f("vertex_position", vertex_position);
    f("vertex_position_3d", vertex_position_3d);
    f("vertex_colour", vertex_colour);
    f("vertex_color", vertex_color);
    f("vertex_argb", vertex_argb);
    f("vertex_texcoord", vertex_texcoord);
    f("vertex_normal", vertex_normal);
    f("vertex_float1", vertex_float1);
    f("vertex_float2", vertex_float2);
    f("vertex_float3", vertex_float3);
    f("vertex_float4", vertex_float4);
    f("vertex_ubyte4", vertex_ubyte4);
    f("vertex_submit", vertex_submit);
    f("vertex_freeze", vertex_freeze);
    f("vertex_get_number", vertex_get_number);
    f("vertex_get_buffer_size", vertex_get_buffer_size);
    f("vertex_create_buffer_from_buffer", vertex_create_buffer_from_buffer);
    f("vertex_create_buffer_from_buffer_ext", vertex_create_buffer_from_buffer_ext);
    f("draw_skeleton", draw_skeleton);
    f("draw_skeleton_time", draw_skeleton_time);
    f("draw_skeleton_instance", draw_skeleton_instance);
    f("draw_skeleton_collision", draw_skeleton_collision);
    f("draw_enable_skeleton_blendmodes", draw_enable_skeleton_blendmodes);
    f("draw_get_enable_skeleton_blendmodes", draw_get_enable_skeleton_blendmodes);
    f("draw_tilemap", draw_tilemap);
    f("draw_tile", draw_tile);
}

/// @desc Applies a GML interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
function catspeak_ext_session_add_gml_layers(_class) {
    var f = catspeak_session_add_function;
    var c = catspeak_session_add_constant;
    c("layerelementtype_undefined", layerelementtype_undefined);
    c("layerelementtype_background", layerelementtype_background);
    c("layerelementtype_instance", layerelementtype_instance);
    c("layerelementtype_oldtilemap", layerelementtype_oldtilemap);
    c("layerelementtype_sprite", layerelementtype_sprite);
    c("layerelementtype_tilemap", layerelementtype_tilemap);
    c("layerelementtype_particlesystem", layerelementtype_particlesystem);
    c("layerelementtype_tile", layerelementtype_tile);
    c("layerelementtype_sequence", layerelementtype_sequence);
    c("tile_rotate", tile_rotate);
    c("tile_flip", tile_flip);
    c("tile_mirror", tile_mirror);
    c("tile_index_mask", tile_index_mask);
    f("layer_get_id", layer_get_id);
    f("layer_get_id_at_depth", layer_get_id_at_depth);
    f("layer_get_depth", layer_get_depth);
    f("layer_create", layer_create);
    f("layer_destroy", layer_destroy);
    f("layer_destroy_instances", layer_destroy_instances);
    f("layer_add_instance", layer_add_instance);
    f("layer_has_instance", layer_has_instance);
    f("layer_set_visible", layer_set_visible);
    f("layer_get_visible", layer_get_visible);
    f("layer_exists", layer_exists);
    f("layer_x", layer_x);
    f("layer_y", layer_y);
    f("layer_get_x", layer_get_x);
    f("layer_get_y", layer_get_y);
    f("layer_hspeed", layer_hspeed);
    f("layer_vspeed", layer_vspeed);
    f("layer_get_hspeed", layer_get_hspeed);
    f("layer_get_vspeed", layer_get_vspeed);
    f("layer_script_begin", layer_script_begin);
    f("layer_script_end", layer_script_end);
    f("layer_shader", layer_shader);
    f("layer_get_script_begin", layer_get_script_begin);
    f("layer_get_script_end", layer_get_script_end);
    f("layer_get_shader", layer_get_shader);
    f("layer_set_target_room", layer_set_target_room);
    f("layer_get_target_room", layer_get_target_room);
    f("layer_reset_target_room", layer_reset_target_room);
    f("layer_get_all", layer_get_all);
    f("layer_get_all_elements", layer_get_all_elements);
    f("layer_get_name", layer_get_name);
    f("layer_depth", layer_depth);
    f("layer_get_element_layer", layer_get_element_layer);
    f("layer_get_element_type", layer_get_element_type);
    f("layer_element_move", layer_element_move);
    f("layer_force_draw_depth", layer_force_draw_depth);
    f("layer_is_draw_depth_forced", layer_is_draw_depth_forced);
    f("layer_get_forced_depth", layer_get_forced_depth);
    f("layer_background_get_id", layer_background_get_id);
    f("layer_background_exists", layer_background_exists);
    f("layer_background_create", layer_background_create);
    f("layer_background_destroy", layer_background_destroy);
    f("layer_background_visible", layer_background_visible);
    f("layer_background_change", layer_background_change);
    f("layer_background_sprite", layer_background_sprite);
    f("layer_background_htiled", layer_background_htiled);
    f("layer_background_vtiled", layer_background_vtiled);
    f("layer_background_stretch", layer_background_stretch);
    f("layer_background_yscale", layer_background_yscale);
    f("layer_background_xscale", layer_background_xscale);
    f("layer_background_blend", layer_background_blend);
    f("layer_background_alpha", layer_background_alpha);
    f("layer_background_index", layer_background_index);
    f("layer_background_speed", layer_background_speed);
    f("layer_background_get_visible", layer_background_get_visible);
    f("layer_background_get_sprite", layer_background_get_sprite);
    f("layer_background_get_htiled", layer_background_get_htiled);
    f("layer_background_get_vtiled", layer_background_get_vtiled);
    f("layer_background_get_stretch", layer_background_get_stretch);
    f("layer_background_get_yscale", layer_background_get_yscale);
    f("layer_background_get_xscale", layer_background_get_xscale);
    f("layer_background_get_blend", layer_background_get_blend);
    f("layer_background_get_alpha", layer_background_get_alpha);
    f("layer_background_get_index", layer_background_get_index);
    f("layer_background_get_speed", layer_background_get_speed);
    f("layer_sprite_get_id", layer_sprite_get_id);
    f("layer_sprite_exists", layer_sprite_exists);
    f("layer_sprite_create", layer_sprite_create);
    f("layer_sprite_destroy", layer_sprite_destroy);
    f("layer_sprite_change", layer_sprite_change);
    f("layer_sprite_index", layer_sprite_index);
    f("layer_sprite_speed", layer_sprite_speed);
    f("layer_sprite_xscale", layer_sprite_xscale);
    f("layer_sprite_yscale", layer_sprite_yscale);
    f("layer_sprite_angle", layer_sprite_angle);
    f("layer_sprite_blend", layer_sprite_blend);
    f("layer_sprite_alpha", layer_sprite_alpha);
    f("layer_sprite_x", layer_sprite_x);
    f("layer_sprite_y", layer_sprite_y);
    f("layer_sprite_get_sprite", layer_sprite_get_sprite);
    f("layer_sprite_get_index", layer_sprite_get_index);
    f("layer_sprite_get_speed", layer_sprite_get_speed);
    f("layer_sprite_get_xscale", layer_sprite_get_xscale);
    f("layer_sprite_get_yscale", layer_sprite_get_yscale);
    f("layer_sprite_get_angle", layer_sprite_get_angle);
    f("layer_sprite_get_blend", layer_sprite_get_blend);
    f("layer_sprite_get_alpha", layer_sprite_get_alpha);
    f("layer_sprite_get_x", layer_sprite_get_x);
    f("layer_sprite_get_y", layer_sprite_get_y);
    f("layer_tilemap_get_id", layer_tilemap_get_id);
    f("layer_tilemap_exists", layer_tilemap_exists);
    f("layer_tilemap_create", layer_tilemap_create);
    f("layer_tilemap_destroy", layer_tilemap_destroy);
    f("tilemap_tileset", tilemap_tileset);
    f("tilemap_x", tilemap_x);
    f("tilemap_y", tilemap_y);
    f("tilemap_set", tilemap_set);
    f("tilemap_set_at_pixel", tilemap_set_at_pixel);
    f("tilemap_get_tileset", tilemap_get_tileset);
    f("tilemap_get_tile_width", tilemap_get_tile_width);
    f("tilemap_get_tile_height", tilemap_get_tile_height);
    f("tilemap_get_width", tilemap_get_width);
    f("tilemap_get_height", tilemap_get_height);
    f("tilemap_set_width", tilemap_set_width);
    f("tilemap_set_height", tilemap_set_height);
    f("tilemap_get_x", tilemap_get_x);
    f("tilemap_get_y", tilemap_get_y);
    f("tilemap_get", tilemap_get);
    f("tilemap_get_at_pixel", tilemap_get_at_pixel);
    f("tilemap_get_cell_x_at_pixel", tilemap_get_cell_x_at_pixel);
    f("tilemap_get_cell_y_at_pixel", tilemap_get_cell_y_at_pixel);
    f("tilemap_clear", tilemap_clear);
    f("tilemap_set_global_mask", tilemap_set_global_mask);
    f("tilemap_get_global_mask", tilemap_get_global_mask);
    f("tilemap_set_mask", tilemap_set_mask);
    f("tilemap_get_mask", tilemap_get_mask);
    f("tilemap_get_frame", tilemap_get_frame);
    f("tile_set_empty", tile_set_empty);
    f("tile_set_index", tile_set_index);
    f("tile_set_flip", tile_set_flip);
    f("tile_set_mirror", tile_set_mirror);
    f("tile_set_rotate", tile_set_rotate);
    f("tile_get_empty", tile_get_empty);
    f("tile_get_index", tile_get_index);
    f("tile_get_flip", tile_get_flip);
    f("tile_get_mirror", tile_get_mirror);
    f("tile_get_rotate", tile_get_rotate);
    f("layer_tile_exists", layer_tile_exists);
    f("layer_tile_create", layer_tile_create);
    f("layer_tile_destroy", layer_tile_destroy);
    f("layer_tile_change", layer_tile_change);
    f("layer_tile_xscale", layer_tile_xscale);
    f("layer_tile_yscale", layer_tile_yscale);
    f("layer_tile_blend", layer_tile_blend);
    f("layer_tile_alpha", layer_tile_alpha);
    f("layer_tile_x", layer_tile_x);
    f("layer_tile_y", layer_tile_y);
    f("layer_tile_region", layer_tile_region);
    f("layer_tile_visible", layer_tile_visible);
    f("layer_tile_get_sprite", layer_tile_get_sprite);
    f("layer_tile_get_xscale", layer_tile_get_xscale);
    f("layer_tile_get_yscale", layer_tile_get_yscale);
    f("layer_tile_get_blend", layer_tile_get_blend);
    f("layer_tile_get_alpha", layer_tile_get_alpha);
    f("layer_tile_get_x", layer_tile_get_x);
    f("layer_tile_get_y", layer_tile_get_y);
    f("layer_tile_get_region", layer_tile_get_region);
    f("layer_tile_get_visible", layer_tile_get_visible);
    f("layer_instance_get_instance", layer_instance_get_instance);
    f("layer_sequence_get_instance", layer_sequence_get_instance);
    f("layer_sequence_create", layer_sequence_create);
    f("layer_sequence_destroy", layer_sequence_destroy);
    f("layer_sequence_exists", layer_sequence_exists);
    f("layer_sequence_x", layer_sequence_x);
    f("layer_sequence_y", layer_sequence_y);
    f("layer_sequence_angle", layer_sequence_angle);
    f("layer_sequence_xscale", layer_sequence_xscale);
    f("layer_sequence_yscale", layer_sequence_yscale);
    f("layer_sequence_headpos", layer_sequence_headpos);
    f("layer_sequence_headdir", layer_sequence_headdir);
    f("layer_sequence_pause", layer_sequence_pause);
    f("layer_sequence_play", layer_sequence_play);
    f("layer_sequence_speedscale", layer_sequence_speedscale);
    f("layer_sequence_get_x", layer_sequence_get_x);
    f("layer_sequence_get_y", layer_sequence_get_y);
    f("layer_sequence_get_angle", layer_sequence_get_angle);
    f("layer_sequence_get_xscale", layer_sequence_get_xscale);
    f("layer_sequence_get_yscale", layer_sequence_get_yscale);
    f("layer_sequence_get_headpos", layer_sequence_get_headpos);
    f("layer_sequence_get_headdir", layer_sequence_get_headdir);
    f("layer_sequence_get_sequence", layer_sequence_get_sequence);
    f("layer_sequence_is_paused", layer_sequence_is_paused);
    f("layer_sequence_is_finished", layer_sequence_is_finished);
    f("layer_sequence_get_speedscale", layer_sequence_get_speedscale);
    f("layer_sequence_get_length", layer_sequence_get_length);
}

/// @desc Applies a GML interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
function catspeak_ext_session_add_gml_display(_class) {
    var f = catspeak_session_add_function;
    var c = catspeak_session_add_constant;
    c("cr_default", cr_default);
    c("cr_none", cr_none);
    c("cr_arrow", cr_arrow);
    c("cr_cross", cr_cross);
    c("cr_beam", cr_beam);
    c("cr_size_nesw", cr_size_nesw);
    c("cr_size_ns", cr_size_ns);
    c("cr_size_nwse", cr_size_nwse);
    c("cr_size_we", cr_size_we);
    c("cr_uparrow", cr_uparrow);
    c("cr_hourglass", cr_hourglass);
    c("cr_drag", cr_drag);
    c("cr_appstart", cr_appstart);
    c("cr_handpoint", cr_handpoint);
    c("cr_size_all", cr_size_all);
    c("display_landscape", display_landscape);
    c("display_landscape_flipped", display_landscape_flipped);
    c("display_portrait", display_portrait);
    c("display_portrait_flipped", display_portrait_flipped);
    c("tm_sleep", tm_sleep);
    c("tm_countvsyncs", tm_countvsyncs);
    f("display_get_width", display_get_width);
    f("display_get_height", display_get_height);
    f("display_get_orientation", display_get_orientation);
    f("display_get_gui_width", display_get_gui_width);
    f("display_get_gui_height", display_get_gui_height);
    f("display_reset", display_reset);
    f("display_mouse_get_x", display_mouse_get_x);
    f("display_mouse_get_y", display_mouse_get_y);
    f("display_mouse_set", display_mouse_set);
    f("display_set_ui_visibility", display_set_ui_visibility);
    f("window_set_fullscreen", window_set_fullscreen);
    f("window_get_fullscreen", window_get_fullscreen);
    f("window_set_caption", window_set_caption);
    f("window_set_min_width", window_set_min_width);
    f("window_set_max_width", window_set_max_width);
    f("window_set_min_height", window_set_min_height);
    f("window_set_max_height", window_set_max_height);
    f("window_get_visible_rects", window_get_visible_rects);
    f("window_get_caption", window_get_caption);
    f("window_set_cursor", window_set_cursor);
    f("window_get_cursor", window_get_cursor);
    f("window_set_colour", window_set_colour);
    f("window_get_colour", window_get_colour);
    f("window_set_color", window_set_color);
    f("window_get_color", window_get_color);
    f("window_set_position", window_set_position);
    f("window_set_size", window_set_size);
    f("window_set_rectangle", window_set_rectangle);
    f("window_center", window_center);
    f("window_get_x", window_get_x);
    f("window_get_y", window_get_y);
    f("window_get_width", window_get_width);
    f("window_get_height", window_get_height);
    f("window_mouse_get_x", window_mouse_get_x);
    f("window_mouse_get_y", window_mouse_get_y);
    f("window_mouse_set", window_mouse_set);
    f("window_view_mouse_get_x", window_view_mouse_get_x);
    f("window_view_mouse_get_y", window_view_mouse_get_y);
    f("window_views_mouse_get_x", window_views_mouse_get_x);
    f("window_views_mouse_get_y", window_views_mouse_get_y);
    f("window_handle", window_handle);
    f("window_device", window_device);
    f("display_get_dpi_x", display_get_dpi_x);
    f("display_get_dpi_y", display_get_dpi_y);
    f("display_set_gui_size", display_set_gui_size);
    f("display_set_gui_maximise", display_set_gui_maximise);
    f("display_set_gui_maximize", display_set_gui_maximize);
    f("display_set_timing_method", display_set_timing_method);
    f("display_get_timing_method", display_get_timing_method);
    f("display_set_sleep_margin", display_set_sleep_margin);
    f("display_get_sleep_margin", display_get_sleep_margin);
    f("window_has_focus", window_has_focus);
    f("camera_create", camera_create);
    f("camera_create_view", camera_create_view);
    f("camera_destroy", camera_destroy);
    f("camera_apply", camera_apply);
    f("camera_get_active", camera_get_active);
    f("camera_get_default", camera_get_default);
    f("camera_set_default", camera_set_default);
    f("camera_set_view_mat", camera_set_view_mat);
    f("camera_set_proj_mat", camera_set_proj_mat);
    f("camera_set_update_script", camera_set_update_script);
    f("camera_set_begin_script", camera_set_begin_script);
    f("camera_set_end_script", camera_set_end_script);
    f("camera_set_view_pos", camera_set_view_pos);
    f("camera_set_view_size", camera_set_view_size);
    f("camera_set_view_speed", camera_set_view_speed);
    f("camera_set_view_border", camera_set_view_border);
    f("camera_set_view_angle", camera_set_view_angle);
    f("camera_set_view_target", camera_set_view_target);
    f("camera_get_view_mat", camera_get_view_mat);
    f("camera_get_proj_mat", camera_get_proj_mat);
    f("camera_get_update_script", camera_get_update_script);
    f("camera_get_begin_script", camera_get_begin_script);
    f("camera_get_end_script", camera_get_end_script);
    f("camera_get_view_x", camera_get_view_x);
    f("camera_get_view_y", camera_get_view_y);
    f("camera_get_view_width", camera_get_view_width);
    f("camera_get_view_height", camera_get_view_height);
    f("camera_get_view_speed_x", camera_get_view_speed_x);
    f("camera_get_view_speed_y", camera_get_view_speed_y);
    f("camera_get_view_border_x", camera_get_view_border_x);
    f("camera_get_view_border_y", camera_get_view_border_y);
    f("camera_get_view_angle", camera_get_view_angle);
    f("camera_get_view_target", camera_get_view_target);
    f("view_get_camera", view_get_camera);
    f("view_get_visible", view_get_visible);
    f("view_get_xport", view_get_xport);
    f("view_get_yport", view_get_yport);
    f("view_get_wport", view_get_wport);
    f("view_get_hport", view_get_hport);
    f("view_get_surface_id", view_get_surface_id);
    f("view_set_camera", view_set_camera);
    f("view_set_visible", view_set_visible);
    f("view_set_xport", view_set_xport);
    f("view_set_yport", view_set_yport);
    f("view_set_wport", view_set_wport);
    f("view_set_hport", view_set_hport);
    f("view_set_surface_id", view_set_surface_id);
}

/// @desc Applies a GML interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
function catspeak_ext_session_add_gml_debug(_class) {
    var f = catspeak_session_add_function;
    var c = catspeak_session_add_constant;
    
    f("show_debug_message", show_debug_message);
    f("show_debug_overlay", show_debug_overlay);
    f("debug_event", debug_event);
    f("debug_get_callstack", debug_get_callstack);
    f("show_message", show_message);
    f("show_message_async", show_message_async);
    f("show_question", show_question);
    f("show_question_async", show_question_async);
    f("show_error", show_error);
}

/// @desc Applies a GML interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
function catspeak_ext_session_add_gml_files(_class) {
    var f = catspeak_session_add_function;
    var c = catspeak_session_add_constant;
    c("fa_readonly", fa_readonly);
    c("fa_hidden", fa_hidden);
    c("fa_sysfile", fa_sysfile);
    c("fa_volumeid", fa_volumeid);
    c("fa_directory", fa_directory);
    c("fa_archive", fa_archive);
    f("screen_save", screen_save);
    f("screen_save_part", screen_save_part);
    f("gif_open", gif_open);
    f("gif_add_surface", gif_add_surface);
    f("gif_save", gif_save);
    f("gif_save_buffer", gif_save_buffer);
    f("file_text_open_from_string", file_text_open_from_string);
    f("file_text_open_read", file_text_open_read);
    f("file_text_open_write", file_text_open_write);
    f("file_text_open_append", file_text_open_append);
    f("file_text_close", file_text_close);
    f("file_text_write_string", file_text_write_string);
    f("file_text_write_real", file_text_write_real);
    f("file_text_writeln", file_text_writeln);
    f("file_text_read_string", file_text_read_string);
    f("file_text_read_real", file_text_read_real);
    f("file_text_readln", file_text_readln);
    f("file_text_eof", file_text_eof);
    f("file_text_eoln", file_text_eoln);
    f("file_exists", file_exists);
    f("file_delete", file_delete);
    f("file_rename", file_rename);
    f("file_copy", file_copy);
    f("file_find_first", file_find_first);
    f("file_find_next", file_find_next);
    f("file_find_close", file_find_close);
    f("file_attributes", file_attributes);
    f("file_bin_open", file_bin_open);
    f("file_bin_rewrite", file_bin_rewrite);
    f("file_bin_close", file_bin_close);
    f("file_bin_position", file_bin_position);
    f("file_bin_size", file_bin_size);
    f("file_bin_seek", file_bin_seek);
    f("file_bin_write_byte", file_bin_write_byte);
    f("file_bin_read_byte", file_bin_read_byte);
    f("parameter_count", parameter_count);
    f("parameter_string", parameter_string);
    f("ini_open_from_string", ini_open_from_string);
    f("ini_open", ini_open);
    f("ini_close", ini_close);
    f("ini_read_string", ini_read_string);
    f("ini_read_real", ini_read_real);
    f("ini_write_string", ini_write_string);
    f("ini_write_real", ini_write_real);
    f("ini_key_exists", ini_key_exists);
    f("ini_section_exists", ini_section_exists);
    f("ini_key_delete", ini_key_delete);
    f("ini_section_delete", ini_section_delete);
    f("cloud_file_save", cloud_file_save);
    f("cloud_string_save", cloud_string_save);
    f("cloud_synchronise", cloud_synchronise);
    f("http_get", http_get);
    f("http_get_file", http_get_file);
    f("http_post_string", http_post_string);
    f("http_request", http_request);
    f("http_get_request_crossorigin", http_get_request_crossorigin);
    f("http_set_request_crossorigin", http_set_request_crossorigin);
    f("json_encode", json_encode);
    f("json_decode", json_decode);
    f("json_stringify", json_stringify);
    f("json_parse", json_parse);
    f("zip_unzip", zip_unzip);
    f("load_csv", load_csv);
    f("base64_encode", base64_encode);
    f("base64_decode", base64_decode);
    f("md5_string_unicode", md5_string_unicode);
    f("md5_string_utf8", md5_string_utf8);
    f("md5_file", md5_file);
    f("sha1_string_unicode", sha1_string_unicode);
    f("sha1_string_utf8", sha1_string_utf8);
    f("sha1_file", sha1_file);
}

/// @desc Applies a GML interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
function catspeak_ext_session_add_gml_particles(_class) {
    var f = catspeak_session_add_function;
    var c = catspeak_session_add_constant;
    c("ef_explosion", ef_explosion);
    c("ef_ring", ef_ring);
    c("ef_ellipse", ef_ellipse);
    c("ef_firework", ef_firework);
    c("ef_smoke", ef_smoke);
    c("ef_smokeup", ef_smokeup);
    c("ef_star", ef_star);
    c("ef_spark", ef_spark);
    c("ef_flare", ef_flare);
    c("ef_cloud", ef_cloud);
    c("ef_rain", ef_rain);
    c("ef_snow", ef_snow);
    c("pt_shape_pixel", pt_shape_pixel);
    c("pt_shape_disk", pt_shape_disk);
    c("pt_shape_square", pt_shape_square);
    c("pt_shape_line", pt_shape_line);
    c("pt_shape_star", pt_shape_star);
    c("pt_shape_circle", pt_shape_circle);
    c("pt_shape_ring", pt_shape_ring);
    c("pt_shape_sphere", pt_shape_sphere);
    c("pt_shape_flare", pt_shape_flare);
    c("pt_shape_spark", pt_shape_spark);
    c("pt_shape_explosion", pt_shape_explosion);
    c("pt_shape_cloud", pt_shape_cloud);
    c("pt_shape_smoke", pt_shape_smoke);
    c("pt_shape_snow", pt_shape_snow);
    c("ps_distr_linear", ps_distr_linear);
    c("ps_distr_gaussian", ps_distr_gaussian);
    c("ps_distr_invgaussian", ps_distr_invgaussian);
    c("ps_shape_rectangle", ps_shape_rectangle);
    c("ps_shape_ellipse", ps_shape_ellipse);
    c("ps_shape_diamond", ps_shape_diamond);
    c("ps_shape_line", ps_shape_line);
    f("effect_create_below", effect_create_below);
    f("effect_create_above", effect_create_above);
    f("effect_clear", effect_clear);
    f("part_type_create", part_type_create);
    f("part_type_destroy", part_type_destroy);
    f("part_type_exists", part_type_exists);
    f("part_type_clear", part_type_clear);
    f("part_type_shape", part_type_shape);
    f("part_type_sprite", part_type_sprite);
    f("part_type_size", part_type_size);
    f("part_type_scale", part_type_scale);
    f("part_type_orientation", part_type_orientation);
    f("part_type_life", part_type_life);
    f("part_type_step", part_type_step);
    f("part_type_death", part_type_death);
    f("part_type_speed", part_type_speed);
    f("part_type_direction", part_type_direction);
    f("part_type_gravity", part_type_gravity);
    f("part_type_colour1", part_type_colour1);
    f("part_type_colour2", part_type_colour2);
    f("part_type_colour3", part_type_colour3);
    f("part_type_colour_mix", part_type_colour_mix);
    f("part_type_colour_rgb", part_type_colour_rgb);
    f("part_type_colour_hsv", part_type_colour_hsv);
    f("part_type_color1", part_type_color1);
    f("part_type_color2", part_type_color2);
    f("part_type_color3", part_type_color3);
    f("part_type_color_mix", part_type_color_mix);
    f("part_type_color_rgb", part_type_color_rgb);
    f("part_type_color_hsv", part_type_color_hsv);
    f("part_type_alpha1", part_type_alpha1);
    f("part_type_alpha2", part_type_alpha2);
    f("part_type_alpha3", part_type_alpha3);
    f("part_type_blend", part_type_blend);
    f("part_system_create", part_system_create);
    f("part_system_create_layer", part_system_create_layer);
    f("part_system_destroy", part_system_destroy);
    f("part_system_exists", part_system_exists);
    f("part_system_clear", part_system_clear);
    f("part_system_draw_order", part_system_draw_order);
    f("part_system_depth", part_system_depth);
    f("part_system_position", part_system_position);
    f("part_system_automatic_update", part_system_automatic_update);
    f("part_system_automatic_draw", part_system_automatic_draw);
    f("part_system_update", part_system_update);
    f("part_system_drawit", part_system_drawit);
    f("part_system_get_layer", part_system_get_layer);
    f("part_system_layer", part_system_layer);
    f("part_particles_create", part_particles_create);
    f("part_particles_create_colour", part_particles_create_colour);
    f("part_particles_create_color", part_particles_create_color);
    f("part_particles_clear", part_particles_clear);
    f("part_particles_count", part_particles_count);
    f("part_emitter_create", part_emitter_create);
    f("part_emitter_destroy", part_emitter_destroy);
    f("part_emitter_destroy_all", part_emitter_destroy_all);
    f("part_emitter_exists", part_emitter_exists);
    f("part_emitter_clear", part_emitter_clear);
    f("part_emitter_region", part_emitter_region);
    f("part_emitter_burst", part_emitter_burst);
    f("part_emitter_stream", part_emitter_stream);
}

/// @desc Applies a GML interface to this Catspeak session.
/// @param {struct} session The Catspeak session to update.
function catspeak_ext_session_add_gml_device(_class) {
    var f = catspeak_session_add_function;
    var c = catspeak_session_add_constant;
    c("GM_build_date", GM_build_date);
    c("GM_version", GM_version);
    c("GM_runtime_version", GM_runtime_version);
    c("os_windows", os_windows);
    c("os_macosx", os_macosx);
    c("os_ios", os_ios);
    c("os_android", os_android);
    c("os_linux", os_linux);
    c("os_unknown", os_unknown);
    c("os_winphone", os_winphone);
    c("os_win8native", os_win8native);
    c("os_psvita", os_psvita);
    c("os_ps4", os_ps4);
    c("os_xboxone", os_xboxone);
    c("os_ps3", os_ps3);
    c("os_uwp", os_uwp);
    c("os_tvos", os_tvos);
    c("os_switch", os_switch);
    c("browser_not_a_browser", browser_not_a_browser);
    c("browser_unknown", browser_unknown);
    c("browser_ie", browser_ie);
    c("browser_firefox", browser_firefox);
    c("browser_chrome", browser_chrome);
    c("browser_safari", browser_safari);
    c("browser_safari_mobile", browser_safari_mobile);
    c("browser_opera", browser_opera);
    c("browser_tizen", browser_tizen);
    c("browser_edge", browser_edge);
    c("browser_windows_store", browser_windows_store);
    c("browser_ie_mobile", browser_ie_mobile);
    c("device_ios_unknown", device_ios_unknown);
    c("device_ios_iphone", device_ios_iphone);
    c("device_ios_iphone_retina", device_ios_iphone_retina);
    c("device_ios_ipad", device_ios_ipad);
    c("device_ios_ipad_retina", device_ios_ipad_retina);
    c("device_ios_iphone5", device_ios_iphone5);
    c("device_ios_iphone6", device_ios_iphone6);
    c("device_ios_iphone6plus", device_ios_iphone6plus);
    c("device_emulator", device_emulator);
    c("device_tablet", device_tablet);
    c("os_permission_denied_dont_request", os_permission_denied_dont_request);
    c("os_permission_denied", os_permission_denied);
    c("os_permission_granted", os_permission_granted);
    f("browser_input_capture", browser_input_capture);
    f("os_get_config", os_get_config);
    f("os_get_info", os_get_info);
    f("os_get_language", os_get_language);
    f("os_get_region", os_get_region);
    f("os_check_permission", os_check_permission);
    f("os_request_permission", os_request_permission);
    f("os_lock_orientation", os_lock_orientation);
    f("device_mouse_dbclick_enable", device_mouse_dbclick_enable);
    f("device_get_tilt_x", device_get_tilt_x);
    f("device_get_tilt_y", device_get_tilt_y);
    f("device_get_tilt_z", device_get_tilt_z);
    f("device_is_keypad_open", device_is_keypad_open);
    f("device_mouse_check_button", device_mouse_check_button);
    f("device_mouse_check_button_pressed", device_mouse_check_button_pressed);
    f("device_mouse_check_button_released", device_mouse_check_button_released);
    f("device_mouse_x", device_mouse_x);
    f("device_mouse_y", device_mouse_y);
    f("device_mouse_raw_x", device_mouse_raw_x);
    f("device_mouse_raw_y", device_mouse_raw_y);
    f("device_mouse_x_to_gui", device_mouse_x_to_gui);
    f("device_mouse_y_to_gui", device_mouse_y_to_gui);
    f("os_is_paused", os_is_paused);
    f("code_is_compiled", code_is_compiled);
    f("os_is_network_connected", os_is_network_connected);
    f("os_powersave_enable", os_powersave_enable);
}

